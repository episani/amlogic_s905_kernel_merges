cscope 15 /home/atheros/PERFORCE_BACKUP/AEGIS/android/ics/hardware/broadcom/wlan/bcmdhd               0000845478
	@dhdutil/bcmutils.c

21 
	~<ty≥defs.h
>

22 
	~<bcmdefs.h
>

23 
	~<°d¨g.h
>

25 #ifde‡
BCMDRIVER


27 
	~<o¶.h
>

28 
	~<bcmutûs.h
>

29 
	~<siutûs.h
>

33 
	~<°dio.h
>

34 
	~<°rög.h
>

35 
	~<bcmutûs.h
>

37 #i‡
deföed
(
BCMEXTSUP
)

38 
	~<bcm_o¶.h
>

44 
	~<bcmídün.h
>

45 
	~<bcmdevs.h
>

46 
	~<¥Ÿo/ëhî√t.h
>

47 
	~<¥Ÿo/vœn.h
>

48 
	~<¥Ÿo/bcmù.h
>

49 
	~<¥Ÿo/802.1d.h
>

50 
	~<¥Ÿo/802.11.h
>

52 *
	g_bcmutûs_dummy_‚
 = 
NULL
;

54 #ifde‡
BCMDRIVER


59 
uöt


60 
	$pktc›y
(
o¶_t
 *
osh
, *
p
, 
uöt
 
off£t
, 
Àn
, 
uch¨
 *
buf
)

62 
uöt
 
n
, 
ªt
 = 0;

64 i‡(
Àn
 < 0)

65 
Àn
 = 4096;

68 ; 
p
 && 
off£t
;Ö = 
	`PKTNEXT
(
osh
,Ö)) {

69 i‡(
off£t
 < (
uöt
)
	`PKTLEN
(
osh
, 
p
))

71 
off£t
 -
	`PKTLEN
(
osh
, 
p
);

74 i‡(!
p
)

78 ; 
p
 && 
Àn
;Ö = 
	`PKTNEXT
(
osh
,Ö)) {

79 
n
 = 
	`MIN
((
uöt
)
	`PKTLEN
(
osh
, 
p
Ë- 
off£t
, (uöt)
Àn
);

80 
	`bc›y
(
	`PKTDATA
(
osh
, 
p
Ë+ 
off£t
, 
buf
, 
n
);

81 
buf
 +
n
;

82 
Àn
 -
n
;

83 
ªt
 +
n
;

84 
off£t
 = 0;

87  
ªt
;

88 
	}
}

91 
uöt


92 
	$pkt‰ombuf
(
o¶_t
 *
osh
, *
p
, 
uöt
 
off£t
, 
Àn
, 
uch¨
 *
buf
)

94 
uöt
 
n
, 
ªt
 = 0;

97 ; 
p
 && 
off£t
;Ö = 
	`PKTNEXT
(
osh
,Ö)) {

98 i‡(
off£t
 < (
uöt
)
	`PKTLEN
(
osh
, 
p
))

100 
off£t
 -
	`PKTLEN
(
osh
, 
p
);

103 i‡(!
p
)

107 ; 
p
 && 
Àn
;Ö = 
	`PKTNEXT
(
osh
,Ö)) {

108 
n
 = 
	`MIN
((
uöt
)
	`PKTLEN
(
osh
, 
p
Ë- 
off£t
, (uöt)
Àn
);

109 
	`bc›y
(
buf
, 
	`PKTDATA
(
osh
, 
p
Ë+ 
off£t
, 
n
);

110 
buf
 +
n
;

111 
Àn
 -
n
;

112 
ªt
 +
n
;

113 
off£t
 = 0;

116  
ªt
;

117 
	}
}

122 
uöt
 
BCMFASTPATH


123 
	$pkâŸÀn
(
o¶_t
 *
osh
, *
p
)

125 
uöt
 
tŸÆ
;

127 
tŸÆ
 = 0;

128 ; 
p
;Ö = 
	`PKTNEXT
(
osh
,Ö))

129 
tŸÆ
 +
	`PKTLEN
(
osh
, 
p
);

130  (
tŸÆ
);

131 
	}
}

135 
	$pkéa°
(
o¶_t
 *
osh
, *
p
)

137 ; 
	`PKTNEXT
(
osh
, 
p
);Ö = PKTNEXT(osh,Ö))

140  (
p
);

141 
	}
}

144 
uöt
 
BCMFASTPATH


145 
	$pkt£g˙t
(
o¶_t
 *
osh
, *
p
)

147 
uöt
 
˙t
;

149 
˙t
 = 0; 
p
;Ö = 
	`PKTNEXT
(
osh
,Ö))

150 
˙t
++;

152  
˙t
;

153 
	}
}

160 * 
BCMFASTPATH


161 
	$pktq_≥nq
(
pktq
 *
pq
, 
¥ec
, *
p
)

163 
pktq_¥ec
 *
q
;

165 
	`ASSERT
(
¥ec
 >0 &&Öª¯< 
pq
->
num_¥ec
);

166 
	`ASSERT
(
	`PKTLINK
(
p
Ë=
NULL
);

168 
	`ASSERT
(!
	`pktq_fuŒ
(
pq
));

169 
	`ASSERT
(!
	`pktq_pfuŒ
(
pq
, 
¥ec
));

171 
q
 = &
pq
->q[
¥ec
];

173 i‡(
q
->
hód
)

174 
	`PKTSETLINK
(
q
->
èû
, 
p
);

176 
q
->
hód
 = 
p
;

178 
q
->
èû
 = 
p
;

179 
q
->
Àn
++;

181 
pq
->
Àn
++;

183 i‡(
pq
->
hi_¥ec
 < 
¥ec
)

184 
pq
->
hi_¥ec
 = (
uöt8
)
¥ec
;

186  
p
;

187 
	}
}

189 * 
BCMFASTPATH


190 
	$pktq_≥nq_hód
(
pktq
 *
pq
, 
¥ec
, *
p
)

192 
pktq_¥ec
 *
q
;

194 
	`ASSERT
(
¥ec
 >0 &&Öª¯< 
pq
->
num_¥ec
);

195 
	`ASSERT
(
	`PKTLINK
(
p
Ë=
NULL
);

197 
	`ASSERT
(!
	`pktq_fuŒ
(
pq
));

198 
	`ASSERT
(!
	`pktq_pfuŒ
(
pq
, 
¥ec
));

200 
q
 = &
pq
->q[
¥ec
];

202 i‡(
q
->
hód
 =
NULL
)

203 
q
->
èû
 = 
p
;

205 
	`PKTSETLINK
(
p
, 
q
->
hód
);

206 
q
->
hód
 = 
p
;

207 
q
->
Àn
++;

209 
pq
->
Àn
++;

211 i‡(
pq
->
hi_¥ec
 < 
¥ec
)

212 
pq
->
hi_¥ec
 = (
uöt8
)
¥ec
;

214  
p
;

215 
	}
}

217 * 
BCMFASTPATH


218 
	$pktq_pdeq
(
pktq
 *
pq
, 
¥ec
)

220 
pktq_¥ec
 *
q
;

221 *
p
;

223 
	`ASSERT
(
¥ec
 >0 &&Öª¯< 
pq
->
num_¥ec
);

225 
q
 = &
pq
->q[
¥ec
];

227 i‡((
p
 = 
q
->
hód
Ë=
NULL
)

228  
NULL
;

230 i‡((
q
->
hód
 = 
	`PKTLINK
(
p
)Ë=
NULL
)

231 
q
->
èû
 = 
NULL
;

233 
q
->
Àn
--;

235 
pq
->
Àn
--;

237 
	`PKTSETLINK
(
p
, 
NULL
);

239  
p
;

240 
	}
}

242 * 
BCMFASTPATH


243 
	$pktq_pdeq_èû
(
pktq
 *
pq
, 
¥ec
)

245 
pktq_¥ec
 *
q
;

246 *
p
, *
¥ev
;

248 
	`ASSERT
(
¥ec
 >0 &&Öª¯< 
pq
->
num_¥ec
);

250 
q
 = &
pq
->q[
¥ec
];

252 i‡((
p
 = 
q
->
hód
Ë=
NULL
)

253  
NULL
;

255 
¥ev
 = 
NULL
; 
p
 !
q
->
èû
;Ö = 
	`PKTLINK
(p))

256 
¥ev
 = 
p
;

258 i‡(
¥ev
)

259 
	`PKTSETLINK
(
¥ev
, 
NULL
);

261 
q
->
hód
 = 
NULL
;

263 
q
->
èû
 = 
¥ev
;

264 
q
->
Àn
--;

266 
pq
->
Àn
--;

268  
p
;

269 
	}
}

272 
	$pktq_pÊush
(
o¶_t
 *
osh
, 
pktq
 *
pq
, 
¥ec
, 
boﬁ
 
dú
, 
iÂkt_cb_t
 
‚
, 
¨g
)

274 
pktq_¥ec
 *
q
;

275 *
p
, *
¥ev
 = 
NULL
;

277 
q
 = &
pq
->q[
¥ec
];

278 
p
 = 
q
->
hód
;

279 
p
) {

280 i‡(
‚
 =
NULL
 || (*‚)(
p
, 
¨g
)) {

281 
boﬁ
 
hód
 = (
p
 =
q
->head);

282 i‡(
hód
)

283 
q
->
hód
 = 
	`PKTLINK
(
p
);

285 
	`PKTSETLINK
(
¥ev
, 
	`PKTLINK
(
p
));

286 
	`PKTSETLINK
(
p
, 
NULL
);

287 
	`PKTFREE
(
osh
, 
p
, 
dú
);

288 
q
->
Àn
--;

289 
pq
->
Àn
--;

290 
p
 = (
hód
 ? 
q
->hód : 
	`PKTLINK
(
¥ev
));

292 
¥ev
 = 
p
;

293 
p
 = 
	`PKTLINK
(p);

297 i‡(
q
->
hód
 =
NULL
) {

298 
	`ASSERT
(
q
->
Àn
 == 0);

299 
q
->
èû
 = 
NULL
;

301 
	}
}

303 
boﬁ
 
BCMFASTPATH


304 
	$pktq_pdñ
(
pktq
 *
pq
, *
pktbuf
, 
¥ec
)

306 
pktq_¥ec
 *
q
;

307 *
p
;

309 
	`ASSERT
(
¥ec
 >0 &&Öª¯< 
pq
->
num_¥ec
);

311 i‡(!
pktbuf
)

312  
FALSE
;

314 
q
 = &
pq
->q[
¥ec
];

316 i‡(
q
->
hód
 =
pktbuf
) {

317 i‡((
q
->
hód
 = 
	`PKTLINK
(
pktbuf
)Ë=
NULL
)

318 
q
->
èû
 = 
NULL
;

320 
p
 = 
q
->
hód
;Ö && 
	`PKTLINK
’Ë!
pktbuf
;Ö = PKTLINK(p))

322 i‡(
p
 =
NULL
)

323  
FALSE
;

325 
	`PKTSETLINK
(
p
, 
	`PKTLINK
(
pktbuf
));

326 i‡(
q
->
èû
 =
pktbuf
)

327 
q
->
èû
 = 
p
;

330 
q
->
Àn
--;

331 
pq
->
Àn
--;

332 
	`PKTSETLINK
(
pktbuf
, 
NULL
);

333  
TRUE
;

334 
	}
}

337 
	$pktq_öô
(
pktq
 *
pq
, 
num_¥ec
, 
max_Àn
)

339 
¥ec
;

341 
	`ASSERT
(
num_¥ec
 > 0 &&Çum_¥e¯<
PKTQ_MAX_PREC
);

344 
	`bzîo
(
pq
, 
	`OFFSETOF
(
pktq
, 
q
Ë+ ((
pktq_¥ec
Ë* 
num_¥ec
));

346 
pq
->
num_¥ec
 = (
uöt16
)num_prec;

348 
pq
->
max
 = (
uöt16
)
max_Àn
;

350 
¥ec
 = 0;Öª¯< 
num_¥ec
;Örec++)

351 
pq
->
q
[
¥ec
].
max
 =Öq->max;

352 
	}
}

354 * 
BCMFASTPATH


355 
	$pktq_deq
(
pktq
 *
pq
, *
¥ec_out
)

357 
pktq_¥ec
 *
q
;

358 *
p
;

359 
¥ec
;

361 i‡(
pq
->
Àn
 == 0)

362  
NULL
;

364 (
¥ec
 = 
pq
->
hi_¥ec
Ë> 0 &&Öq->
q
[¥ec].
hód
 =
NULL
)

365 
pq
->
hi_¥ec
--;

367 
q
 = &
pq
->q[
¥ec
];

369 i‡((
p
 = 
q
->
hód
Ë=
NULL
)

370  
NULL
;

372 i‡((
q
->
hód
 = 
	`PKTLINK
(
p
)Ë=
NULL
)

373 
q
->
èû
 = 
NULL
;

375 
q
->
Àn
--;

377 
pq
->
Àn
--;

379 i‡(
¥ec_out
)

380 *
¥ec_out
 = 
¥ec
;

382 
	`PKTSETLINK
(
p
, 
NULL
);

384  
p
;

385 
	}
}

387 * 
BCMFASTPATH


388 
	$pktq_deq_èû
(
pktq
 *
pq
, *
¥ec_out
)

390 
pktq_¥ec
 *
q
;

391 *
p
, *
¥ev
;

392 
¥ec
;

394 i‡(
pq
->
Àn
 == 0)

395  
NULL
;

397 
¥ec
 = 0;Öª¯< 
pq
->
hi_¥ec
;Örec++)

398 i‡(
pq
->
q
[
¥ec
].
hód
)

401 
q
 = &
pq
->q[
¥ec
];

403 i‡((
p
 = 
q
->
hód
Ë=
NULL
)

404  
NULL
;

406 
¥ev
 = 
NULL
; 
p
 !
q
->
èû
;Ö = 
	`PKTLINK
(p))

407 
¥ev
 = 
p
;

409 i‡(
¥ev
)

410 
	`PKTSETLINK
(
¥ev
, 
NULL
);

412 
q
->
hód
 = 
NULL
;

414 
q
->
èû
 = 
¥ev
;

415 
q
->
Àn
--;

417 
pq
->
Àn
--;

419 i‡(
¥ec_out
)

420 *
¥ec_out
 = 
¥ec
;

422 
	`PKTSETLINK
(
p
, 
NULL
);

424  
p
;

425 
	}
}

428 
	$pktq_≥ek
(
pktq
 *
pq
, *
¥ec_out
)

430 
¥ec
;

432 i‡(
pq
->
Àn
 == 0)

433  
NULL
;

435 (
¥ec
 = 
pq
->
hi_¥ec
Ë> 0 &&Öq->
q
[¥ec].
hód
 =
NULL
)

436 
pq
->
hi_¥ec
--;

438 i‡(
¥ec_out
)

439 *
¥ec_out
 = 
¥ec
;

441  (
pq
->
q
[
¥ec
].
hód
);

442 
	}
}

445 
	$pktq_≥ek_èû
(
pktq
 *
pq
, *
¥ec_out
)

447 
¥ec
;

449 i‡(
pq
->
Àn
 == 0)

450  
NULL
;

452 
¥ec
 = 0;Öª¯< 
pq
->
hi_¥ec
;Örec++)

453 i‡(
pq
->
q
[
¥ec
].
hód
)

456 i‡(
¥ec_out
)

457 *
¥ec_out
 = 
¥ec
;

459  (
pq
->
q
[
¥ec
].
èû
);

460 
	}
}

463 
	$pktq_Êush
(
o¶_t
 *
osh
, 
pktq
 *
pq
, 
boﬁ
 
dú
, 
iÂkt_cb_t
 
‚
, 
¨g
)

465 
¥ec
;

466 
¥ec
 = 0;Öª¯< 
pq
->
num_¥ec
;Örec++)

467 
	`pktq_pÊush
(
osh
, 
pq
, 
¥ec
, 
dú
, 
‚
, 
¨g
);

468 i‡(
‚
 =
NULL
)

469 
	`ASSERT
(
pq
->
Àn
 == 0);

470 
	}
}

474 
	$pktq_mÀn
(
pktq
 *
pq
, 
uöt
 
¥ec_bmp
)

476 
¥ec
, 
Àn
;

478 
Àn
 = 0;

480 
¥ec
 = 0;Öª¯<
pq
->
hi_¥ec
;Örec++)

481 i‡(
¥ec_bmp
 & (1 << 
¥ec
))

482 
Àn
 +
pq
->
q
[
¥ec
].len;

484  
Àn
;

485 
	}
}

488 * 
BCMFASTPATH


489 
	$pktq_mdeq
(
pktq
 *
pq
, 
uöt
 
¥ec_bmp
, *
¥ec_out
)

491 
pktq_¥ec
 *
q
;

492 *
p
;

493 
¥ec
;

495 i‡(
pq
->
Àn
 == 0)

496  
NULL
;

498 (
¥ec
 = 
pq
->
hi_¥ec
Ë> 0 &&Öq->
q
[¥ec].
hód
 =
NULL
)

499 
pq
->
hi_¥ec
--;

501 (
¥ec_bmp
 & (1 << 
¥ec
)Ë=0 || 
pq
->
q
[¥ec].
hód
 =
NULL
)

502 i‡(
¥ec
-- == 0)

503  
NULL
;

505 
q
 = &
pq
->q[
¥ec
];

507 i‡((
p
 = 
q
->
hód
Ë=
NULL
)

508  
NULL
;

510 i‡((
q
->
hód
 = 
	`PKTLINK
(
p
)Ë=
NULL
)

511 
q
->
èû
 = 
NULL
;

513 
q
->
Àn
--;

515 i‡(
¥ec_out
)

516 *
¥ec_out
 = 
¥ec
;

518 
pq
->
Àn
--;

520 
	`PKTSETLINK
(
p
, 
NULL
);

522  
p
;

523 
	}
}

527 c⁄° 
	gbcm_˘y≥
[] = {

529 
_BCM_C
,_BCM_C,_BCM_C,_BCM_C,_BCM_C,_BCM_C,_BCM_C,_BCM_C,

530 
_BCM_C
, _BCM_C|
_BCM_S
, _BCM_C|_BCM_S, _BCM_C|_BCM_S, _BCM_C|_BCM_S, _BCM_C|_BCM_S, _BCM_C,

531 
_BCM_C
,

532 
_BCM_C
,_BCM_C,_BCM_C,_BCM_C,_BCM_C,_BCM_C,_BCM_C,_BCM_C,

533 
_BCM_C
,_BCM_C,_BCM_C,_BCM_C,_BCM_C,_BCM_C,_BCM_C,_BCM_C,

534 
_BCM_S
|
_BCM_SP
,
_BCM_P
,_BCM_P,_BCM_P,_BCM_P,_BCM_P,_BCM_P,_BCM_P,

535 
_BCM_P
,_BCM_P,_BCM_P,_BCM_P,_BCM_P,_BCM_P,_BCM_P,_BCM_P,

536 
_BCM_D
,_BCM_D,_BCM_D,_BCM_D,_BCM_D,_BCM_D,_BCM_D,_BCM_D,

537 
_BCM_D
,_BCM_D,
_BCM_P
,_BCM_P,_BCM_P,_BCM_P,_BCM_P,_BCM_P,

538 
_BCM_P
, 
_BCM_U
|
_BCM_X
, _BCM_U|_BCM_X, _BCM_U|_BCM_X, _BCM_U|_BCM_X, _BCM_U|_BCM_X,

539 
_BCM_U
|
_BCM_X
, _BCM_U,

540 
_BCM_U
,_BCM_U,_BCM_U,_BCM_U,_BCM_U,_BCM_U,_BCM_U,_BCM_U,

541 
_BCM_U
,_BCM_U,_BCM_U,_BCM_U,_BCM_U,_BCM_U,_BCM_U,_BCM_U,

542 
_BCM_U
,_BCM_U,_BCM_U,
_BCM_P
,_BCM_P,_BCM_P,_BCM_P,_BCM_P,

543 
_BCM_P
, 
_BCM_L
|
_BCM_X
, _BCM_L|_BCM_X, _BCM_L|_BCM_X, _BCM_L|_BCM_X, _BCM_L|_BCM_X,

544 
_BCM_L
|
_BCM_X
, _BCM_L,

545 
_BCM_L
,_BCM_L,_BCM_L,_BCM_L,_BCM_L,_BCM_L,_BCM_L,_BCM_L,

546 
_BCM_L
,_BCM_L,_BCM_L,_BCM_L,_BCM_L,_BCM_L,_BCM_L,_BCM_L,

547 
_BCM_L
,_BCM_L,_BCM_L,
_BCM_P
,_BCM_P,_BCM_P,_BCM_P,
_BCM_C
,

550 
_BCM_S
|
_BCM_SP
, 
_BCM_P
, _BCM_P, _BCM_P, _BCM_P, _BCM_P, _BCM_P, _BCM_P, _BCM_P, _BCM_P,

551 
_BCM_P
, _BCM_P, _BCM_P, _BCM_P, _BCM_P, _BCM_P,

552 
_BCM_P
, _BCM_P, _BCM_P, _BCM_P, _BCM_P, _BCM_P, _BCM_P, _BCM_P, _BCM_P, _BCM_P, _BCM_P,

553 
_BCM_P
, _BCM_P, _BCM_P, _BCM_P, _BCM_P,

554 
_BCM_U
, _BCM_U, _BCM_U, _BCM_U, _BCM_U, _BCM_U, _BCM_U, _BCM_U, _BCM_U, _BCM_U, _BCM_U,

555 
_BCM_U
, _BCM_U, _BCM_U, _BCM_U, _BCM_U,

556 
_BCM_U
, _BCM_U, _BCM_U, _BCM_U, _BCM_U, _BCM_U, _BCM_U, 
_BCM_P
, _BCM_U, _BCM_U, _BCM_U,

557 
_BCM_U
, _BCM_U, _BCM_U, _BCM_U, 
_BCM_L
,

558 
_BCM_L
, _BCM_L, _BCM_L, _BCM_L, _BCM_L, _BCM_L, _BCM_L, _BCM_L, _BCM_L, _BCM_L, _BCM_L,

559 
_BCM_L
, _BCM_L, _BCM_L, _BCM_L, _BCM_L,

560 
_BCM_L
, _BCM_L, _BCM_L, _BCM_L, _BCM_L, _BCM_L, _BCM_L, 
_BCM_P
, _BCM_L, _BCM_L, _BCM_L,

561 
_BCM_L
, _BCM_L, _BCM_L, _BCM_L, _BCM_L

564 
ul⁄g


565 
	$bcm_°πoul
(*
˝
, **
ídp
, 
uöt
 
ba£
)

567 
ul⁄g
 
ªsu…
, 
œ°_ªsu…
 = 0, 
vÆue
;

568 
boﬁ
 
möus
;

570 
möus
 = 
FALSE
;

572 
	`bcm_is•a˚
(*
˝
))

573 
˝
++;

575 i‡(
˝
[0] == '+')

576 
˝
++;

577 i‡(
˝
[0] == '-') {

578 
möus
 = 
TRUE
;

579 
˝
++;

582 i‡(
ba£
 == 0) {

583 i‡(
˝
[0] == '0') {

584 i‡((
˝
[1] == 'x') || (cp[1] == 'X')) {

585 
ba£
 = 16;

586 
˝
 = &cp[2];

588 
ba£
 = 8;

589 
˝
 = &cp[1];

592 
ba£
 = 10;

593 } i‡(
ba£
 =16 && (
˝
[0] == '0') && ((cp[1] == 'x') || (cp[1] == 'X'))) {

594 
˝
 = &cp[2];

597 
ªsu…
 = 0;

599 
	`bcm_isxdigô
(*
˝
) &&

600 (
vÆue
 = 
	`bcm_isdigô
(*
˝
Ë? *˝-'0' : 
	`bcm_touµî
(*˝)-'A'+10Ë< 
ba£
)

602 
ªsu…
 =Ñesu…*
ba£
 + 
vÆue
;

604 i‡(
ªsu…
 < 
œ°_ªsu…
 && !
möus
)

605  (
ul⁄g
)-1;

606 
œ°_ªsu…
 = 
ªsu…
;

607 
˝
++;

610 i‡(
möus
)

611 
ªsu…
 = (
ul⁄g
)(-()result);

613 i‡(
ídp
)

614 *
ídp
 = (*)
˝
;

616  (
ªsu…
);

617 
	}
}

620 
	$bcm_©oi
(*
s
)

622  ()
	`bcm_°πoul
(
s
, 
NULL
, 10);

623 
	}
}

627 
	$bcm°r°r
(*
hay°ack
, *
√edÀ
)

629 
Àn
, 
∆í
;

630 
i
;

632 i‡((
hay°ack
 =
NULL
Ë|| (
√edÀ
 == NULL))

633  (
hay°ack
);

635 
∆í
 = 
	`°æí
(
√edÀ
);

636 
Àn
 = 
	`°æí
(
hay°ack
Ë- 
∆í
 + 1;

638 
i
 = 0; i < 
Àn
; i++)

639 i‡(
	`memcmp
(
√edÀ
, &
hay°ack
[
i
], 
∆í
) == 0)

640  (&
hay°ack
[
i
]);

641  (
NULL
);

642 
	}
}

645 
	$bcm°rˇt
(*
de°
, c⁄° *
§c
)

647 *
p
;

649 
p
 = 
de°
 + 
	`°æí
(dest);

651 (*
p
++ = *
§c
++) != '\0')

654  (
de°
);

655 
	}
}

658 
	$bcm°∫ˇt
(*
de°
, c⁄° *
§c
, 
uöt
 
size
)

660 *
ídp
;

661 *
p
;

663 
p
 = 
de°
 + 
	`°æí
(dest);

664 
ídp
 = 
p
 + 
size
;

666 
p
 !
ídp
 && (*p++ = *
§c
++) != '\0')

669  (
de°
);

670 
	}
}

693 
	$bcm°πok
(**
°rög
, c⁄° *
dñimôîs
, *
tokdñim
)

695 *
°r
;

696 
m≠
[8];

697 
cou¡
;

698 *
√xtokí
;

700 i‡(
tokdñim
 !
NULL
) {

702 *
tokdñim
 = '\0';

706 
cou¡
 = 0; count < 8; count++) {

707 
m≠
[
cou¡
] = 0;

712 
m≠
[*
dñimôîs
 >> 5] |= (1 << (*delimiters & 31));

714 *
dñimôîs
++);

716 
°r
 = (*)*
°rög
;

722 ((
m≠
[*
°r
 >> 5] & (1 << (*str & 31))) && *str) || (*str == ' ')) {

723 
°r
++;

726 
√xtokí
 = (*)
°r
;

731 ; *
°r
; str++) {

732 i‡(
m≠
[*
°r
 >> 5] & (1 << (*str & 31))) {

733 i‡(
tokdñim
 !
NULL
) {

734 *
tokdñim
 = *
°r
;

737 *
°r
++ = '\0';

742 *
°rög
 = (*)
°r
;

745 i‡(
√xtokí
 =(*Ë
°r
) {

746  
NULL
;

749  
√xtokí
;

751 
	}
}

754 
	#xToLowî
(
C
) \

755 ((
C
 >'A' && C <'Z'Ë? ()(()C - ()'A' + ()'a'Ë: C)

	)

771 
	$bcm°ricmp
(c⁄° *
s1
, c⁄° *
s2
)

773 
dc
, 
sc
;

775 *
s2
 && *
s1
) {

776 
dc
 = 
	`xToLowî
(*
s1
);

777 
sc
 = 
	`xToLowî
(*
s2
);

778 i‡(
dc
 < 
sc
)  -1;

779 i‡(
dc
 > 
sc
)  1;

780 
s1
++;

781 
s2
++;

784 i‡(*
s1
 && !*
s2
)  1;

785 i‡(!*
s1
 && *
s2
)  -1;

787 
	}
}

805 
	$bcm°∫icmp
(c⁄° * 
s1
, c⁄° * 
s2
, 
˙t
)

807 
dc
, 
sc
;

809 *
s2
 && *
s1
 && 
˙t
) {

810 
dc
 = 
	`xToLowî
(*
s1
);

811 
sc
 = 
	`xToLowî
(*
s2
);

812 i‡(
dc
 < 
sc
)  -1;

813 i‡(
dc
 > 
sc
)  1;

814 
s1
++;

815 
s2
++;

816 
˙t
--;

819 i‡(!
˙t
)  0;

820 i‡(*
s1
 && !*
s2
)  1;

821 i‡(!*
s1
 && *
s2
)  -1;

823 
	}
}

827 
	$bcm_ëhî_©€
(*
p
, 
ëhî_addr
 *
ó
)

829 
i
 = 0;

832 
ó
->
o˘ë
[
i
++] = (Ë
	`bcm_°πoul
(
p
, &p, 16);

833 i‡(!*
p
++ || 
i
 == 6)

837  (
i
 == 6);

838 
	}
}

841 #i‡
deföed
(
CONFIG_USBRNDIS_RETAIL
Ë|| deföed(
NDIS_MINIPORT_DRIVER
)

846 
ul⁄g


847 
	$wch¨2ascii
(*
abuf
, 
ush‹t
 *
wbuf
, ush‹à
wbuÊí
, 
ul⁄g
 
abuÊí
)

849 
ul⁄g
 
c›y˘
 = 1;

850 
ush‹t
 
i
;

852 i‡(
abuÊí
 == 0)

856 
wbuÊí
 /(
ush‹t
);

858 
i
 = 0; i < 
wbuÊí
; ++i) {

859 i‡(--
abuÊí
 == 0)

861 *
abuf
++ = (Ë*
wbuf
++;

862 ++
c›y˘
;

864 *
abuf
 = '\0';

866  
c›y˘
;

867 
	}
}

871 
	$bcm_ëhî_¡ﬂ
(c⁄° 
ëhî_addr
 *
ó
, *
buf
)

873 c⁄° 
ãm∂©e
[] = "%02x:%02x:%02x:%02x:%02x:%02x";

874 
	`¢¥ötf
(
buf
, 18, 
ãm∂©e
,

875 
ó
->
o˘ë
[0]&0xff,Éa->octet[1]&0xff,Éa->octet[2]&0xff,

876 
ó
->
o˘ë
[3]&0xff,Éa->octet[4]&0xff,Éa->octet[5]&0xff);

877  (
buf
);

878 
	}
}

881 
	$bcm_ù_¡ﬂ
(
ùv4_addr
 *
ü
, *
buf
)

883 
	`¢¥ötf
(
buf
, 16, "%d.%d.%d.%d",

884 
ü
->
addr
[0], ia->addr[1], ia->addr[2], ia->addr[3]);

885  (
buf
);

886 
	}
}

888 #ifde‡
BCMDRIVER


891 
	$bcm_mdñay
(
uöt
 
ms
)

893 
uöt
 
i
;

895 
i
 = 0; i < 
ms
; i++) {

896 
	`OSL_DELAY
(1000);

898 
	}
}

904 #i‡
deföed
(
DHD_DEBUG
)

907 
	$¥pkt
(c⁄° *
msg
, 
o¶_t
 *
osh
, *
p0
)

909 *
p
;

911 i‡(
msg
 && (msg[0] != '\0'))

912 
	`¥ötf
("%s:\n", 
msg
);

914 
p
 = 
p0
;Ö;Ö = 
	`PKTNEXT
(
osh
,Ö))

915 
	`¥hex
(
NULL
, 
	`PKTDATA
(
osh
, 
p
), 
	`PKTLEN
(osh,Ö));

916 
	}
}

923 
uöt
 
BCMFASTPATH


924 
	$pkt£çrio
(*
pkt
, 
boﬁ
 
upd©e_vèg
)

926 
ëhî_hódî
 *
eh
;

927 
ëhîvœn_hódî
 *
evh
;

928 
uöt8
 *
pktd©a
;

929 
¥i‹ôy
 = 0;

930 
rc
 = 0;

932 
pktd©a
 = (
uöt8
 *Ë
	`PKTDATA
(
NULL
, 
pkt
);

933 
	`ASSERT
(
	`ISALIGNED
((
uöçå
)
pktd©a
, (
uöt16
)));

935 
eh
 = (
ëhî_hódî
 *Ë
pktd©a
;

937 i‡(
	`¡oh16
(
eh
->
ëhî_ty≥
Ë=
ETHER_TYPE_8021Q
) {

938 
uöt16
 
vœn_èg
;

939 
vœn_¥io
, 
ds˝_¥io
 = 0;

941 
evh
 = (
ëhîvœn_hódî
 *)
eh
;

943 
vœn_èg
 = 
	`¡oh16
(
evh
->vlan_tag);

944 
vœn_¥io
 = (Ë(
vœn_èg
 >> 
VLAN_PRI_SHIFT
Ë& 
VLAN_PRI_MASK
;

946 i‡(
	`¡oh16
(
evh
->
ëhî_ty≥
Ë=
ETHER_TYPE_IP
) {

947 
uöt8
 *
ù_body
 = 
pktd©a
 + (
ëhîvœn_hódî
);

948 
uöt8
 
tos_tc
 = 
	`IP_TOS46
(
ù_body
);

949 
ds˝_¥io
 = ()(
tos_tc
 >> 
IPV4_TOS_PREC_SHIFT
);

953 i‡(
ds˝_¥io
 != 0) {

954 
¥i‹ôy
 = 
ds˝_¥io
;

955 
rc
 |
PKTPRIO_VDSCP
;

957 
¥i‹ôy
 = 
vœn_¥io
;

958 
rc
 |
PKTPRIO_VLAN
;

967 i‡(
upd©e_vèg
 && (
¥i‹ôy
 !
vœn_¥io
)) {

968 
vœn_èg
 &~(
VLAN_PRI_MASK
 << 
VLAN_PRI_SHIFT
);

969 
vœn_èg
 |(
uöt16
)
¥i‹ôy
 << 
VLAN_PRI_SHIFT
;

970 
evh
->
vœn_èg
 = 
	`ht⁄16
(vlan_tag);

971 
rc
 |
PKTPRIO_UPD
;

973 } i‡(
	`¡oh16
(
eh
->
ëhî_ty≥
Ë=
ETHER_TYPE_IP
) {

974 
uöt8
 *
ù_body
 = 
pktd©a
 + (
ëhî_hódî
);

975 
uöt8
 
tos_tc
 = 
	`IP_TOS46
(
ù_body
);

976 
¥i‹ôy
 = ()(
tos_tc
 >> 
IPV4_TOS_PREC_SHIFT
);

977 
rc
 |
PKTPRIO_DSCP
;

980 
	`ASSERT
(
¥i‹ôy
 >0 &&Öri‹ôy <
MAXPRIO
);

981 
	`PKTSETPRIO
(
pkt
, 
¥i‹ôy
);

982  (
rc
 | 
¥i‹ôy
);

983 
	}
}

985 #i‚de‡
BCM_BOOTLOADER


987 
	gbcm_unde„º°r
[32];

988 c⁄° *
	gbcmîr‹°πabÀ
[] = 
BCMERRSTRINGTABLE
;

992 
	$bcmîr‹°r
(
bcmîr‹
)

995 
	`ASSERT
(
	`ABS
(
BCME_LAST
Ë=(
	`ARRAYSIZE
(
bcmîr‹°πabÀ
) - 1));

997 i‡(
bcmîr‹
 > 0 || bcmîr‹ < 
BCME_LAST
) {

998 
	`¢¥ötf
(
bcm_unde„º°r
, (bcm_unde„º°r), "UndeföedÉº‹ %d", 
bcmîr‹
);

999  
bcm_unde„º°r
;

1002 
	`ASSERT
(
	`°æí
(
bcmîr‹°πabÀ
[-
bcmîr‹
]Ë< 
BCME_STRLEN
);

1004  
bcmîr‹°πabÀ
[-
bcmîr‹
];

1005 
	}
}

1012 c⁄° 
bcm_iov¨_t
*

1013 
	$bcm_iov¨_lookup
(c⁄° 
bcm_iov¨_t
 *
èbÀ
, c⁄° *
«me
)

1015 c⁄° 
bcm_iov¨_t
 *
vi
;

1016 c⁄° *
lookup_«me
;

1019 
lookup_«me
 = 
	`°ºchr
(
«me
, ':');

1020 i‡(
lookup_«me
 !
NULL
)

1021 
lookup_«me
++;

1023 
lookup_«me
 = 
«me
;

1025 
	`ASSERT
(
èbÀ
 !
NULL
);

1027 
vi
 = 
èbÀ
; vi->
«me
; vi++) {

1028 i‡(!
	`°rcmp
(
vi
->
«me
, 
lookup_«me
))

1029  
vi
;

1033  
NULL
;

1034 
	}
}

1037 
	$bcm_iov¨_Àncheck
(c⁄° 
bcm_iov¨_t
 *
vi
, *
¨g
, 
Àn
, 
boﬁ
 
£t
)

1039 
bcmîr‹
 = 0;

1042 
vi
->
ty≥
) {

1043 
IOVT_BOOL
:

1044 
IOVT_INT8
:

1045 
IOVT_INT16
:

1046 
IOVT_INT32
:

1047 
IOVT_UINT8
:

1048 
IOVT_UINT16
:

1049 
IOVT_UINT32
:

1051 i‡(
Àn
 < ()()) {

1052 
bcmîr‹
 = 
BCME_BUFTOOSHORT
;

1056 
IOVT_BUFFER
:

1058 i‡(
Àn
 < 
vi
->
möÀn
) {

1059 
bcmîr‹
 = 
BCME_BUFTOOSHORT
;

1063 
IOVT_VOID
:

1064 i‡(!
£t
) {

1066 
bcmîr‹
 = 
BCME_UNSUPPORTED
;

1067 } i‡(
Àn
) {

1069 
bcmîr‹
 = 
BCME_BUFTOOLONG
;

1075 
	`ASSERT
(0);

1076 
bcmîr‹
 = 
BCME_UNSUPPORTED
;

1079  
bcmîr‹
;

1080 
	}
}

1107 c⁄° 
uöt8
 
	g¸c8_èbÀ
[256] = {

1142 
	#CRC_INNER_LOOP
(
n
, 
c
, 
x
) \

1143 (
c
Ë((cË>> 8Ë^ 
¸c
##
n
##
_èbÀ
[((cË^ (
x
)Ë& 0xff]

	)

1145 
uöt8


1146 
	$hnd¸c8
(

1147 
uöt8
 *
pd©a
,

1148 
uöt
 
nbyãs
,

1149 
uöt8
 
¸c


1155 
nbyãs
-- > 0)

1156 
¸c
 = 
¸c8_èbÀ
[(¸¯^ *
pd©a
++) & 0xff];

1158  
¸c
;

1159 
	}
}

1183 c⁄° 
uöt16
 
	g¸c16_èbÀ
[256] = {

1218 
uöt16


1219 
	$hnd¸c16
(

1220 
uöt8
 *
pd©a
,

1221 
uöt
 
nbyãs
,

1222 
uöt16
 
¸c


1225 
nbyãs
-- > 0)

1226 
	`CRC_INNER_LOOP
(16, 
¸c
, *
pd©a
++);

1227  
¸c
;

1228 
	}
}

1230 c⁄° 
uöt32
 
	g¸c32_èbÀ
[256] = {

1301 
uöt32


1302 
	$hnd¸c32
(
uöt8
 *
pd©a
, 
uöt
 
nbyãs
, 
uöt32
 
¸c
)

1304 
uöt8
 *
≥nd
;

1305 #ifde‡
__mùs__


1306 
uöt8
 
tmp
[4];

1307 
ul⁄g
 *
çå
 = (ul⁄g *)
tmp
;

1310 
≥nd
 = (
uöt8
 *)((
uöt
)(
pd©a
 + 3) & 0xfffffffc);

1311 
nbyãs
 -(
≥nd
 - 
pd©a
);

1312 
pd©a
 < 
≥nd
)

1313 
	`CRC_INNER_LOOP
(32, 
¸c
, *
pd©a
++);

1316 
≥nd
 = 
pd©a
 + (
nbyãs
 & 0xfffffffc);

1317 
pd©a
 < 
≥nd
) {

1318 *
çå
 = *(
ul⁄g
 *)
pd©a
;

1319 
pd©a
 +(
ul⁄g
 *);

1320 
	`CRC_INNER_LOOP
(32, 
¸c
, 
tmp
[0]);

1321 
	`CRC_INNER_LOOP
(32, 
¸c
, 
tmp
[1]);

1322 
	`CRC_INNER_LOOP
(32, 
¸c
, 
tmp
[2]);

1323 
	`CRC_INNER_LOOP
(32, 
¸c
, 
tmp
[3]);

1327 
≥nd
 = 
pd©a
 + (
nbyãs
 & 0x03);

1328 
pd©a
 < 
≥nd
)

1329 
	`CRC_INNER_LOOP
(32, 
¸c
, *
pd©a
++);

1331 
≥nd
 = 
pd©a
 + 
nbyãs
;

1332 
pd©a
 < 
≥nd
)

1333 
	`CRC_INNER_LOOP
(32, 
¸c
, *
pd©a
++);

1336  
¸c
;

1337 
	}
}

1339 #ifde‡
nŸdef


1340 
	#CLEN
 1499

	)

1341 
	#CBUFSIZ
 (
CLEN
+4)

	)

1342 
	#CNBUFS
 5

	)

1345 
	$ã°¸c32
()

1347 
uöt
 
j
, 
k
, 
l
;

1348 
uöt8
 *
buf
;

1349 
uöt
 
Àn
[
CNBUFS
];

1350 
uöt32
 
¸¸
;

1351 
uöt32
 
¸c32tv
[
CNBUFS
] =

1354 
	`ASSERT
((
buf
 = 
	`MALLOC
(
CBUFSIZ
*
CNBUFS
)Ë!
NULL
);

1357 
l
 = 0;Ü <= 4;Ü++) {

1358 
j
 = 0; j < 
CNBUFS
; j++) {

1359 
Àn
[
j
] = 
CLEN
;

1360 
k
 = 0; k < 
Àn
[
j
]; k++)

1361 *(
buf
 + 
j
*
CBUFSIZ
 + (
k
+
l
)) = (j+k) & 0xff;

1364 
j
 = 0; j < 
CNBUFS
; j++) {

1365 
¸¸
 = 
	`¸c32
(
buf
 + 
j
*
CBUFSIZ
 + 
l
, 
Àn
[j], 
CRC32_INIT_VALUE
);

1366 
	`ASSERT
(
¸¸
 =
¸c32tv
[
j
]);

1370 
	`MFREE
(
buf
, 
CBUFSIZ
*
CNBUFS
);

1372 
	}
}

1383 
bcm_év_t
 *

1384 
	$bcm_√xt_év
(
bcm_év_t
 *
ñt
, *
buÊí
)

1386 
Àn
;

1389 i‡(!
	`bcm_vÆid_év
(
ñt
, *
buÊí
))

1390  
NULL
;

1393 
Àn
 = 
ñt
->len;

1394 
ñt
 = (
bcm_év_t
*)”…->
d©a
 + 
Àn
);

1395 *
buÊí
 -(2 + 
Àn
);

1398 i‡(!
	`bcm_vÆid_év
(
ñt
, *
buÊí
))

1399  
NULL
;

1401  
ñt
;

1402 
	}
}

1409 
bcm_év_t
 *

1410 
	$bcm_∑r£_évs
(*
buf
, 
buÊí
, 
uöt
 
key
)

1412 
bcm_év_t
 *
ñt
;

1413 
tŸÀn
;

1415 
ñt
 = (
bcm_év_t
*)
buf
;

1416 
tŸÀn
 = 
buÊí
;

1419 
tŸÀn
 >= 2) {

1420 
Àn
 = 
ñt
->len;

1423 i‡((
ñt
->
id
 =
key
Ë&& (
tŸÀn
 >(
Àn
 + 2)))

1424  (
ñt
);

1426 
ñt
 = (
bcm_év_t
*)((
uöt8
*Î… + (
Àn
 + 2));

1427 
tŸÀn
 -(
Àn
 + 2);

1430  
NULL
;

1431 
	}
}

1439 
bcm_év_t
 *

1440 
	$bcm_∑r£_‹dîed_évs
(*
buf
, 
buÊí
, 
uöt
 
key
)

1442 
bcm_év_t
 *
ñt
;

1443 
tŸÀn
;

1445 
ñt
 = (
bcm_év_t
*)
buf
;

1446 
tŸÀn
 = 
buÊí
;

1449 
tŸÀn
 >= 2) {

1450 
uöt
 
id
 = 
ñt
->id;

1451 
Àn
 = 
ñt
->len;

1454 i‡(
id
 > 
key
)

1455  (
NULL
);

1458 i‡((
id
 =
key
Ë&& (
tŸÀn
 >(
Àn
 + 2)))

1459  (
ñt
);

1461 
ñt
 = (
bcm_év_t
*)((
uöt8
*Î… + (
Àn
 + 2));

1462 
tŸÀn
 -(
Àn
 + 2);

1464  
NULL
;

1465 
	}
}

1467 #i‡
deföed
(
WLMSG_PRHDRS
Ë|| deföed(
WLMSG_PRPKT
Ë|| deföed(
WLMSG_ASSOC
) || \

1468 
	$deföed
(
DHD_DEBUG
)

1470 
	$bcm_f‹m©_Êags
(c⁄° 
bcm_bô_desc_t
 *
bd
, 
uöt32
 
Êags
, * 
buf
, 
Àn
)

1472 
i
;

1473 * 
p
 = 
buf
;

1474 
hex°r
[16];

1475 
¶í
 = 0, 
∆í
 = 0;

1476 
uöt32
 
bô
;

1477 c⁄° * 
«me
;

1479 i‡(
Àn
 < 2 || !
buf
)

1482 
buf
[0] = '\0';

1484 
i
 = 0; 
Êags
 != 0; i++) {

1485 
bô
 = 
bd
[
i
].bit;

1486 
«me
 = 
bd
[
i
].name;

1487 i‡(
bô
 =0 && 
Êags
 != 0) {

1489 
	`¢¥ötf
(
hex°r
, 16, "0x%X", 
Êags
);

1490 
«me
 = 
hex°r
;

1491 
Êags
 = 0;

1492 } i‡((
Êags
 & 
bô
) == 0)

1494 
Êags
 &~
bô
;

1495 
∆í
 = 
	`°æí
(
«me
);

1496 
¶í
 +
∆í
;

1498 i‡(
Êags
 != 0)

1499 
¶í
 += 1;

1501 i‡(
Àn
 <
¶í
)

1504 
	`°∫˝y
(
p
, 
«me
, 
∆í
 + 1);

1505 
p
 +
∆í
;

1507 i‡(
Êags
 != 0)

1508 
p
 +
	`¢¥ötf
(p, 2, " ");

1509 
Àn
 -
¶í
;

1513 i‡(
Êags
 != 0) {

1514 i‡(
Àn
 < 2)

1515 
p
 -2 - 
Àn
;

1516 
p
 +
	`¢¥ötf
(p, 2, ">");

1519  ()(
p
 - 
buf
);

1520 
	}
}

1523 #i‡
deföed
(
WLMSG_PRHDRS
Ë|| deföed(
WLMSG_PRPKT
Ë|| deföed(
WLMSG_ASSOC
) || \

1524 
deföed
(
DHD_DEBUG
Ë|| 
	$deföed
(
WLMEDIA_PEAKRATE
)

1527 
	$bcm_f‹m©_hex
(*
°r
, c⁄° *
byãs
, 
Àn
)

1529 
i
;

1530 *
p
 = 
°r
;

1531 c⁄° 
uöt8
 *
§c
 = (c⁄° uöt8*)
byãs
;

1533 
i
 = 0; i < 
Àn
; i++) {

1534 
p
 +
	`¢¥ötf
’, 3, "%02X", *
§c
);

1535 
§c
++;

1537  ()(
p
 - 
°r
);

1538 
	}
}

1543 
	$¥hex
(c⁄° *
msg
, 
uch¨
 *
buf
, 
uöt
 
nbyãs
)

1545 
löe
[128], *
p
;

1546 
Àn
 = (
löe
);

1547 
nch¨
;

1548 
uöt
 
i
;

1550 i‡(
msg
 && (msg[0] != '\0'))

1551 
	`¥ötf
("%s:\n", 
msg
);

1553 
p
 = 
löe
;

1554 
i
 = 0; i < 
nbyãs
; i++) {

1555 i‡(
i
 % 16 == 0) {

1556 
nch¨
 = 
	`¢¥ötf
(
p
, 
Àn
, " %04d: ", 
i
);

1557 
p
 +
nch¨
;

1558 
Àn
 -
nch¨
;

1560 i‡(
Àn
 > 0) {

1561 
nch¨
 = 
	`¢¥ötf
(
p
, 
Àn
, "%02x ", 
buf
[
i
]);

1562 
p
 +
nch¨
;

1563 
Àn
 -
nch¨
;

1566 i‡(
i
 % 16 == 15) {

1567 
	`¥ötf
("%s\n", 
löe
);

1568 
p
 = 
löe
;

1569 
Àn
 = (
löe
);

1574 i‡(
p
 !
löe
)

1575 
	`¥ötf
("%s\n", 
löe
);

1576 
	}
}

1578 c⁄° *
	g¸y±o_Ægo_«mes
[] = {

1594 
	$bcm_¸y±o_Ægo_«me
(
uöt
 
Ægo
)

1596  (
Ægo
 < 
	`ARRAYSIZE
(
¸y±o_Ægo_«mes
)) ? crypto_algo_names[algo] : "ERR";

1597 
	}
}

1601 
	$bcm_chù«me
(
uöt
 
chùid
, *
buf
, uöà
Àn
)

1603 c⁄° *
fmt
;

1605 
fmt
 = ((
chùid
 > 0xa000) || (chipid < 0x4000)) ? "%d" : "%x";

1606 
	`¢¥ötf
(
buf
, 
Àn
, 
fmt
, 
chùid
);

1607  
buf
;

1608 
	}
}

1612 
	$bcm_bªv_°r
(
uöt32
 
bªv
, *
buf
)

1614 i‡(
bªv
 < 0x100)

1615 
	`¢¥ötf
(
buf
, 8, "%d.%d", (
bªv
 & 0xf0) >> 4, brev & 0xf);

1617 
	`¢¥ötf
(
buf
, 8, "%c%03x", ((
bªv
 & 0xf000) == 0x1000) ? 'P' : 'A', brev & 0xfff);

1619  (
buf
);

1620 
	}
}

1622 
	#BUFSIZE_TODUMP_ATONCE
 512

	)

1626 
	$¥ötbig
(*
buf
)

1628 
uöt
 
Àn
, 
max_Àn
;

1629 
c
;

1631 
Àn
 = 
	`°æí
(
buf
);

1633 
max_Àn
 = 
BUFSIZE_TODUMP_ATONCE
;

1635 
Àn
 > 
max_Àn
) {

1636 
c
 = 
buf
[
max_Àn
];

1637 
buf
[
max_Àn
] = '\0';

1638 
	`¥ötf
("%s", 
buf
);

1639 
buf
[
max_Àn
] = 
c
;

1641 
buf
 +
max_Àn
;

1642 
Àn
 -
max_Àn
;

1645 
	`¥ötf
("%s\n", 
buf
);

1647 
	}
}

1650 
uöt


1651 
	$bcmdumpfõlds
(
bcmué_rdªg_πn
 
ªad_πn
, *
¨g0
, 
uöt
 
¨g1
, 
fõlddesc
 *
fõlddesc_¨øy
,

1652 *
buf
, 
uöt32
 
bufsize
)

1654 
uöt
 
fûÀd_Àn
;

1655 
Àn
;

1656 
fõlddesc
 *
cur_±r
;

1658 
fûÀd_Àn
 = 0;

1659 
cur_±r
 = 
fõlddesc_¨øy
;

1661 
bufsize
 > 1) {

1662 i‡(
cur_±r
->
«móndfmt
 =
NULL
)

1664 
Àn
 = 
	`¢¥ötf
(
buf
, 
bufsize
, 
cur_±r
->
«móndfmt
,

1665 
	`ªad_πn
(
¨g0
, 
¨g1
, 
cur_±r
->
off£t
));

1667 i‡(
Àn
 < 0 || (
uöt32
Óí >
bufsize
)

1668 
Àn
 = 
bufsize
 - 1;

1669 
buf
 +
Àn
;

1670 
bufsize
 -
Àn
;

1671 
fûÀd_Àn
 +
Àn
;

1672 
cur_±r
++;

1674  
fûÀd_Àn
;

1675 
	}
}

1677 
uöt


1678 
	$bcm_mkiov¨
(*
«me
, *
d©a
, 
uöt
 
d©Æí
, *
buf
, uöà
buÊí
)

1680 
uöt
 
Àn
;

1682 
Àn
 = 
	`°æí
(
«me
) + 1;

1684 i‡((
Àn
 + 
d©Æí
Ë> 
buÊí
)

1687 
	`°∫˝y
(
buf
, 
«me
, 
buÊí
);

1690 
	`mem˝y
(&
buf
[
Àn
], 
d©a
, 
d©Æí
);

1691 
Àn
 +
d©Æí
;

1693  
Àn
;

1694 
	}
}

1702 
	#QDBM_OFFSET
 153

	)

1703 
	#QDBM_TABLE_LEN
 40

	)

1708 
	#QDBM_TABLE_LOW_BOUND
 6493

	)

1714 
	#QDBM_TABLE_HIGH_BOUND
 64938

	)

1716 c⁄° 
uöt16
 
	gnqdBm_to_mW_m≠
[
QDBM_TABLE_LEN
] = {

1725 
uöt16


1726 
	$bcm_qdbm_to_mw
(
uöt8
 
qdbm
)

1728 
uöt
 
Á˘‹
 = 1;

1729 
idx
 = 
qdbm
 - 
QDBM_OFFSET
;

1731 i‡(
idx
 >
QDBM_TABLE_LEN
) {

1739 
idx
 < 0) {

1740 
idx
 += 40;

1741 
Á˘‹
 *= 10;

1747  ((
nqdBm_to_mW_m≠
[
idx
] + 
Á˘‹
/2) / factor);

1748 
	}
}

1750 
uöt8


1751 
	$bcm_mw_to_qdbm
(
uöt16
 
mw
)

1753 
uöt8
 
qdbm
;

1754 
off£t
;

1755 
uöt
 
mw_uöt
 = 
mw
;

1756 
uöt
 
bound¨y
;

1759 i‡(
mw_uöt
 <= 1)

1762 
off£t
 = 
QDBM_OFFSET
;

1765 
mw_uöt
 < 
QDBM_TABLE_LOW_BOUND
) {

1766 
mw_uöt
 *= 10;

1767 
off£t
 -= 40;

1770 
qdbm
 = 0; qdbm < 
QDBM_TABLE_LEN
-1; qdbm++) {

1771 
bound¨y
 = 
nqdBm_to_mW_m≠
[
qdbm
] + (nqdBm_to_mW_map[qdbm+1] -

1772 
nqdBm_to_mW_m≠
[
qdbm
])/2;

1773 i‡(
mw_uöt
 < 
bound¨y
)

1777 
qdbm
 +(
uöt8
)
off£t
;

1779  (
qdbm
);

1780 
	}
}

1783 
uöt


1784 
	$bcm_bôcou¡
(
uöt8
 *
bôm≠
, 
uöt
 
Àngth
)

1786 
uöt
 
bôcou¡
 = 0, 
i
;

1787 
uöt8
 
tmp
;

1788 
i
 = 0; i < 
Àngth
; i++) {

1789 
tmp
 = 
bôm≠
[
i
];

1790 
tmp
) {

1791 
bôcou¡
++;

1792 
tmp
 &= (tmp - 1);

1795  
bôcou¡
;

1796 
	}
}

1798 #ifde‡
BCMDRIVER


1802 
	$bcm_böô
(
bcm°rbuf
 *
b
, *
buf
, 
uöt
 
size
)

1804 
b
->
‹igsize
 = b->
size
 = size;

1805 
b
->
‹igbuf
 = b->
buf
 = buf;

1806 
	}
}

1810 
	$bcm_b¥ötf
(
bcm°rbuf
 *
b
, c⁄° *
fmt
, ...)

1812 
va_li°
 
≠
;

1813 
r
;

1815 
	`va_°¨t
(
≠
, 
fmt
);

1816 
r
 = 
	`v¢¥ötf
(
b
->
buf
, b->
size
, 
fmt
, 
≠
);

1822 i‡((
r
 =-1Ë|| (∏>()
b
->
size
) || (r == 0)) {

1823 
b
->
size
 = 0;

1825 
b
->
size
 -
r
;

1826 
b
->
buf
 +
r
;

1829 
	`va_íd
(
≠
);

1831  
r
;

1832 
	}
}

1835 
	$bcm_öc_byãs
(
uch¨
 *
num
, 
num_byãs
, 
uöt8
 
amou¡
)

1837 
i
;

1839 
i
 = 0; i < 
num_byãs
; i++) {

1840 
num
[
i
] +
amou¡
;

1841 i‡(
num
[
i
] >
amou¡
)

1843 
amou¡
 = 1;

1845 
	}
}

1848 
	$bcm_cmp_byãs
(
uch¨
 *
¨g1
, uch¨ *
¨g2
, 
uöt8
 
nbyãs
)

1850 
i
;

1852 
i
 = 
nbyãs
 - 1; i >= 0; i--) {

1853 i‡(
¨g1
[
i
] !
¨g2
[i])

1854  (
¨g1
[
i
] - 
¨g2
[i]);

1857 
	}
}

1860 
	$bcm_¥öt_byãs
(*
«me
, c⁄° 
uch¨
 *
d©a
, 
Àn
)

1862 
i
;

1863 
≥r_löe
 = 0;

1865 
	`¥ötf
("%s: %d \n", 
«me
 ?Çamê: "", 
Àn
);

1866 
i
 = 0; i < 
Àn
; i++) {

1867 
	`¥ötf
("%02x ", *
d©a
++);

1868 
≥r_löe
++;

1869 i‡(
≥r_löe
 == 16) {

1870 
≥r_löe
 = 0;

1871 
	`¥ötf
("\n");

1874 
	`¥ötf
("\n");

1875 
	}
}

1876 #i‡
deföed
(
WLTINYDUMP
Ë|| deföed(
WLMSG_INFORM
Ë|| deföed(
WLMSG_ASSOC
) || \

1877 
deföed
(
WLMSG_PRPKT
Ë|| 
	$deföed
(
WLMSG_WSEC
)

1878 
	#SSID_FMT_BUF_LEN
 ((4 * 
DOT11_MAX_SSID_LEN
Ë+ 1)

	)

1881 
	$bcm_f‹m©_ssid
(* 
buf
, c⁄° 
uch¨
 
ssid
[], 
uöt
 
ssid_Àn
)

1883 
uöt
 
i
, 
c
;

1884 *
p
 = 
buf
;

1885 *
ídp
 = 
buf
 + 
SSID_FMT_BUF_LEN
;

1887 i‡(
ssid_Àn
 > 
DOT11_MAX_SSID_LEN
) ssid_len = DOT11_MAX_SSID_LEN;

1889 
i
 = 0; i < 
ssid_Àn
; i++) {

1890 
c
 = (
uöt
)
ssid
[
i
];

1891 i‡(
c
 == '\\') {

1892 *
p
++ = '\\';

1893 *
p
++ = '\\';

1894 } i‡(
	`bcm_i•röt
((
uch¨
)
c
)) {

1895 *
p
++ = ()
c
;

1897 
p
 +
	`¢¥ötf
’, (
ídp
 -Ö), "\\x%02X", 
c
);

1900 *
p
 = '\0';

1901 
	`ASSERT
(
p
 < 
ídp
);

1903  ()(
p
 - 
buf
);

1904 
	}
}

1917 
	$¥o˚ss_nvøm_v¨s
(*
v¨buf
, 
Àn
)

1919 *
dp
;

1920 
boﬁ
 
födNewlöe
;

1921 
cﬁumn
;

1922 
buf_Àn
, 
n
;

1923 
∑d
 = 0;

1925 
dp
 = 
v¨buf
;

1927 
födNewlöe
 = 
FALSE
;

1928 
cﬁumn
 = 0;

1930 
n
 = 0;Ç < 
Àn
;Ç++) {

1931 i‡(
v¨buf
[
n
] == '\r')

1933 i‡(
födNewlöe
 && 
v¨buf
[
n
] != '\n')

1935 
födNewlöe
 = 
FALSE
;

1936 i‡(
v¨buf
[
n
] == '#') {

1937 
födNewlöe
 = 
TRUE
;

1940 i‡(
v¨buf
[
n
] == '\n') {

1941 i‡(
cﬁumn
 == 0)

1943 *
dp
++ = 0;

1944 
cﬁumn
 = 0;

1947 *
dp
++ = 
v¨buf
[
n
];

1948 
cﬁumn
++;

1950 
buf_Àn
 = ()(
dp
 - 
v¨buf
);

1951 i‡(
buf_Àn
 % 4) {

1952 
∑d
 = 4 - 
buf_Àn
 % 4;

1953 i‡(
∑d
 && (
buf_Àn
 +Öad <
Àn
)) {

1954 
buf_Àn
 +
∑d
;

1958 
dp
 < 
v¨buf
 + 
n
)

1959 *
dp
++ = 0;

1961  
buf_Àn
;

1962 
	}
}

	@dhdutil/dhdu.c

24 #i‡!
deföed
(
BWL_NO_FILESYSTEM_SUPPORT
)

25 
	#BWL_FILESYSTEM_SUPPORT


	)

28 
	#PROP_TXSTATUS


	)

30 
	~<°dio.h
>

31 
	~<°dlib.h
>

32 
	~<°rög.h
>

33 
	~<˘y≥.h
>

34 
	~<as£π.h
>

36 
	~<ty≥defs.h
>

37 
	~<ïivîs.h
>

38 
	~<¥Ÿo/ëhî√t.h
>

39 
	~<dhdio˘l.h
>

40 
	~<sdiov¨.h
>

41 
	~<bcmutûs.h
>

42 
	~<bcmídün.h
>

43 
	~"dhdu.h
"

44 
	~"möi›t.h
"

45 
	~<¥Ÿo/bcmù.h
>

46 
	#IPV4_ADDR_LEN
 4

	)

47 
	~<¥Ÿo/bt_amp_hci.h
>

49 
	~<î∫o.h
>

51 
	~<åxhdr.h
>

53 
	#°ricmp
 
°rˇ£cmp


	)

54 
	#°∫icmp
 
°∫ˇ£cmp


	)

57 
cmd_func_t
 
	gdhd_v¨_void
;

58 
cmd_func_t
 
	gdhd_v¨öt
, 
	gdhd_v¨°r
;

59 
cmd_func_t
 
	gdhd_v¨_gë™d¥öt°r
, 
	gdhd_v¨_gëöt
, 
	gdhd_v¨_gë
;

60 
cmd_func_t
 
	gdhd_v¨_£töt
;

62 
cmd_func_t
 
	gdhd_vîsi⁄
, 
	gdhd_li°
, 
	gdhd_msgÀvñ
;

64 #ifde‡
SDTEST


65 
cmd_func_t
 
	gdhd_pktgí
;

67 
cmd_func_t
 
	gdhd_•rom
;

68 
cmd_func_t
 
	gdhd_sdªg
;

69 
cmd_func_t
 
	gdhd_sd_msgÀvñ
, 
	gdhd_sd_blocksize
, 
	gdhd_sd_mode
, 
	gdhd_sd_ªg
;

70 
cmd_func_t
 
	gdhd_dma_mode
;

71 
cmd_func_t
 
	gdhd_membyãs
, 
	gdhd_dow∆ﬂd
, 
	gdhd_dldn
,

72 
	gdhd_u∂ﬂd
, 
	gdhd_v¨s
, 
	gdhd_idÀ˛ock
, 
	gdhd_idÀtime
;

73 
cmd_func_t
 
	gdhd_log°amp
;

75 #ifde‡
PROP_TXSTATUS


76 
cmd_func_t
 
	gdhd_¥›tx°©u£«bÀ
;

77 
cmd_func_t
 
	gdhd_¥›tx°©usmode
;

79 
dhd_v¨_gëbuf
(*
dhd
, *
iov¨
, *
∑øm
, 
∑øm_Àn
, **
buÂå
);

80 
dhd_v¨_£tbuf
(*
dhd
, *
iov¨
, *
∑øm
, 
∑øm_Àn
);

82 
uöt
 
dhd_iov¨_mkbuf
(*
«me
, *
d©a
, uöà
d©Æí
,

83 *
buf
, 
uöt
 
buÊí
, *
≥º
);

84 
dhd_iov¨_gëöt
(*
dhd
, *
«me
, *
v¨
);

85 
dhd_iov¨_£töt
(*
dhd
, *
«me
, 
v¨
);

87 #i‡
deföed
(
BWL_FILESYSTEM_SUPPORT
)

88 
fûe_size
(*
‚ame
);

89 
ªad_v¨s
(*
‚ame
, *
buf
, 
buf_maxÀn
);

92 
cmd_func_t
 
	gwl_HCI_cmd
;

93 
cmd_func_t
 
	gwl_HCI_ACL_d©a
;

97 
	mbufd©a
[
DHD_IOCTL_MAXLEN
];

98 
uöt32
 
	mÆignme
;

99 } 
	gbuf°ru˘_dhd
;

100 *
	gbuf
 = (*Ë&
buf°ru˘_dhd
.
bufd©a
;

103 
uöt8
 
	göt_fmt
;

106 
uöt
 
	mvÆue
;

107 *
	m°rög
;

108 } 
	tdbg_msg_t
;

110 
dhd_do_msgÀvñ
(*
dhd
, 
cmd_t
 *
cmd
, **
¨gv
, 
dbg_msg_t
 *
dbg_msg
);

113 
cmd_t
 
	gdhd_cmds
[] = {

114 { "cmds", 
dhd_li°
, -1, -1,

116 { "vîsi⁄", 
dhd_vîsi⁄
, 
DHD_GET_VAR
, -1,

118 { "msgÀvñ", 
dhd_msgÀvñ
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

120 { "bcmîr‹°r", 
dhd_v¨_gë™d¥öt°r
, 
DHD_GET_VAR
, -1,

122 { "wdtick", 
dhd_v¨öt
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

124 { "öå", 
dhd_v¨öt
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

126 { "pﬁÃ©e", 
dhd_v¨öt
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

128 { "idÀtime", 
dhd_idÀtime
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

130 { "idÀ˛ock", 
dhd_idÀ˛ock
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

135 { "sd1idÀ", 
dhd_v¨öt
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

137 { "f‹˚eví", 
dhd_v¨öt
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

139 { "ªadahód", 
dhd_v¨öt
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

141 { "sdrxchaö", 
dhd_v¨öt
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

143 { "Æign˘l", 
dhd_v¨öt
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

145 { "sdÆign", 
dhd_v¨öt
, 
DHD_GET_VAR
, -1,

147 { "txbound", 
dhd_v¨öt
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

149 { "rxbound", 
dhd_v¨öt
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

151 { "txmömax", 
dhd_v¨öt
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

153 { "dc⁄pﬁl", 
dhd_v¨öt
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

155 { "dump", 
dhd_v¨°r
, 
DHD_GET_VAR
, -1,

157 { "c⁄s", 
dhd_v¨°r
, -1, 
DHD_SET_VAR
,

159 { "˛órcou¡s", 
dhd_v¨_void
, -1, 
DHD_SET_VAR
,

161 { "logdump", 
dhd_v¨°r
, 
DHD_GET_VAR
, -1,

163 { "logˇl", 
dhd_v¨öt
, -1, 
DHD_SET_VAR
,

165 { "log°amp", 
dhd_log°amp
, -1, 
DHD_SET_VAR
,

167 { "memsize", 
dhd_v¨öt
, 
DHD_GET_VAR
, -1,

169 { "membyãs", 
dhd_membyãs
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

174 { "dow∆ﬂd", 
dhd_dow∆ﬂd
, -1, 
DHD_SET_VAR
,

181 { "dldn", 
dhd_dldn
, -1, 
DHD_SET_VAR
,

184 { "v¨s", 
dhd_v¨s
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

187 { "u∂ﬂd", 
dhd_u∂ﬂd
, -1, -1,

191 { "§dump", 
dhd_•rom
, 
DHD_GET_VAR
, -1,

193 { "§wrôe", 
dhd_•rom
, -1, 
DHD_SET_VAR
,

198 { "¶ìp", 
dhd_v¨öt
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

200 #ifde‡
SDTEST


201 { "exéo›", 
dhd_v¨öt
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

203 { "pktgí", 
dhd_pktgí
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

222 { "dngl_isﬁ©i⁄", 
dhd_v¨öt
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

224 { "sdªg", 
dhd_sdªg
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

226 { "sbªg", 
dhd_sdªg
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

228 { "sd_cis", 
dhd_v¨_gë™d¥öt°r
, 
DHD_GET_VAR
, -1,

230 { "sd_devªg", 
dhd_sd_ªg
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

232 { "sd_ho°ªg", 
dhd_sd_ªg
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

234 { "sd_blocksize", 
dhd_sd_blocksize
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

236 { "sd_blockmode", 
dhd_v¨öt
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

238 { "sd_öts", 
dhd_v¨öt
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

240 { "sd_dma", 
dhd_dma_mode
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

242 { "sd_yõld˝u", 
dhd_v¨öt
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

244 { "sd_möyõld", 
dhd_v¨öt
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

246 { "sd_f‹˚rb", 
dhd_v¨öt
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

248 { "sd_numöts", 
dhd_v¨öt
, 
DHD_GET_VAR
, -1,

250 { "sd_numloˇlöts", 
dhd_v¨öt
, 
DHD_GET_VAR
, -1,

252 { "sd_divis‹", 
dhd_v¨öt
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

254 { "sd_powî", 
dhd_v¨öt
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

256 { "sd_˛ock", 
dhd_v¨öt
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

258 { "sd_¸c", 
dhd_v¨öt
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

260 { "sd_mode", 
dhd_sd_mode
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

262 { "sd_high•ìd", 
dhd_v¨öt
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

264 { "sd_msgÀvñ", 
dhd_sd_msgÀvñ
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

266 { "sd_hcúegs", 
dhd_v¨°r
, 
DHD_GET_VAR
, -1,

268 { "sdiod_drive", 
dhd_v¨öt
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

270 { "devª£t", 
dhd_v¨öt
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

272 { "io˘l_timeout", 
dhd_v¨öt
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

274 { "HCI_cmd", 
wl_HCI_cmd
, -1, 
DHD_SET_VAR
,

277 { "HCI_ACL_d©a", 
wl_HCI_ACL_d©a
, -1, 
DHD_SET_VAR
,

280 #ifde‡
PROP_TXSTATUS


281 { "¥›tx", 
dhd_¥›tx°©u£«bÀ
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

285 { "±xmode", 
dhd_¥›tx°©usmode
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

291 { "sd_uhsimode", 
dhd_v¨öt
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

293 #ifde‡
WLMEDIA_HTSF


294 { "pktdly°©sz", 
dhd_v¨öt
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

298 { "hsic¶ìp", 
dhd_v¨öt
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

300 { "ch™gemtu", 
dhd_v¨öt
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

302 { "hsiˇuto¶ìp", 
dhd_v¨öt
, 
DHD_GET_VAR
, 
DHD_SET_VAR
,

304 { 
NULL
, NULL, 0, 0, NULL }

307 
cmd_t
 
	gdhd_v¨cmd
 = {"v¨", 
dhd_v¨öt
, -1, -1, "unrecognizedÇame,Åype -h for help"};

308 *
	gdhdu_av0
;

310 #i‡
deföed
(
BWL_FILESYSTEM_SUPPORT
)

312 
	$fûe_size
(*
‚ame
)

314 
FILE
 *
Â
;

315 
size
 = -1;

319 i‡((
Â
 = 
	`f›í
(
‚ame
, "rb")Ë=
NULL
 ||

320 
	`f£ek
(
Â
, 0, 
SEEK_END
) < 0 ||

321 (
size
 = 
	`·ñl
(
Â
)) < 0)

322 
	`Ârötf
(
°dîr
, "CouldÇot determine size of %s: %s\n",

323 
‚ame
, 
	`°ªº‹
(
î∫o
));

325 i‡(
Â
 !
NULL
)

326 
	`f˛o£
(
Â
);

328  ()
size
;

329 
	}
}

339 
	$dhd_›ti⁄
(***
∑rgv
, **
pi‚ame
, *
phñp
)

341 *
i‚ame
 = 
NULL
;

342 
hñp
 = 
FALSE
;

343 
°©us
 = 
CMD_OPT
;

344 **
¨gv
 = *
∑rgv
;

346 
öt_fmt
 = 
INT_FMT_DEC
;

348 *
¨gv
) {

350 i‡(!
	`°rcmp
(*
¨gv
, "-a") || !strcmp(*argv, "-i")) {

351 *
›t
 = *
¨gv
++;

352 
i‚ame
 = *
¨gv
;

353 i‡(!
i‚ame
) {

354 
	`Ârötf
(
°dîr
,

355 "îr‹:Éx≥˘ed i¡îÁ˚Çamêa·î o±i⁄ %s\n", 
›t
);

356 
°©us
 = 
CMD_ERR
;

362 i‡(!
	`°rcmp
(*
¨gv
, "-d"))

363 
öt_fmt
 = 
INT_FMT_DEC
;

364 i‡(!
	`°rcmp
(*
¨gv
, "-u"))

365 
öt_fmt
 = 
INT_FMT_UINT
;

366 i‡(!
	`°rcmp
(*
¨gv
, "-x"))

367 
öt_fmt
 = 
INT_FMT_HEX
;

370 i‡(!
	`°rcmp
(*
¨gv
, "-h"))

371 
hñp
 = 
TRUE
;

375 
°©us
 = 
CMD_DHD
;

380 
¨gv
 ++;

384 *
phñp
 = 
hñp
;

385 *
pi‚ame
 = 
i‚ame
;

386 *
∑rgv
 = 
¨gv
;

388  
°©us
;

389 
	}
}

392 
	$dhd_cmd_ußge
(
cmd_t
 *
cmd
)

394 i‡(
	`°æí
(
cmd
->
«me
) >= 8)

395 
	`Ârötf
(
°dîr
, "%s\n\t%s\n\n", 
cmd
->
«me
, cmd->
hñp
);

397 
	`Ârötf
(
°dîr
, "%s\t%s\n\n", 
cmd
->
«me
, cmd->
hñp
);

398 
	}
}

402 
	$dhd_li°
(*
dhd
, 
cmd_t
 *
g¨b
, **
¨gv
)

404 
cmd_t
 *
cmd
;

405 
ƒows
, 
i
, 
Àn
;

406 *
buf
;

407 
Àâî
, 
cﬁ
, 
row
, 
∑d
;

409 
	`UNUSED_PARAMETER
(
dhd
);

410 
	`UNUSED_PARAMETER
(
g¨b
);

411 
	`UNUSED_PARAMETER
(
¨gv
);

413 
cmd
 = 
dhd_cmds
, 
ƒows
 = 0; cmd->
«me
; cmd++)

414 
ƒows
++;

416 
ƒows
 /= 4;

417 
ƒows
++;

419 
Àn
 = 
ƒows
 * 80 + 2;

420 
buf
 = 
	`mÆloc
(
Àn
);

421 i‡(
buf
 =
NULL
) {

422 
	`Ârötf
(
°dîr
, "FaûedÅÿÆloˇã buf„∏o‡%d byãs\n", 
Àn
);

423  
COMMAND_ERROR
;

425 
i
 = 0; i < 
Àn
; i++)

426 *(
buf
+
i
) = 0;

428 
row
 = 
cﬁ
 = 0;

429 
Àâî
 = 'a';Üetter < 'z';Üetter++) {

430 
cmd
 = 
dhd_cmds
; cmd->
«me
; cmd++) {

431 i‡(
cmd
->
«me
[0] =
Àâî
 || cmd->name[0] ==Üetter - 0x20) {

432 
	`°rˇt
(
buf
+
row
*80, 
cmd
->
«me
);

433 
∑d
 = 18 * (
cﬁ
 + 1Ë- 
	`°æí
(
buf
+
row
*80);

434 i‡(
∑d
 < 1)

435 
∑d
 = 1;

436 ; 
∑d
;Öad--)

437 
	`°rˇt
(
buf
+
row
*80, " ");

438 
row
++;

439 i‡(
row
 =
ƒows
) {

440 
cﬁ
++; 
row
 = 0;

445 
row
 = 0;Ñow < 
ƒows
;Ñow++)

446 
	`¥ötf
("%s\n", 
buf
+
row
*80);

448 
	`¥ötf
("\n");

449 
	`‰ì
(
buf
);

451 
	}
}

454 
	$dhd_cmds_ußge
(
cmd_t
 *
p‹t_cmds
)

456 
cmd_t
 *
p‹t_cmd
;

457 
cmd_t
 *
cmd
;

460 
p‹t_cmd
 = 
p‹t_cmds
;Ö‹t_cmd &&Ö‹t_cmd->
«me
;Öort_cmd++)

462 
	`dhd_cmd_ußge
(
p‹t_cmd
);

465 
cmd
 = 
dhd_cmds
; cmd->
«me
; cmd++) {

467 
p‹t_cmd
 = 
p‹t_cmds
;Ö‹t_cmd &&Ö‹t_cmd->
«me
;Öort_cmd++)

468 i‡(!
	`°rcmp
(
p‹t_cmd
->
«me
, 
cmd
->name))

470 i‡(!
p‹t_cmd
 || !p‹t_cmd->
«me
)

471 
	`dhd_cmd_ußge
(
cmd
);

473 
	}
}

476 
	$dhd_ußge
(
cmd_t
 *
p‹t_cmds
)

478 
	`Ârötf
(
°dîr
,

480 
dhdu_av0
);

482 
	`Ârötf
(
°dîr
, "\n");

483 
	`Ârötf
(
°dîr
, " -hÅhis message\n");

484 
	`Ârötf
(
°dîr
, " -a, -iádapterÇame orÇumber\n");

485 
	`Ârötf
(
°dîr
, " -d display valuesás signed integer\n");

486 
	`Ârötf
(
°dîr
, " -u display valuesás unsigned integer\n");

487 
	`Ârötf
(
°dîr
, " -x display valuesás hexdecimal\n");

488 
	`Ârötf
(
°dîr
, "\n");

490 
	`dhd_cmds_ußge
(
p‹t_cmds
);

491 
	}
}

494 
	$dhd_check
(*
dhd
)

496 
ªt
;

497 
vÆ
;

499 i‡((
ªt
 = 
	`dhd_gë
(
dhd
, 
DHD_GET_MAGIC
, &
vÆ
, ()) < 0))

500  
ªt
;

501 i‡(
vÆ
 !
DHD_IOCTL_MAGIC
)

503 i‡((
ªt
 = 
	`dhd_gë
(
dhd
, 
DHD_GET_VERSION
, &
vÆ
, ()) < 0))

504  
ªt
;

505 i‡(
vÆ
 > 
DHD_IOCTL_VERSION
) {

506 
	`Ârötf
(
°dîr
, "Version mismatch,Ölease upgrade\n");

510 
	}
}

513 
	$dhd_¥ötöt
(
vÆ
)

515 
öt_fmt
) {

516 
INT_FMT_UINT
:

517 
	`¥ötf
("%u\n", 
vÆ
);

519 
INT_FMT_HEX
:

520 
	`¥ötf
("0x%x\n", 
vÆ
);

522 
INT_FMT_DEC
:

524 
	`¥ötf
("%d\n", 
vÆ
);

527 
	}
}

531 
	$dhd_hexdump
(
uch¨
 *
buf
, 
uöt
 
nbyãs
, uöà
ßddr
)

533 
löe
[256];

534 * 
p
;

535 
uöt
 
i
;

537 i‡(
nbyãs
 == 0) {

538 
	`¥ötf
("\n");

542 
p
 = 
löe
;

543 
i
 = 0; i < 
nbyãs
; i++) {

544 i‡(
i
 % 16 == 0) {

545 
p
 +
	`•rötf
’, "%08x: ", 
ßddr
 + 
i
);

547 
p
 +
	`•rötf
’, "%02x ", 
buf
[
i
]);

548 i‡(
i
 % 16 == 15) {

549 
uöt
 
j
;

550 
p
 +
	`•rötf
(p, " ");

551 
j
 = 
i
-15; j <= i; j++)

552 
p
 +
	`•rötf
(p, "%c",

553 ((
buf
[
j
] >= 0x20 && buf[j] <= 0x7f) ? buf[j] : '.'));

554 
	`¥ötf
("%s\n", 
löe
);

555 
p
 = 
löe
;

560 i‡(
p
 !
löe
)

561 
	`¥ötf
("%s\n", 
löe
);

562 
	}
}

565 #ifde‡
SDTEST


567 
	$dhd_pktgí
(*
dhd
, 
cmd_t
 *
cmd
, **
¨gv
)

569 
ªt
 = 0;

570 *
±r
 = 
NULL
;

571 
dhd_pktgí_t
 
pktgí
;

572 *
°r
;

574 
	`UNUSED_PARAMETER
(
dhd
);

575 
	`UNUSED_PARAMETER
(
cmd
);

578 i‡((
ªt
 = 
	`dhd_v¨_gëbuf
(
dhd
, "pktgí", 
NULL
, 0, &
±r
)) != 0)

579  
ªt
;

580 
	`mem˝y
(&
pktgí
, 
±r
, (pktgen));

582 i‡(
pktgí
.
vîsi⁄
 !
DHD_PKTGEN_VERSION
) {

583 
	`Ârötf
(
°dîr
, "pktgen version mismatch (module %dápp %d)\n",

584 
pktgí
.
vîsi⁄
, 
DHD_PKTGEN_VERSION
);

585  
COMMAND_ERROR
;

589 i‡(*++
¨gv
) {

590 
möi›t_t
 
›ts
;

591 
›t_îr
;

594 
	`möi›t_öô
(&
›ts
, "pktgí", "", 
FALSE
);

596 (
›t_îr
 = 
	`möi›t
(&
›ts
, 
¨gv
)) != -1) {

597 i‡(
›t_îr
 == 1) {

598 
	`Ârötf
(
°dîr
, "pktgen optionsÉrror\n");

599 
ªt
 = -1;

600 
exô
;

602 
¨gv
 +
›ts
.
c⁄sumed
;

604 i‡(!
›ts
.
good_öt
 && o±s.
›t
 != 'd') {

605 
	`Ârötf
(
°dîr
, "övÆid i¡egî %s\n", 
›ts
.
vÆ°r
);

606 
ªt
 = -1;

607 
exô
;

610 
›ts
.
›t
) {

612 
pktgí
.
‰eq
 = 
›ts
.
uvÆ
;

615 
pktgí
.
cou¡
 = 
›ts
.
uvÆ
;

618 
pktgí
.
¥öt
 = 
›ts
.
uvÆ
;

621 
pktgí
.
tŸÆ
 = 
›ts
.
uvÆ
;

624 
pktgí
.
°›
 = 
›ts
.
uvÆ
;

627 
pktgí
.
möÀn
 = 
›ts
.
uvÆ
;

630 
pktgí
.
maxÀn
 = 
›ts
.
uvÆ
;

633 
pktgí
.
möÀn
 =Öktgí.
maxÀn
 = 
›ts
.
uvÆ
;

636 i‡(!
	`°rcmp
(
›ts
.
vÆ°r
, "send"))

637 
pktgí
.
mode
 = 
DHD_PKTGEN_SEND
;

638 i‡(!
	`°rcmp
(
›ts
.
vÆ°r
, "echo"))

639 
pktgí
.
mode
 = 
DHD_PKTGEN_ECHO
;

640 i‡(!
	`°rcmp
(
›ts
.
vÆ°r
, "burst"))

641 
pktgí
.
mode
 = 
DHD_PKTGEN_RXBURST
;

642 i‡(!
	`°rcmp
(
›ts
.
vÆ°r
, "recv"))

643 
pktgí
.
mode
 = 
DHD_PKTGEN_RECV
;

645 
	`Ârötf
(
°dîr
, "unrecognized dir mode %s\n",

646 
›ts
.
vÆ°r
);

647  
USAGE_ERROR
;

652 
	`Ârötf
(
°dîr
, "optionÖarsingÉrror (key %s valstr %s)\n",

653 
›ts
.
key
, o±s.
vÆ°r
);

654 
ªt
 = 
USAGE_ERROR
;

655 
exô
;

659 i‡(
pktgí
.
maxÀn
 <Öktgí.
möÀn
) {

660 
	`Ârötf
(
°dîr
, "mö/maxÉº‹ (%d/%d)\n", 
pktgí
.
möÀn
,Öktgí.
maxÀn
);

661 
ªt
 = -1;

662 
exô
;

666 
ªt
 = 
	`dhd_v¨_£tbuf
(
dhd
, "pktgí", &
pktgí
, (pktgen));

668 
	`¥ötf
("Counts: %d sendáttempts, %dÑeceived, %dÅx failures\n",

669 
pktgí
.
num£¡
,Öktgí.
numrcvd
,Öktgí.
numÁû
);

673 
pktgí
.
mode
) {

674 
DHD_PKTGEN_ECHO
: 
°r
 = "echo"; ;

675 
DHD_PKTGEN_SEND
: 
°r
 = "send"; ;

676 
DHD_PKTGEN_RECV
: 
°r
 = "recv"; ;

677 
DHD_PKTGEN_RXBURST
: 
°r
 = "burst"; ;

678 : 
°r
 = "UNKNOWN"; ;

681 
	`¥ötf
("Config: mode %s %dÖkts (len %d-%d)Éach %dÅicks\n",

682 
°r
, 
pktgí
.
cou¡
,Öktgí.
möÀn
,Öktgí.
maxÀn
,Öktgí.
‰eq
);

685 
°r
 = " ";

686 i‡(
pktgí
.
tŸÆ
) {

687 
	`¥ötf
("%¶imô %d", 
°r
, 
pktgí
.
tŸÆ
);

688 
°r
 = ", ";

690 i‡(
pktgí
.
¥öt
) {

691 
	`¥ötf
("%•röàevîy %dÅicks", 
°r
, (
pktgí
.
‰eq
 *Öktgí.
¥öt
));

692 
°r
 = ", ";

694 i‡(
pktgí
.
°›
) {

695 
	`¥ötf
("%s°›á·î %dÅx faûuªs", 
°r
, 
pktgí
.
°›
);

696 
°r
 = ", ";

698 i‡(
°r
[0] == ',')

699 
	`¥ötf
("\n");

701 
exô
:

702  
ªt
;

703 
	}
}

706 
dbg_msg_t
 
	gdhd_sd_msgs
[] = {

707 {
SDH_ERROR_VAL
, "error"},

708 {
SDH_TRACE_VAL
, "trace"},

709 {
SDH_INFO_VAL
, "info"},

710 {
SDH_DATA_VAL
, "data"},

711 {
SDH_CTRL_VAL
, "control"},

712 {
SDH_LOG_VAL
, "log"},

713 {
SDH_DMA_VAL
, "dma"},

714 {0, 
NULL
}

718 
	$dhd_sd_msgÀvñ
(*
dhd
, 
cmd_t
 *
cmd
, **
¨gv
)

720  
	`dhd_do_msgÀvñ
(
dhd
, 
cmd
, 
¨gv
, 
dhd_sd_msgs
);

721 
	}
}

724 
	$dhd_sd_blocksize
(*
dhd
, 
cmd_t
 *
cmd
, **
¨gv
)

726 
ªt
;

727 
¨gc
;

728 *
íd±r
 = 
NULL
;

729 *
±r
 = 
NULL
;

730 
func
, 
size
;

733 
¨gc
 = 0; 
¨gv
[argc];árgc++);

734 
¨gc
--;

736 i‡(
¨gc
 < 1 ||árgc > 2) {

737 
	`¥ötf
("requiredárgs: function [size] (size 0 means max)\n");

738  
USAGE_ERROR
;

741 
func
 = 
	`°πﬁ
(
¨gv
[1], &
íd±r
, 0);

742 i‡(*
íd±r
 != '\0') {

743 
	`¥ötf
("InvÆid fun˘i⁄: %s\n", 
¨gv
[1]);

744  
USAGE_ERROR
;

747 i‡(
¨gc
 > 1) {

748 
size
 = 
	`°πﬁ
(
¨gv
[2], &
íd±r
, 0);

749 i‡(*
íd±r
 != '\0') {

750 
	`¥ötf
("InvÆid size: %s\n", 
¨gv
[1]);

751  
USAGE_ERROR
;

755 i‡(
¨gc
 == 1) {

756 i‡((
ªt
 = 
	`dhd_v¨_gëbuf
(
dhd
, 
cmd
->
«me
, &
func
, (func), &
±r
)) >= 0)

757 
	`¥ötf
("Fun˘i⁄ %d block size: %d\n", 
func
, *(*)
±r
);

759 
	`¥ötf
("Sëtög fun˘i⁄ %d block sizêtÿ%d\n", 
func
, 
size
);

760 
size
 &0x0000ffff; sizê|(
func
 << 16);

761 
ªt
 = 
	`dhd_v¨_£tbuf
(
dhd
, 
cmd
->
«me
, &
size
, (size));

764  (
ªt
);

765 
	}
}

768 
	$dhd_sd_mode
(*
wl
, 
cmd_t
 *
cmd
, **
¨gv
)

770 
ªt
;

771 
¨gc
;

772 
sdmode
;

775 
¨gc
 = 0; 
¨gv
[argc];árgc++);

776 
¨gc
--;

778 i‡(
¨gv
[1]) {

779 i‡(!
	`°rcmp
(
¨gv
[1], "spi")) {

780 
	`°r˝y
(
¨gv
[1], "0");

781 } i‡(!
	`°rcmp
(
¨gv
[1], "sd1")) {

782 
	`°r˝y
(
¨gv
[1], "1");

783 } i‡(!
	`°rcmp
(
¨gv
[1], "sd4")) {

784 
	`°r˝y
(
¨gv
[1], "2");

786  
USAGE_ERROR
;

789 
ªt
 = 
	`dhd_v¨_£töt
(
wl
, 
cmd
, 
¨gv
);

792 i‡((
ªt
 = 
	`dhd_v¨_gë
(
wl
, 
cmd
, 
¨gv
))) {

793  (
ªt
);

795 
sdmode
 = *(
öt32
*)
buf
;

797 
	`¥ötf
("SD Mode is: %s\n",

798 
sdmode
 == 0 ? "SPI"

799 : 
sdmode
 == 1 ? "SD1"

800 : 
sdmode
 == 2 ? "SD4" : "Unknown");

804  (
ªt
);

805 
	}
}

808 
	$dhd_dma_mode
(*
wl
, 
cmd_t
 *
cmd
, **
¨gv
)

810 
ªt
;

811 
¨gc
;

812 
dmamode
;

815 
¨gc
 = 0; 
¨gv
[argc];árgc++);

816 
¨gc
--;

818 i‡(
¨gv
[1]) {

819 i‡(!
	`°ricmp
(
¨gv
[1], "pio")) {

820 
	`°r˝y
(
¨gv
[1], "0");

821 } i‡(!
	`°rcmp
(
¨gv
[1], "0")) {

822 } i‡(!
	`°ricmp
(
¨gv
[1], "dma")) {

823 
	`°r˝y
(
¨gv
[1], "1");

824 } i‡(!
	`°ricmp
(
¨gv
[1], "sdma")) {

825 
	`°r˝y
(
¨gv
[1], "1");

826 } i‡(!
	`°rcmp
(
¨gv
[1], "1")) {

827 } i‡(!
	`°ricmp
(
¨gv
[1], "adma1")) {

828 
	`°r˝y
(
¨gv
[1], "2");

829 } i‡(!
	`°ricmp
(
¨gv
[1], "adma")) {

830 
	`°r˝y
(
¨gv
[1], "3");

831 } i‡(!
	`°ricmp
(
¨gv
[1], "adma2")) {

832 
	`°r˝y
(
¨gv
[1], "3");

834  
USAGE_ERROR
;

837 
ªt
 = 
	`dhd_v¨_£töt
(
wl
, 
cmd
, 
¨gv
);

840 i‡((
ªt
 = 
	`dhd_v¨_gë
(
wl
, 
cmd
, 
¨gv
))) {

841  (
ªt
);

843 
dmamode
 = *(
öt32
*)
buf
;

845 
	`¥ötf
("DMA Mode is: %s\n",

846 
dmamode
 == 0 ? "PIO"

847 : 
dmamode
 == 1 ? "SDMA"

848 : 
dmamode
 == 2 ? "ADMA1"

849 : 
dmamode
 == 3 ? "ADMA2"

854  (
ªt
);

855 
	}
}

859 
	$dhd_sdªg
(*
dhd
, 
cmd_t
 *
cmd
, **
¨gv
)

861 
ªt
;

862 
sdªg_t
 
sdªg
;

863 
uöt
 
¨gc
;

864 *
±r
 = 
NULL
;

866 
	`UNUSED_PARAMETER
(
cmd
);

868 
	`bzîo
(&
sdªg
, (sdreg));

871 
¨gc
 = 0; 
¨gv
[argc];árgc++);

872 
¨gc
--;

875 i‡(
¨gc
 < 1) {

876 
	`¥ötf
("requiredárgs: offset[/size] [value]\n");

877  
USAGE_ERROR
;

880 
sdªg
.
off£t
 = 
	`°πoul
(
¨gv
[1], &
±r
, 0);

881 i‡(*
±r
 && *ptr != '/') {

882 
	`¥ötf
("Badárg: %s\n", 
¨gv
[1]);

883  
USAGE_ERROR
;

887 i‡(*
±r
 == '/') {

888 
sdªg
.
func
 = 
	`°πﬁ
((
±r
+1), &ptr, 0);

889 i‡(*
±r
 || ((
sdªg
.
func
 != 2) && sdreg.func != 4)) {

890 
	`¥ötf
("Bad size option?\n");

891  
USAGE_ERROR
;

895 
sdªg
.
func
 = 4;

896 
	`¥ötf
("DefaultingÅoÑegister size 4\n");

899 i‡(
¨gc
 > 1) {

900 
sdªg
.
vÆue
 = 
	`°πoul
(
¨gv
[2], &
±r
, 0);

901 i‡(*
±r
) {

902 
	`¥ötf
("Bad vÆue: %s\n", 
¨gv
[2]);

903  
USAGE_ERROR
;

907 i‡(
¨gc
 <= 1) {

908 
ªt
 = 
	`dhd_v¨_gëbuf
(
dhd
, 
¨gv
[0], &
sdªg
, (sdªg), (**)&
±r
);

909 i‡(
ªt
 >= 0)

910 
	`¥ötf
("0x%0*x\n", (2 * 
sdªg
.
func
), *(*)
±r
);

912 
ªt
 = 
	`dhd_v¨_£tbuf
(
dhd
, 
¨gv
[0], &
sdªg
, (sdreg));

915  (
ªt
);

916 
	}
}

919 
	$dhd_membyãs
(*
dhd
, 
cmd_t
 *
cmd
, **
¨gv
)

921 
ªt
 = -1;

922 
uöt
 
¨gc
;

923 *
±r
;

924 
∑øms
[2];

925 
uöt
 
addr
;

926 
uöt
 
Àn
;

927 
Æign
;

929 
øwout
, 
hexö
;

931 
möi›t_t
 
›ts
;

932 
›t_îr
;

935 
	`möi›t_öô
(&
›ts
, "membyãs", "rh", 
FALSE
);

937 
øwout
 = 
hexö
 = 0;

939 
¨gv
++;

940 (
›t_îr
 = 
	`möi›t
(&
›ts
, 
¨gv
)) != -1) {

941 i‡(
›t_îr
 == 1) {

942 
	`Ârötf
(
°dîr
, "membytes optionsÉrror\n");

943 
ªt
 = -1;

944 
exô
;

947 i‡(
›ts
.
posôi⁄Æ
)

950 
¨gv
 +
›ts
.
c⁄sumed
;

952 i‡(
›ts
.
›t
 == 'h') {

953 
hexö
 = 1;

954 } i‡(
›ts
.
›t
 == 'r') {

955 
øwout
 = 1;

957 
	`Ârötf
(
°dîr
, "membytes commandÉrror\n");

958 
ªt
 = -1;

959 
exô
;

964 
¨gc
 = 0; 
¨gv
[argc];árgc++);

967 i‡(
¨gc
 < 2) {

968 
	`Ârötf
(
°dîr
, "requiredárgs:áddress size [<bytes>]\n");

969  
USAGE_ERROR
;

971 i‡(
¨gc
 < 3 && 
hexö
) {

972 
	`Ârötf
(
°dîr
, "missing <bytes>árg implies by -h\n");

973  
USAGE_ERROR
;

975 i‡((
¨gc
 > 2Ë&& (
øwout
)) {

976 
	`Ârötf
(
°dîr
, "can't have input <bytes>árg with -r or -i\n");

977  
USAGE_ERROR
;

981 
addr
 = 
	`°πoul
(
¨gv
[0], &
±r
, 0);

982 i‡(*
±r
) {

983 
	`Ârötf
(
°dîr
, "Badárg: %s\n", 
¨gv
[0]);

984  
USAGE_ERROR
;

988 
Àn
 = 
	`°πoul
(
¨gv
[1], &
±r
, 0);

989 i‡(*
±r
) {

990 
	`Ârötf
(
°dîr
, "Bad vÆue: %s\n", 
¨gv
[1]);

991  
USAGE_ERROR
;

994 
Æign
 = 
addr
 & 0x03;

995 i‡(
Æign
 && 
¨gc
 > 2) {

996 
	`Ârötf
(
°dîr
, "Can only write startingátÜong-alignedáddresses.\n");

997  
USAGE_ERROR
;

1001 i‡(
¨gc
 == 2) {

1002 
uöt
 
chunk
 = 
DHD_IOCTL_MAXLEN
;

1003 
addr
 -
Æign
, 
Àn
 +Æign;Üí;ádd∏+
chunk
,Üen -= chunk,álign = 0) {

1004 
chunk
 = 
	`MIN
(chunk, 
Àn
);

1005 
∑øms
[0] = 
addr
;Ö¨ams[1] = 
	`ROUNDUP
(
chunk
, 4);

1006 
ªt
 = 
	`dhd_v¨_gëbuf
(
dhd
, "membytes",

1007 
∑øms
, (2 * ()), (**)&
±r
);

1008 i‡(
ªt
 < 0)

1009 
exô
;

1011 i‡(
øwout
) {

1012 
	`fwrôe
(
±r
 + 
Æign
, (), 
chunk
 -álign, 
°dout
);

1014 
	`dhd_hexdump
((
uch¨
*)
±r
 + 
Æign
, 
chunk
 -álign, 
addr
 +álign);

1018 
uöt
 
∑éí
 = 
	`°æí
(
¨gv
[2]);

1019 
uöt
 
chunk
, 
maxchunk
;

1020 *
•å
;

1022 i‡(
hexö
) {

1023 *
ö±r
, *
ouçå
;

1024 i‡(
∑éí
 & 1) {

1025 
	`Ârötf
(
°dîr
, "Hex (-h) must consist of whole bytes\n");

1026 
ªt
 = 
USAGE_ERROR
;

1027 
exô
;

1030 
ö±r
 = 
ouçå
 = 
¨gv
[2]; 
∑éí
;Öatlen -= 2) {

1031 
n1
, 
n2
;

1033 
n1
 = ()(()*
ö±r
++);

1034 
n2
 = ()(()*
ö±r
++);

1035 i‡(!
	`isxdigô
(
n1
Ë|| !isxdigô(
n2
)) {

1036 
	`Ârötf
(
°dîr
, "invalid hex digit %c\n",

1037 (
	`isxdigô
(
n1
Ë? 
n2
 :Ç1));

1038 
ªt
 = 
USAGE_ERROR
;

1039 
exô
;

1041 
n1
 = 
	`isdigô
(n1) ? (n1 - '0')

1042 : ((
	`i¶owî
(
n1
Ë? (
	`touµî
(n1)) :Ç1) - 'A' + 10);

1043 
n2
 = 
	`isdigô
(n2) ? (n2 - '0')

1044 : ((
	`i¶owî
(
n2
Ë? (
	`touµî
(n2)) :Ç2) - 'A' + 10);

1045 *
ouçå
++ = (
n1
 * 16Ë+ 
n2
;

1048 
∑éí
 = 
ouçå
 - 
¨gv
[2];

1051 
•å
 = 
¨gv
[2];

1052 
maxchunk
 = 
DHD_IOCTL_MAXLEN
 - (
	`°æí
(
cmd
->
«me
) + 1 + (2 * ()));

1054 
Àn
) {

1055 
chunk
 = (
Àn
 > 
maxchunk
) ? (maxchunk & ~0x3) :Üen;

1058 
	`mem£t
(
buf
, 0, 
DHD_IOCTL_MAXLEN
);

1059 
	`°r˝y
(
buf
, 
cmd
->
«me
);

1060 
±r
 = 
buf
 + 
	`°æí
(buf) + 1;

1061 
∑øms
[0] = 
addr
;Ö¨ams[1] = 
chunk
;

1062 
	`mem˝y
(
±r
, 
∑øms
, (2 * ()));

1063 
±r
 += (2 * ());

1064 
addr
 +
chunk
; 
Àn
 -= chunk;

1066 
chunk
--) {

1067 *
±r
++ = *
•å
++;

1068 i‡(
•å
 >(
¨gv
[2] + 
∑éí
))

1069 
•å
 = 
¨gv
[2];

1072 
ªt
 = 
	`dhd_£t
(
dhd
, 
DHD_SET_VAR
, &
buf
[0], (
±r
 - buf));

1073 i‡(
ªt
 < 0)

1074 
exô
;

1078 
exô
:

1079  
ªt
;

1080 
	}
}

1083 
	$dhd_idÀtime
(*
dhd
, 
cmd_t
 *
cmd
, **
¨gv
)

1085 
öt32
 
idÀtime
;

1086 *
íd±r
 = 
NULL
;

1087 
îr
 = 0;

1089 i‡(
¨gv
[1]) {

1090 i‡(!
	`°rcmp
(
¨gv
[1], "never")) {

1091 
idÀtime
 = 0;

1092 } i‡(!
	`°rcmp
(
¨gv
[1], "immediate") || !strcmp(argv[1], "immed")) {

1093 
idÀtime
 = 
DHD_IDLE_IMMEDIATE
;

1095 
idÀtime
 = 
	`°πﬁ
(
¨gv
[1], &
íd±r
, 0);

1096 i‡(*
íd±r
 != '\0') {

1097 
	`Ârötf
(
°dîr
, "övÆidÇumbî %s\n", 
¨gv
[1]);

1098 
îr
 = -1;

1101 i‡((
idÀtime
 < 0Ë&& (idÀtimê!
DHD_IDLE_IMMEDIATE
)) {

1102 
	`Ârötf
(
°dîr
, "övÆid vÆuê%s\n", 
¨gv
[1]);

1103 
îr
 = -1;

1106 i‡(!
îr
) {

1107 
	`°r˝y
(
buf
, "idletime");

1108 
íd±r
 = 
buf
 + 
	`°æí
(buf) + 1;

1109 
	`mem˝y
(
íd±r
, &
idÀtime
, (
uöt32
));

1110 
íd±r
 +(
uöt32
);

1111 
îr
 = 
	`dhd_£t
(
dhd
, 
DHD_SET_VAR
, &
buf
[0], (
íd±r
 - buf));

1114 i‡((
îr
 = 
	`dhd_v¨_gë
(
dhd
, 
cmd
, 
¨gv
))) {

1115  
îr
;

1117 
idÀtime
 = *(
öt32
*)
buf
;

1119 i‡(
idÀtime
 == 0) {

1120 
	`¥ötf
("0 (never)\n");

1121 } i‡(
idÀtime
 =
DHD_IDLE_IMMEDIATE
) {

1122 
	`¥ötf
("-1 (immediate)\n");

1123 } i‡(
idÀtime
 > 0) {

1124 
	`¥ötf
("%d\n", 
idÀtime
);

1125 } 
	`¥ötf
("%d (övÆid)\n", 
idÀtime
);

1128  
îr
;

1129 
	}
}

1132 
	$dhd_idÀ˛ock
(*
dhd
, 
cmd_t
 *
cmd
, **
¨gv
)

1134 
öt32
 
idÀ˛ock
;

1135 *
íd±r
 = 
NULL
;

1136 
îr
 = 0;

1138 i‡(
¨gv
[1]) {

1139 i‡(!
	`°rcmp
(
¨gv
[1], "active")) {

1140 
idÀ˛ock
 = 
DHD_IDLE_ACTIVE
;

1141 } i‡(!
	`°rcmp
(
¨gv
[1], "stopped")) {

1142 
idÀ˛ock
 = 
DHD_IDLE_STOP
;

1144 
idÀ˛ock
 = 
	`°πﬁ
(
¨gv
[1], &
íd±r
, 0);

1145 i‡(*
íd±r
 != '\0') {

1146 
	`Ârötf
(
°dîr
, "övÆidÇumbî %s\n", 
¨gv
[1]);

1147 
îr
 = 
USAGE_ERROR
;

1151 i‡(!
îr
) {

1152 
	`°r˝y
(
buf
, "idleclock");

1153 
íd±r
 = 
buf
 + 
	`°æí
(buf) + 1;

1154 
	`mem˝y
(
íd±r
, &
idÀ˛ock
, (
öt32
));

1155 
íd±r
 +(
öt32
);

1156 
îr
 = 
	`dhd_£t
(
dhd
, 
DHD_SET_VAR
, &
buf
[0], (
íd±r
 - buf));

1159 i‡((
îr
 = 
	`dhd_v¨_gë
(
dhd
, 
cmd
, 
¨gv
))) {

1160  
îr
;

1162 
idÀ˛ock
 = *(
öt32
*)
buf
;

1164 i‡(
idÀ˛ock
 =
DHD_IDLE_ACTIVE
)

1165 
	`¥ötf
("IdÀ˛ock %d (a˘ive)\n", 
idÀ˛ock
);

1166 i‡(
idÀ˛ock
 =
DHD_IDLE_STOP
)

1167 
	`¥ötf
("IdÀ˛ock %d (°›≥d)\n", 
idÀ˛ock
);

1169 
	`¥ötf
("IdÀ˛ock divis‹ %d\n", 
idÀ˛ock
);

1172  
îr
;

1173 
	}
}

1176 
	#SPROM_WORDS
 256

	)

1179 
	$dhd_•rom
(*
dhd
, 
cmd_t
 *
cmd
, **
¨gv
)

1181 #i‡!
	`deföed
(
BWL_FILESYSTEM_SUPPORT
)

1184 
ªt
, 
i
;

1185 
uöt
 
¨gc
;

1186 *
íd±r
;

1187 *
buÂ
, *
cou¡±r
;

1188 
uöt16
 *
w‹d±r
;

1189 
uöt
 
off£t
, 
w‹ds
, 
byãs
;

1190 
boﬁ
 
no¸c
 = 
FALSE
;

1192 *
‚ame
;

1193 
FILE
 *
Â
;

1195 
	`UNUSED_PARAMETER
(
cmd
);

1198 
¨gc
 = 0; 
¨gv
[argc];árgc++);

1199 
¨gc
--;

1202 
buÂ
 = 
buf
;

1203 
	`mem£t
(
buÂ
, 0, 
DHD_IOCTL_MAXLEN
);

1204 
	`°r˝y
(
buÂ
, "sprom");

1205 
buÂ
 +
	`°æí
("sprom") + 1;

1207 i‡(
	`°rcmp
(
¨gv
[0], "srdump") == 0) {

1208 i‡(
¨gc
) {

1209 
	`Ârötf
(
°dîr
, "Command srdump doesn'tÅakeárgs\n");

1210  
USAGE_ERROR
;

1212 
off£t
 = 0;

1213 
w‹ds
 = 
SPROM_WORDS
;

1214 
byãs
 = 2 * 
w‹ds
;

1216 
	`mem˝y
(
buÂ
, &
off£t
, ());

1217 
buÂ
 += ();

1218 
	`mem˝y
(
buÂ
, &
byãs
, ());

1219 
buÂ
 += ();

1221 i‡(!
	`ISALIGNED
((
uöçå
)
buÂ
, (
uöt16
))) {

1222 
	`Ârötf
(
°dîr
, "InternalÉrror: unaligned word buffer\n");

1223  
COMMAND_ERROR
;

1226 i‡(
	`°rcmp
(
¨gv
[0], "srwrite") != 0) {

1227 
	`Ârötf
(
°dîr
, "Unim∂emíãd s¥om comm™d: %s\n", 
¨gv
[0]);

1228  
USAGE_ERROR
;

1231 i‡(
¨gc
 == 0) {

1232  
USAGE_ERROR
;

1233 } i‡((
¨gc
 == 1) ||

1234 ((
¨gc
 =2Ë&& ((
no¸c
 = !
	`°rcmp
(
¨gv
[1], "-c"))))) {

1236 
‚ame
 = 
no¸c
 ? 
¨gv
[2] :árgv[1];

1239 i‡((
ªt
 = 
	`fûe_size
(
‚ame
)) < 0)

1240  
COMMAND_ERROR
;

1242 
byãs
 = 
ªt
;

1243 
off£t
 = 0;

1244 
w‹ds
 = 
byãs
 / 2;

1246 i‡(
byãs
 !2 * 
SPROM_WORDS
) {

1247 
	`Ârötf
(
°dîr
, "Bad file size\n");

1248  
COMMAND_ERROR
;

1251 
	`mem˝y
(
buÂ
, &
off£t
, ());

1252 
buÂ
 += ();

1253 
	`mem˝y
(
buÂ
, &
byãs
, ());

1254 
buÂ
 += ();

1256 i‡(!
	`ISALIGNED
((
uöçå
)
buÂ
, (
uöt16
))) {

1257 
	`Ârötf
(
°dîr
, "InternalÉrror: unaligned word buffer\n");

1258  
COMMAND_ERROR
;

1261 i‡((
Â
 = 
	`f›í
(
‚ame
, "rb")Ë=
NULL
) {

1262 
	`Ârötf
(
°dîr
, "CouldÇot open %s: %s\n",

1263 
‚ame
, 
	`°ªº‹
(
î∫o
));

1264  
COMMAND_ERROR
;

1267 i‡(
	`‰ód
((
uöt16
*)
buÂ
, (uöt16), 
w‹ds
, 
Â
) != words) {

1268 
	`Ârötf
(
°dîr
, "CouldÇotÑead %d bytes from %s\n",

1269 
w‹ds
 * 2, 
‚ame
);

1270 
	`f˛o£
(
Â
);

1271  
COMMAND_ERROR
;

1274 
	`f˛o£
(
Â
);

1276 i‡(!
no¸c
 &&

1277 
	`hnd¸c8
((
uöt8
*)
buÂ
, 
byãs
, 
CRC8_INIT_VALUE
Ë!
CRC8_GOOD_VALUE
) {

1278 
	`Ârötf
(
°dîr
, "CRC check failed: 0x%02x, should be 0x%02x.\n",

1279 ((
uöt8
*)
buÂ
)[
byãs
-1],

1280 ~
	`hnd¸c8
((
uöt8
*)
buÂ
, 
byãs
 - 1, 
CRC8_INIT_VALUE
) & 0xff);

1281  
COMMAND_ERROR
;

1284 
	`…oh16_buf
(
buÂ
, 
byãs
);

1286 
off£t
 = 
	`°πoul
(*++
¨gv
, &
íd±r
, 0) * 2;

1287 i‡(*
íd±r
 != '\0') {

1288 
	`Ârötf
(
°dîr
, "off£à%†i†nŸá¿öãgî\n", *
¨gv
);

1289  
USAGE_ERROR
;

1292 
	`mem˝y
(
buÂ
, &
off£t
, ());

1293 
buÂ
 += ();

1294 
cou¡±r
 = 
buÂ
;

1295 
buÂ
 += ();

1297 i‡(!
	`ISALIGNED
((
uöçå
)
buÂ
, (
uöt16
))) {

1298 
	`Ârötf
(
°dîr
, "InternalÉrror: unaligned word buffer\n");

1299  
COMMAND_ERROR
;

1302 
w‹ds
 = 0, 
w‹d±r
 = (
uöt16
*)
buÂ
; *++
¨gv
; words++) {

1303 *
w‹d±r
++ = (
uöt16
)
	`°πoul
(*
¨gv
, &
íd±r
, 0);

1304 i‡(*
íd±r
 != '\0') {

1305 
	`Ârötf
(
°dîr
, "vÆuê%†i†nŸá¿öãgî\n", *
¨gv
);

1306  
USAGE_ERROR
;

1308 i‡(
w‹ds
 > 
SPROM_WORDS
) {

1309 
	`Ârötf
(
°dîr
, "max o‡%d w‹ds\n", 
SPROM_WORDS
);

1310  
USAGE_ERROR
;

1314 
byãs
 = 2 * 
w‹ds
;

1315 
	`mem˝y
(
cou¡±r
, &
byãs
, ());

1319 i‡(
¨gc
) {

1320 
ªt
 = 
	`dhd_£t
(
dhd
, 
DHD_SET_VAR
, 
buf
,

1321 (
	`°æí
("•rom"Ë+ 1Ë+ (2 * ()Ë+ 
byãs
);

1322  (
ªt
);

1324 
ªt
 = 
	`dhd_gë
(
dhd
, 
DHD_GET_VAR
, 
buf
,

1325 (
	`°æí
("•rom"Ë+ 1Ë+ (2 * ()Ë+ 
byãs
);

1326 i‡(
ªt
 < 0) {

1327  
ªt
;

1330 
i
 = 0; i < ()
w‹ds
; i++) {

1331 i‡((
i
 % 8) == 0)

1332 
	`¥ötf
("\¿ srom[%03d]: ", 
i
);

1333 
	`¥ötf
("0x%04x ", ((
uöt16
*)
buf
)[
i
]);

1335 
	`¥ötf
("\n");

1340 
	}
}

1355 #i‡
deföed
(
BWL_FILESYSTEM_SUPPORT
)

1357 
	$ªad_v¨s
(*
‚ame
, *
buf
, 
buf_maxÀn
)

1359 
FILE
 *
Â
;

1360 
buf_Àn
, 
¶í
;

1361 
löe
[256], *
s
, *
e
;

1362 
löe_no
 = 0;

1364 i‡((
Â
 = 
	`f›í
(
‚ame
, "rb")Ë=
NULL
) {

1365 
	`Ârötf
(
°dîr
, "Cannot open NVRAM file %s: %s\n",

1366 
‚ame
, 
	`°ªº‹
(
î∫o
));

1367 
	`exô
(1);

1370 
buf_Àn
 = 0;

1372 
	`fgës
(
löe
, ÷öe), 
Â
Ë!
NULL
) {

1373 
boﬁ
 
found_eq
 = 
FALSE
;

1376 
löe
[(line) - 1] = 0;

1379 
s
 = 
löe
; *s == ' ' || *s == '\t'; s++)

1383 
e
 = 
s
; *e != 0 && *e != '#' && *e != '\r' && *e != '\n';É++)

1384 i‡(*
e
 == '=')

1385 
found_eq
 = 
TRUE
;

1388 
e
 > 
s
 && (e[-1] == ' ' ||É[-1] == '\t'))

1389 
e
--;

1391 
¶í
 = 
e
 - 
s
;

1394 i‡(
¶í
 == 0)

1397 i‡(!
found_eq
) {

1398 
	`Ârötf
(
°dîr
, "InvÆidÜöê%d i¿NVRAM fûê%s\n", 
löe_no
, 
‚ame
);

1399 
	`f˛o£
(
Â
);

1403 i‡(
buf_Àn
 + 
¶í
 + 1 > 
buf_maxÀn
) {

1404 
	`Ârötf
(
°dîr
, "NVRAM fûê%†toÿl⁄g\n", 
‚ame
);

1405 
	`f˛o£
(
Â
);

1409 
	`mem˝y
(
buf
 + 
buf_Àn
, 
s
, 
¶í
);

1410 
buf_Àn
 +
¶í
;

1411 
buf
[
buf_Àn
++] = 0;

1414 
	`f˛o£
(
Â
);

1416  
buf_Àn
;

1417 
	}
}

1421 
	$dhd_v¨s
(*
dhd
, 
cmd_t
 *
cmd
, **
¨gv
)

1423 
ªt
;

1424 
uöt
 
¨gc
;

1425 *
buÂ
;

1427 
	`UNUSED_PARAMETER
(
cmd
);

1430 
¨gc
 = 0; 
¨gv
[argc];árgc++);

1431 
¨gc
--;

1433 
¨gc
) {

1436 i‡((
ªt
 = 
	`dhd_v¨_gëbuf
(
dhd
, "v¨s", 
NULL
, 0, (**)&
buÂ
)))

1438 *
buÂ
) {

1439 
	`¥ötf
("%s\n", 
buÂ
);

1440 
buÂ
 +
	`°æí
(bufp) + 1;

1445 #i‡
	`deföed
(
BWL_FILESYSTEM_SUPPORT
)

1448 *
v«me
;

1449 
uöt
 
nvøm_Àn
;

1451 
v«me
 = 
¨gv
[1];

1453 
buÂ
 = 
buf
;

1454 
	`°r˝y
(
buÂ
, "vars");

1455 
buÂ
 +
	`°æí
("vars") + 1;

1457 i‡((
ªt
 = 
	`ªad_v¨s
(
v«me
, 
buÂ
,

1458 
DHD_IOCTL_MAXLEN
 - (
	`°æí
("vars") + 3))) < 0) {

1459 
ªt
 = -1;

1463 
nvøm_Àn
 = 
ªt
;

1464 
buÂ
 +
nvøm_Àn
;

1465 *
buÂ
++ = 0;

1467 
ªt
 = 
	`dhd_£t
(
dhd
, 
DHD_SET_VAR
, 
buf
, 
buÂ
 - buf);

1473 
ªt
 = -1;

1477  
ªt
;

1478 
	}
}

1480 
	#MEMBLOCK
 2048

	)

1483 #i‡(
MEMBLOCK
 + 17 > 
DHD_IOCTL_MAXLEN
)

1484 #îr‹ 
MEMBLOCK
/
DHD_IOCTL_MAXLEN
 
sizög


1488 #i‡
deföed
(
BWL_FILESYSTEM_SUPPORT
)

1490 
	$dhd_lﬂd_fûe_byãs
(*
dhd
, 
cmd_t
 *
cmd
, 
FILE
 *
Â
, 
fsize
, 
°¨t
)

1492 
tŸ_Àn
 = 0;

1493 
uöt
 
ªad_Àn
;

1494 *
buÂ
;

1495 
uöt
 
Àn
;

1496 
uöt8
 
memblock
[
MEMBLOCK
];

1497 
ªt
;

1499 
	`UNUSED_PARAMETER
(
cmd
);

1501 
tŸ_Àn
 < 
fsize
) {

1502 
ªad_Àn
 = 
fsize
 - 
tŸ_Àn
;

1503 i‡(
ªad_Àn
 >
MEMBLOCK
)

1504 
ªad_Àn
 = 
MEMBLOCK
;

1505 
Àn
 = 
	`‰ód
(
memblock
, (
uöt8
), 
ªad_Àn
, 
Â
);

1506 i‡((
Àn
 < 
ªad_Àn
Ë&& !
	`„of
(
Â
)) {

1507 
	`Ârötf
(
°dîr
, "%s:Éº‹Ñódög fûe\n", 
__FUNCTION__
);

1512 
buÂ
 = 
buf
;

1513 
	`mem£t
(
buÂ
, 0, 
DHD_IOCTL_MAXLEN
);

1514 
	`°r˝y
(
buÂ
, "membytes");

1515 
buÂ
 +
	`°æí
("membytes") + 1;

1516 
	`mem˝y
(
buÂ
, &
°¨t
, ());

1517 
buÂ
 += ();

1518 
	`mem˝y
(
buÂ
, &
Àn
, ());

1519 
buÂ
 += ();

1520 
	`mem˝y
(
buÂ
, 
memblock
, 
Àn
);

1522 
ªt
 = 
	`dhd_£t
(
dhd
, 
DHD_SET_VAR
, &
buf
[0], (
buÂ
 - bu‡+ 
Àn
));

1524 i‡(
ªt
) {

1525 
	`Ârötf
(
°dîr
, "%s:Érror %d on writing %d membytesát 0x%08x\n",

1526 
__FUNCTION__
, 
ªt
, 
Àn
, 
°¨t
);

1529 
°¨t
 +
Àn
;

1530 
tŸ_Àn
 +
Àn
;

1533 
	}
}

1536 #ifde‡
PROP_TXSTATUS


1538 
	$dhd_¥›tx°©u£«bÀ
(*
dhd
, 
cmd_t
 *
cmd
, **
¨gv
)

1540 
Êag
 = 0xdead;

1542 i‡(
¨gv
[1]) {

1543 
Êag
 = 
	`©oi
(
¨gv
[1]);

1544 
	`dhd_iov¨_£töt
(
dhd
, 
cmd
->
«me
, 
Êag
);

1547 
	`dhd_iov¨_gëöt
(
dhd
, 
cmd
->
«me
, &
Êag
);

1548 
	`¥ötf
("¥›tx°©us: %d\n", 
Êag
);

1551 
	}
}

1554 
	$dhd_¥›tx°©usmode
(*
dhd
, 
cmd_t
 *
cmd
, **
¨gv
)

1556 
mode
 = 0xdead;

1558 i‡(
¨gv
[1]) {

1559 
mode
 = 
	`©oi
(
¨gv
[1]);

1560 
	`dhd_iov¨_£töt
(
dhd
, 
cmd
->
«me
, 
mode
);

1563 
	`dhd_iov¨_gëöt
(
dhd
, 
cmd
->
«me
, &
mode
);

1564 
	`¥ötf
("¥›tx°©usmode: %d\n", 
mode
);

1567 
	}
}

1571 
	$dhd_dow∆ﬂd
(*
dhd
, 
cmd_t
 *
cmd
, **
¨gv
)

1573 #i‡!
	`deföed
(
BWL_FILESYSTEM_SUPPORT
)

1576 
boﬁ
 
ª£t
 = 
TRUE
;

1577 
boﬁ
 
run
 = 
TRUE
;

1578 *
‚ame
 = 
NULL
;

1579 *
v«me
 = 
NULL
;

1580 
uöt32
 
°¨t
 = 0;

1581 
ªt
 = 0;

1582 
fsize
;

1583 
FILE
 *
Â
 = 
NULL
;

1584 
uöt32
 
memsize
;

1585 *
memsz¨gs
[] = { "memsize", 
NULL
 };

1586 *
buÂ
;

1587 
möi›t_t
 
›ts
;

1588 
›t_îr
;

1589 
uöt
 
nvøm_Àn
;

1590 
åx_hódî
 
åx_hdr
;

1591 
boﬁ
 
åx_fûe
 = 
FALSE
;

1592 
boﬁ
 
ovîœys
 = 
FALSE
;

1594 
	`UNUSED_PARAMETER
(
cmd
);

1597 
	`möi›t_öô
(&
›ts
, "dow∆ﬂd", "", 
TRUE
);

1599 
¨gv
++;

1600 (
›t_îr
 = 
	`möi›t
(&
›ts
, 
¨gv
)) != -1) {

1601 i‡(
›t_îr
 == 1) {

1602 
	`Ârötf
(
°dîr
, "download optionsÉrror\n");

1603 
ªt
 = -1;

1604 
exô
;

1606 
¨gv
 +
›ts
.
c⁄sumed
;

1608 i‡(
›ts
.
›t
 == 'a') {

1609 i‡(!
›ts
.
good_öt
) {

1610 
	`Ârötf
(
°dîr
, "övÆidáddªs†%s\n", 
›ts
.
vÆ°r
);

1611 
ªt
 = -1;

1612 
exô
;

1614 
°¨t
 = (
uöt32
)
›ts
.
uvÆ
;

1615 } i‡(
›ts
.
posôi⁄Æ
) {

1616 i‡(
‚ame
 && 
v«me
) {

1617 
	`Ârötf
(
°dîr
, "extraÖositionalárg, %s\n",

1618 
›ts
.
vÆ°r
);

1619 
ªt
 = -1;

1620 
exô
;

1622 i‡(
‚ame
)

1623 
v«me
 = 
›ts
.
vÆ°r
;

1625 
‚ame
 = 
›ts
.
vÆ°r
;

1626 } i‡(!
›ts
.
›t
) {

1627 i‡(!
	`°rcmp
(
›ts
.
key
, "noreset")) {

1628 
ª£t
 = 
FALSE
;

1629 } i‡(!
	`°rcmp
(
›ts
.
key
, "norun")) {

1630 
run
 = 
FALSE
;

1632 
	`Ârötf
(
°dîr
, "uƒecognized o±i⁄ %s\n", 
›ts
.
vÆ°r
);

1633 
ªt
 = -1;

1634 
exô
;

1637 
	`Ârötf
(
°dîr
, "uƒecognized o±i⁄ %c\n", 
›ts
.
›t
);

1638 
ªt
 = -1;

1639 
exô
;

1644 i‡(!
‚ame
) {

1645 
	`Ârötf
(
°dîr
, "filenameÑequired\n");

1646 
ªt
 = -1;

1647 
exô
;

1651 i‡((
fsize
 = 
	`fûe_size
(
‚ame
)) < 0) {

1652 
ªt
 = -1;

1653 
exô
;

1656 i‡((
Â
 = 
	`f›í
(
‚ame
, "rb")Ë=
NULL
) {

1657 
	`Ârötf
(
°dîr
, "%s: unableÅo open %s: %s\n",

1658 
__FUNCTION__
, 
‚ame
, 
	`°ªº‹
(
î∫o
));

1659 
ªt
 = -1;

1660 
exô
;

1664 
uöt32
 
tmp_Àn
;

1665 
uöt32
 
åx_hdr_Àn
 = (
åx_hódî
);

1666 
tmp_Àn
 = 
	`‰ód
(&
åx_hdr
, (
uöt8
), 
åx_hdr_Àn
, 
Â
);

1667 i‡(
tmp_Àn
 =
åx_hdr_Àn
) {

1668 i‡(
åx_hdr
.
magic
 =
TRX_MAGIC
) {

1669 
åx_fûe
 = 
TRUE
;

1670 i‡(
åx_hdr
.
Êag_vîsi⁄
 & 
TRX_OVERLAYS
) {

1671 
	`Ârötf
(
°dîr
, "Image contains overlays but overlays "

1673 
ªt
 = 
BCME_UNSUPPORTED
;

1674 
exô
;

1679 
	`f£ek
(
Â
, 0, 
SEEK_SET
);

1682 
	`f£ek
(
Â
, 0, 
SEEK_SET
);

1685 i‡((
ªt
 = 
	`dhd_v¨_gë
(
dhd
, 
NULL
, 
memsz¨gs
))) {

1686 
	`Ârötf
(
°dîr
, "%s:Éº‹ obèöög memsize\n", 
__FUNCTION__
);

1687 
exô
;

1690 
memsize
 = *(
uöt32
*)
buf
;

1692 #ifde‡
PART_OF_RAM_AS_ROMSIM


1694 i‡(
memsize
 && ((
uöt32
)
fsize
 > memsize)) {

1695 
	`Ârötf
(
°dîr
, "%s: file %sÅooÜarge (%d > %d)\n",

1696 
__FUNCTION__
, 
‚ame
, 
fsize
, 
memsize
);

1697 
ªt
 = -1;

1698 
exô
;

1703 i‡(
ª£t
) {

1704 i‡((
ªt
 = 
	`dhd_iov¨_£töt
(
dhd
, "dow∆ﬂd", 
TRUE
))) {

1705 
	`Ârötf
(
°dîr
, "%s: failedÅoÖut dongle in download mode\n",

1706 
__FUNCTION__
);

1707 
exô
;

1711 i‡(
åx_fûe
)

1712 
fsize
 = 
åx_hdr
.
off£ts
[0];

1715 i‡(
	`dhd_lﬂd_fûe_byãs
(
dhd
, 
cmd
, 
Â
, 
fsize
, 
°¨t
)) {

1716 
	`Ârötf
(
°dîr
, "%s:ÉrrorÜoadingÅheÑamimageátáddr 0x%x\n",

1717 
__FUNCTION__
, 
°¨t
);

1718 
ªt
 = -1;

1719 
exô
;

1722 i‡(
åx_fûe
) {

1723 i‡(
ovîœys
) {

1728 
	`f˛o£
(
Â
);

1729 
Â
 = 
NULL
;

1732 i‡(
v«me
) {

1733 
buÂ
 = 
buf
;

1734 
	`°r˝y
(
buÂ
, "vars");

1735 
buÂ
 +
	`°æí
("vars") + 1;

1737 i‡((
ªt
 = 
	`ªad_v¨s
(
v«me
, 
buÂ
,

1738 
DHD_IOCTL_MAXLEN
 - (
	`°æí
("vars") + 3))) < 0) {

1739 
ªt
 = -1;

1740 
exô
;

1743 
nvøm_Àn
 = 
ªt
;

1744 
buÂ
 +
nvøm_Àn
;

1745 *
buÂ
++ = 0;

1747 
ªt
 = 
	`dhd_£t
(
dhd
, 
DHD_SET_VAR
, 
buf
, (
buÂ
 - buf));

1748 i‡(
ªt
) {

1749 
	`Ârötf
(
°dîr
, "%s:Érror %d on delivering vars\n",

1750 
__FUNCTION__
, 
ªt
);

1751 
exô
;

1756 i‡(
run
) {

1757 i‡((
ªt
 = 
	`dhd_iov¨_£töt
(
dhd
, "dow∆ﬂd", 
FALSE
))) {

1758 
	`Ârötf
(
°dîr
, "%s: failedÅoÅake dongle out of download mode\n",

1759 
__FUNCTION__
);

1760 
exô
;

1764 
exô
:

1765 i‡(
Â
)

1766 
	`f˛o£
(
Â
);

1769  
ªt
;

1771 
	}
}

1774 
	$dhd_dldn
(*
dhd
, 
cmd_t
 *
cmd
, **
¨gv
)

1776 #i‡!
	`deföed
(
BWL_FILESYSTEM_SUPPORT
)

1779 *
‚ame
 = 
NULL
;

1780 
uöt32
 
°¨t
 = 0;

1781 
ªt
 = 0;

1782 
fsize
;

1783 
fd
 = 0;

1785 
FILE
 *
Â
 = 
NULL
;

1786 
uöt32
 
memsize
;

1788 
uöt
 
Àn
;

1789 
uöt8
 
memblock
[
MEMBLOCK
];

1791 
möi›t_t
 
›ts
;

1792 
›t_îr
;

1794 
	`UNUSED_PARAMETER
(
cmd
);

1797 
	`möi›t_öô
(&
›ts
, "dow∆ﬂd", "", 
TRUE
);

1798 
¨gv
++;

1800 (
›t_îr
 = 
	`möi›t
(&
›ts
, 
¨gv
)) != -1) {

1801 i‡(
›t_îr
 == 1) {

1802 
	`Ârötf
(
°dîr
, "download optionsÉrror\n");

1803 
ªt
 = -1;

1804 
exô
;

1806 
¨gv
 +
›ts
.
c⁄sumed
;

1808 i‡(
›ts
.
posôi⁄Æ
) {

1809 i‡(
‚ame
) {

1810 
	`Ârötf
(
°dîr
, "extraÖositionalárg, %s\n",

1811 
›ts
.
vÆ°r
);

1812 
ªt
 = -1;

1813 
exô
;

1815 i‡(!
‚ame
)

1816 
‚ame
 = 
›ts
.
vÆ°r
;

1818 
	`Ârötf
(
°dîr
, "uƒecognized o±i⁄ %c\n", 
›ts
.
›t
);

1819 
ªt
 = -1;

1820 
exô
;

1824 
fd
 = 
	`dhd_£t
(
dhd
, 
DHD_DLDN_ST
, 
NULL
, 0);

1825 i‡(
fd
 < 0) {

1826 
ªt
 = -1;

1827 
exô
;

1831 i‡(!
‚ame
) {

1832 
	`Ârötf
(
°dîr
, "filenameÑequired\n");

1833 
ªt
 = -1;

1834 
exô
;

1838 i‡((
fsize
 = 
	`fûe_size
(
‚ame
)) < 0) {

1839 
ªt
 = -1;

1840 
exô
;

1843 
memsize
 = 393216;

1845 i‡(
memsize
 && ((
uöt32
)
fsize
 > memsize)) {

1846 
	`Ârötf
(
°dîr
, "%s: file %sÅooÜarge (%d > %d)\n",

1847 
__FUNCTION__
, 
‚ame
, 
fsize
, 
memsize
);

1848 
ªt
 = -1;

1849 
exô
;

1853 i‡((
Â
 = 
	`f›í
(
‚ame
, "rb")Ë=
NULL
) {

1854 
	`Ârötf
(
°dîr
, "%s: unableÅo open %s: %s\n",

1855 
__FUNCTION__
, 
‚ame
, 
	`°ªº‹
(
î∫o
));

1856 
ªt
 = -1;

1857 
exô
;

1860 (
Àn
 = 
	`‰ód
(
memblock
, (
uöt8
), 
MEMBLOCK
, 
Â
))) {

1861 i‡(
Àn
 < 
MEMBLOCK
 && !
	`„of
(
Â
)) {

1862 
	`Ârötf
(
°dîr
, "%s:Éº‹Ñódög fûê%s\n", 
__FUNCTION__
, 
‚ame
);

1863 
ªt
 = -1;

1864 
exô
;

1867 
ªt
 = 
	`dhd_£t
(
dhd
, 
DHD_DLDN_WRITE
, 
memblock
, 
Àn
);

1868 i‡(
ªt
) {

1869 
	`Ârötf
(
°dîr
, "%s:Érror %d on writing %d membytesát 0x%08x\n",

1870 
__FUNCTION__
, 
ªt
, 
Àn
, 
°¨t
);

1871 
exô
;

1874 
°¨t
 +
Àn
;

1877 i‡(!
	`„of
(
Â
)) {

1878 
	`Ârötf
(
°dîr
, "%s:Éº‹Ñódög fûê%s\n", 
__FUNCTION__
, 
‚ame
);

1879 
ªt
 = -1;

1880 
exô
;

1882 
	`f˛o£
(
Â
);

1883 
Â
 = 
NULL
;

1885 
exô
:

1886 i‡(
Â
)

1887 
	`f˛o£
(
Â
);

1889 i‡(
fd
)

1890 
	`dhd_£t
(
dhd
, 
DHD_DLDN_END
, 
NULL
, 0);

1892  
ªt
;

1894 
	}
}

1897 
	$dhd_u∂ﬂd
(*
dhd
, 
cmd_t
 *
cmd
, **
¨gv
)

1899 #i‡!
	`deföed
(
BWL_FILESYSTEM_SUPPORT
)

1902 *
‚ame
 = 
NULL
;

1903 
uöt32
 
°¨t
 = 0;

1904 
uöt32
 
size
 = 0;

1905 
ªt
 = 0;

1907 
FILE
 *
Â
;

1908 
uöt32
 
memsize
;

1909 *
memsz¨gs
[] = { "memsize", 
NULL
 };

1911 
uöt
 
Àn
;

1913 
möi›t_t
 
›ts
;

1914 
›t_îr
;

1916 
	`UNUSED_PARAMETER
(
cmd
);

1917 
	`UNUSED_PARAMETER
(
¨gv
);

1920 
	`möi›t_öô
(&
›ts
, "u∂ﬂd", "", 
TRUE
);

1922 
¨gv
++;

1923 (
›t_îr
 = 
	`möi›t
(&
›ts
, 
¨gv
)) != -1) {

1924 i‡(
›t_îr
 == 1) {

1925 
	`Ârötf
(
°dîr
, "upload optionsÉrror\n");

1926 
ªt
 = -1;

1927 
exô
;

1929 
¨gv
 +
›ts
.
c⁄sumed
;

1931 i‡(
›ts
.
›t
 == 'a') {

1932 i‡(!
›ts
.
good_öt
) {

1933 
	`Ârötf
(
°dîr
, "övÆidáddªs†%s\n", 
›ts
.
vÆ°r
);

1934 
ªt
 = -1;

1935 
exô
;

1937 
°¨t
 = (
uöt32
)
›ts
.
uvÆ
;

1938 } i‡(
›ts
.
posôi⁄Æ
) {

1939 i‡(!
‚ame
) {

1940 
‚ame
 = 
›ts
.
vÆ°r
;

1941 } i‡(
›ts
.
good_öt
) {

1942 
size
 = (
uöt32
)
›ts
.
uvÆ
;

1944 
	`Ârötf
(
°dîr
, "upload optionsÉrror\n");

1945 
ªt
 = -1;

1946 
exô
;

1948 } i‡(!
›ts
.
›t
) {

1949 
	`Ârötf
(
°dîr
, "uƒecognized o±i⁄ %s\n", 
›ts
.
vÆ°r
);

1950 
ªt
 = -1;

1951 
exô
;

1953 
	`Ârötf
(
°dîr
, "uƒecognized o±i⁄ %c\n", 
›ts
.
›t
);

1954 
ªt
 = -1;

1955 
exô
;

1960 i‡(!
‚ame
) {

1961 
	`Ârötf
(
°dîr
, "filenameÑequired\n");

1962 
ªt
 = -1;

1963 
exô
;

1966 i‡((
ªt
 = 
	`dhd_v¨_gë
(
dhd
, 
NULL
, 
memsz¨gs
))) {

1967 
	`Ârötf
(
°dîr
, "%s:Éº‹ obèöög memsize\n", 
__FUNCTION__
);

1968 
exô
;

1970 
memsize
 = *(
uöt32
*)
buf
;

1972 i‡(!
memsize
)

1973 
memsize
 = 
°¨t
 + 
size
;

1975 i‡(
°¨t
 + 
size
 > 
memsize
) {

1976 
	`Ârötf
(
°dîr
, "%s: %d bytesát 0x%xÉxceedsÑamsize 0x%x\n",

1977 
__FUNCTION__
, 
size
, 
°¨t
, 
memsize
);

1978 
ªt
 = -1;

1979 
exô
;

1982 i‡((
Â
 = 
	`f›í
(
‚ame
, "wb")Ë=
NULL
) {

1983 
	`Ârötf
(
°dîr
, "%s: CouldÇot open %s: %s\n",

1984 
__FUNCTION__
, 
‚ame
, 
	`°ªº‹
(
î∫o
));

1985 
ªt
 = -1;

1986 
exô
;

1990 i‡(!
size
)

1991 
size
 = 
memsize
 - 
°¨t
;

1994 
size
) {

1995 *
±r
;

1996 
∑øms
[2];

1998 
Àn
 = 
	`MIN
(
MEMBLOCK
, 
size
);

2000 
∑øms
[0] = 
°¨t
;

2001 
∑øms
[1] = 
Àn
;

2002 
ªt
 = 
	`dhd_v¨_gëbuf
(
dhd
, "membyãs", 
∑øms
, 2 * (), (**)&
±r
);

2003 i‡(
ªt
) {

2004 
	`Ârötf
(
°dîr
, "%s: failedÑeading %d membytes from 0x%08x\n",

2005 
__FUNCTION__
, 
Àn
, 
°¨t
);

2009 i‡(
	`fwrôe
(
±r
, (*±r), 
Àn
, 
Â
) !=Üen) {

2010 
	`Ârötf
(
°dîr
, "%s:Éº‹ wrôögÅÿfûê%s\n", 
__FUNCTION__
, 
‚ame
);

2011 
ªt
 = -1;

2015 
°¨t
 +
Àn
;

2016 
size
 -
Àn
;

2019 
	`f˛o£
(
Â
);

2020 
exô
:

2021  
ªt
;

2023 
	}
}

2026 
	$dhd_log°amp
(*
dhd
, 
cmd_t
 *
cmd
, **
¨gv
)

2028 
ªt
;

2029 *
íd±r
 = 
NULL
;

2030 
uöt
 
¨gc
;

2031 
vÆn
[2] = {0, 0};

2034 
¨gc
 = 0; 
¨gv
[argc];árgc++);

2035 
¨gc
--; 
¨gv
++;

2037 i‡(
¨gc
 > 2)

2038  
USAGE_ERROR
;

2040 i‡(
¨gc
) {

2041 
vÆn
[0] = 
	`°πﬁ
(
¨gv
[0], &
íd±r
, 0);

2042 i‡(*
íd±r
 != '\0') {

2043 
	`¥ötf
("bad vÆ1: %s\n", 
¨gv
[0]);

2044  
USAGE_ERROR
;

2048 i‡(
¨gc
 > 1) {

2049 
vÆn
[1] = 
	`°πﬁ
(
¨gv
[1], &
íd±r
, 0);

2050 i‡(*
íd±r
 != '\0') {

2051 
	`¥ötf
("bad vÆ2: %s\n", 
¨gv
[1]);

2052  
USAGE_ERROR
;

2056 
ªt
 = 
	`dhd_v¨_£tbuf
(
dhd
, 
cmd
->
«me
, 
vÆn
, 
¨gc
 * ());

2058  (
ªt
);

2059 
	}
}

2062 
	$dhd_sd_ªg
(*
dhd
, 
cmd_t
 *
cmd
, **
¨gv
)

2064 
ªt
;

2065 
sdªg_t
 
sdªg
;

2066 *
íd±r
 = 
NULL
;

2067 
uöt
 
¨gc
;

2068 *
±r
 = 
NULL
;

2070 
	`bzîo
(&
sdªg
, (sdreg));

2073 
¨gc
 = 0; 
¨gv
[argc];árgc++);

2074 
¨gc
--;

2077 i‡(!
	`°rcmp
(
cmd
->
«me
, "sd_hostreg")) {

2078 
¨gv
++;

2079 i‡(
¨gc
 < 1) {

2080 
	`¥ötf
("requiredárgs: offset [value]\n");

2081  
USAGE_ERROR
;

2084 } i‡(!
	`°rcmp
(
cmd
->
«me
, "sd_devreg")) {

2085 
¨gv
++;

2086 i‡(
¨gc
 < 2) {

2087 
	`¥ötf
("requiredárgs: func offset [value]\n");

2088  
USAGE_ERROR
;

2091 
sdªg
.
func
 = 
	`°πoul
(*
¨gv
++, &
íd±r
, 0);

2092 i‡(*
íd±r
 != '\0') {

2093 
	`¥ötf
("Invalid functionÇumber\n");

2094  
USAGE_ERROR
;

2097  
USAGE_ERROR
;

2100 
sdªg
.
off£t
 = 
	`°πoul
(*
¨gv
++, &
íd±r
, 0);

2101 i‡(*
íd±r
 != '\0') {

2102 
	`¥ötf
("Invalid offset value\n");

2103  
USAGE_ERROR
;

2107 i‡(*
¨gv
) {

2108 
sdªg
.
vÆue
 = 
	`°πoul
(*
¨gv
, &
íd±r
, 0);

2109 i‡(*
íd±r
 != '\0') {

2110 
	`¥ötf
("Invalid value\n");

2111  
USAGE_ERROR
;

2116 i‡(!*
¨gv
) {

2117 i‡((
ªt
 = 
	`dhd_v¨_gëbuf
(
dhd
, 
cmd
->
«me
, &
sdªg
, (sdªg), &
±r
)) >= 0)

2118 
	`¥ötf
("0x%x\n", *(*)
±r
);

2120 
ªt
 = 
	`dhd_v¨_£tbuf
(
dhd
, 
cmd
->
«me
, &
sdªg
, (sdreg));

2123  (
ªt
);

2124 
	}
}

2126 
dbg_msg_t
 
	gdhd_msgs
[] = {

2127 {
DHD_ERROR_VAL
, "error"},

2128 {
DHD_ERROR_VAL
, "err"},

2129 {
DHD_TRACE_VAL
, "trace"},

2130 {
DHD_INFO_VAL
, "inform"},

2131 {
DHD_INFO_VAL
, "info"},

2132 {
DHD_INFO_VAL
, "inf"},

2133 {
DHD_DATA_VAL
, "data"},

2134 {
DHD_CTL_VAL
, "ctl"},

2135 {
DHD_TIMER_VAL
, "timer"},

2136 {
DHD_HDRS_VAL
, "hdrs"},

2137 {
DHD_BYTES_VAL
, "bytes"},

2138 {
DHD_INTR_VAL
, "intr"},

2139 {
DHD_LOG_VAL
, "log"},

2140 {
DHD_GLOM_VAL
, "glom"},

2141 {
DHD_EVENT_VAL
, "event"},

2142 {
DHD_BTA_VAL
, "bta"},

2143 {0, 
NULL
}

2147 
	$dhd_msgÀvñ
(*
dhd
, 
cmd_t
 *
cmd
, **
¨gv
)

2149  
	`dhd_do_msgÀvñ
(
dhd
, 
cmd
, 
¨gv
, 
dhd_msgs
);

2150 
	}
}

2153 
	$dhd_do_msgÀvñ
(*
dhd
, 
cmd_t
 *
cmd
, **
¨gv
, 
dbg_msg_t
 *
dbg_msg
)

2155 
ªt
, 
i
;

2156 
uöt
 
vÆ
, 
œ°_vÆ
 = 0, 
msgÀvñ
 = 0, 
msgÀvñ_add
 = 0, 
msgÀvñ_dñ
 = 0;

2157 *
íd±r
 = 
NULL
;

2159 i‡((
ªt
 = 
	`dhd_iov¨_gëöt
(
dhd
, 
cmd
->
«me
, (*)&
msgÀvñ
)) < 0)

2160  (
ªt
);

2162 i‡(!*++
¨gv
) {

2163 
	`¥ötf
("0x%x ", 
msgÀvñ
);

2164 
i
 = 0; (
vÆ
 = 
dbg_msg
[i].
vÆue
); i++) {

2165 i‡((
msgÀvñ
 & 
vÆ
Ë&& (vÆ !
œ°_vÆ
))

2166 
	`¥ötf
(" %s", 
dbg_msg
[
i
].
°rög
);

2167 
œ°_vÆ
 = 
vÆ
;

2169 
	`¥ötf
("\n");

2173 *
¨gv
) {

2174 *
s
 = *
¨gv
;

2175 i‡(*
s
 == '+' || *s == '-')

2176 
s
++;

2178 
msgÀvñ_dñ
 = ~0;

2179 
vÆ
 = 
	`°πoul
(
s
, &
íd±r
, 0);

2181 i‡(*
íd±r
 != '\0') {

2182 
i
 = 0; (
vÆ
 = 
dbg_msg
[i].
vÆue
); i++)

2183 i‡(
	`°ricmp
(
dbg_msg
[
i
].
°rög
, 
s
) == 0)

2185 i‡(!
vÆ
)

2186 
ußge
;

2188 i‡(**
¨gv
 == '-')

2189 
msgÀvñ_dñ
 |
vÆ
;

2191 
msgÀvñ_add
 |
vÆ
;

2192 ++
¨gv
;

2195 
msgÀvñ
 &~
msgÀvñ_dñ
;

2196 
msgÀvñ
 |
msgÀvñ_add
;

2198  (
	`dhd_iov¨_£töt
(
dhd
, 
cmd
->
«me
, 
msgÀvñ
));

2200 
ußge
:

2201 
	`Ârötf
(
°dîr
, "msg values may beáÜist ofÇumbers orÇames fromÅhe following set.\n");

2202 
	`Ârötf
(
°dîr
, "Useá + or -ÖrefixÅo makeán incremental change.");

2204 
i
 = 0; (
vÆ
 = 
dbg_msg
[i].
vÆue
); i++) {

2205 i‡(
vÆ
 !
œ°_vÆ
)

2206 
	`Ârötf
(
°dîr
, "\n0x%04x %s", 
vÆ
, 
dbg_msg
[
i
].
°rög
);

2208 
	`Ârötf
(
°dîr
, ", %s", 
dbg_msg
[
i
].
°rög
);

2209 
œ°_vÆ
 = 
vÆ
;

2211 
	`Ârötf
(
°dîr
, "\n");

2214 
	}
}

2217 
	$vî2°r
(
vms
, 
vls
)

2219 
vî°r
[100];

2220 
maj
, 
yór
, 
m⁄th
, 
day
, 
buûd
;

2222 
maj
 = (
vms
 >> 16) & 0xFFFF;

2223 i‡(
maj
 > 1000) {

2225 
yór
 = (
vms
 >> 16) & 0xFFFF;

2226 
m⁄th
 = 
vms
 & 0xFFFF;

2227 
day
 = (
vls
 >> 16) & 0xFFFF;

2228 
buûd
 = 
vls
 & 0xFFFF;

2229 
	`•rötf
(
vî°r
, "%d/%d/%d build %d",

2230 
m⁄th
, 
day
, 
yór
, 
buûd
);

2233 
	`•rötf
(
vî°r
, "%d.%d RC%d.%d",

2234 (
vms
>>16)&0xFFFF, vms&0xFFFF,

2235 (
vls
>>16)&0xFFFF, vls&0xFFFF);

2237  
vî°r
;

2238 
	}
}

2241 
	$dhd_vîsi⁄
(*
dhd
, 
cmd_t
 *
cmd
, **
¨gv
)

2243 
ªt
;

2244 *
±r
;

2246 
	`UNUSED_PARAMETER
(
cmd
);

2247 
	`UNUSED_PARAMETER
(
¨gv
);

2250 
	`¥ötf
("%s: %s\n", 
dhdu_av0
,

2251 
	`vî2°r
((
EPI_MAJOR_VERSION
 << 16)| 
EPI_MINOR_VERSION
,

2252 (
EPI_RC_NUMBER
 << 16Ë| 
EPI_INCREMENTAL_NUMBER
));

2254 i‡((
ªt
 = 
	`dhd_v¨_gëbuf
(
dhd
, 
cmd
->
«me
, 
NULL
, 0, (**)&
±r
)) < 0)

2255  
ªt
;

2258 
	`¥ötf
("%s\n", 
±r
);

2261 
	}
}

2264 
	$dhd_v¨_£töt
(*
dhd
, 
cmd_t
 *
cmd
, **
¨gv
)

2266 
öt32
 
vÆ
;

2267 
Àn
;

2268 *
v¨«me
;

2269 *
íd±r
 = 
NULL
;

2270 *
p
;

2272 i‡(
cmd
->
£t
 == -1) {

2273 
	`¥ötf
("£ànŸ deföed f‹ %s\n", 
cmd
->
«me
);

2274  
COMMAND_ERROR
;

2277 i‡(!*
¨gv
) {

2278 
	`¥ötf
("set: missingárguments\n");

2279  
USAGE_ERROR
;

2282 
v¨«me
 = *
¨gv
++;

2284 i‡(!*
¨gv
) {

2285 
	`¥ötf
("£t: missög vÆuê¨gumíàf‹ së o‡\"%s\"\n", 
v¨«me
);

2286  
USAGE_ERROR
;

2289 
vÆ
 = 
	`°πﬁ
(*
¨gv
, &
íd±r
, 0);

2290 i‡(*
íd±r
 != '\0') {

2292 
	`¥ötf
("set:ÉrrorÖarsing value \"%s\"ásán integer for set of \"%s\"\n",

2293 *
¨gv
, 
v¨«me
);

2294  
USAGE_ERROR
;

2297 
	`°r˝y
(
buf
, 
v¨«me
);

2298 
p
 = 
buf
;

2299 *
p
 != '\0') {

2300 *
p
 = 
	`tﬁowî
(*p);

2301 
p
++;

2305 
p
++;

2307 
	`mem˝y
(
p
, &
vÆ
, (
uöt
));

2308 
Àn
 = (
p
 - 
buf
Ë+ (
uöt
);

2310  (
	`dhd_£t
(
dhd
, 
DHD_SET_VAR
, &
buf
[0], 
Àn
));

2311 
	}
}

2314 
	$dhd_v¨_gë
(*
dhd
, 
cmd_t
 *
cmd
, **
¨gv
)

2316 *
v¨«me
;

2317 *
p
;

2319 
	`UNUSED_PARAMETER
(
cmd
);

2321 i‡(!*
¨gv
) {

2322 
	`¥ötf
("get: missingárguments\n");

2323  
USAGE_ERROR
;

2326 
v¨«me
 = *
¨gv
++;

2328 i‡(*
¨gv
) {

2329 
	`¥ötf
("gë:Éº‹,Éxå®¨g \"%s\"\n", *
¨gv
);

2330  
USAGE_ERROR
;

2333 
	`°r˝y
(
buf
, 
v¨«me
);

2334 
p
 = 
buf
;

2335 *
p
 != '\0') {

2336 *
p
 = 
	`tﬁowî
(*p);

2337 
p
++;

2339  (
	`dhd_gë
(
dhd
, 
DHD_GET_VAR
, &
buf
[0], 
DHD_IOCTL_MAXLEN
));

2340 
	}
}

2343 
	$dhd_v¨_gëöt
(*
dhd
, 
cmd_t
 *
cmd
, **
¨gv
)

2345 
îr
;

2346 
öt32
 
vÆ
;

2347 i‡(
cmd
->
gë
 == -1) {

2348 
	`¥ötf
("gëÇŸ deföed f‹ %s\n", 
cmd
->
«me
);

2349  
COMMAND_ERROR
;

2352 i‡((
îr
 = 
	`dhd_v¨_gë
(
dhd
, 
cmd
, 
¨gv
)))

2353  (
îr
);

2355 
vÆ
 = *(
öt32
*)
buf
;

2357 i‡(
vÆ
 < 10)

2358 
	`¥ötf
("%d\n", 
vÆ
);

2360 
	`¥ötf
("%d (0x%x)\n", 
vÆ
, val);

2363 
	}
}

2366 
	$dhd_v¨_gë™d¥öt°r
(*
dhd
, 
cmd_t
 *
cmd
, **
¨gv
)

2368 
îr
;

2370 i‡((
îr
 = 
	`dhd_v¨_gë
(
dhd
, 
cmd
, 
¨gv
)))

2371  (
îr
);

2373 
	`¥ötf
("%s\n", 
buf
);

2375 
	}
}

2379 
	$dhd_¥öéa°îr‹
(*
dhd
)

2381 *
cmd
[2] = {"bcmerrorstr"};

2383 i‡(
	`dhd_v¨_gë
(
dhd
, 
NULL
, 
cmd
) != 0) {

2384 
	`Ârötf
(
°dîr
, "%s: \nEº‹ gëtögÅhêœ°Éº‹\n", 
dhdu_av0
);

2386 
	`Ârötf
(
°dîr
, "%s: %s\n", 
dhdu_av0
, 
buf
);

2388 
	}
}

2391 
	$dhd_v¨öt
(*
dhd
, 
cmd_t
 *
cmd
, *
¨gv
[])

2393 i‡(
¨gv
[1])

2394  (
	`dhd_v¨_£töt
(
dhd
, 
cmd
, 
¨gv
));

2396  (
	`dhd_v¨_gëöt
(
dhd
, 
cmd
, 
¨gv
));

2397 
	}
}

2400 
	$dhd_v¨_gëbuf
(*
dhd
, *
iov¨
, *
∑øm
, 
∑øm_Àn
, **
buÂå
)

2402 
Àn
;

2404 
	`mem£t
(
buf
, 0, 
DHD_IOCTL_MAXLEN
);

2405 
	`°r˝y
(
buf
, 
iov¨
);

2408 
Àn
 = 
	`°æí
(
iov¨
) + 1;

2410 i‡(
∑øm_Àn
)

2411 
	`mem˝y
(&
buf
[
Àn
], 
∑øm
, 
∑øm_Àn
);

2413 *
buÂå
 = 
buf
;

2415  
	`dhd_gë
(
dhd
, 
DHD_GET_VAR
, &
buf
[0], 
DHD_IOCTL_MAXLEN
);

2416 
	}
}

2419 
	$dhd_v¨_£tbuf
(*
dhd
, *
iov¨
, *
∑øm
, 
∑øm_Àn
)

2421 
Àn
;

2423 
	`mem£t
(
buf
, 0, 
DHD_IOCTL_MAXLEN
);

2424 
	`°r˝y
(
buf
, 
iov¨
);

2427 
Àn
 = 
	`°æí
(
iov¨
) + 1;

2429 i‡(
∑øm_Àn
)

2430 
	`mem˝y
(&
buf
[
Àn
], 
∑øm
, 
∑øm_Àn
);

2432 
Àn
 +
∑øm_Àn
;

2434  
	`dhd_£t
(
dhd
, 
DHD_SET_VAR
, &
buf
[0], 
Àn
);

2435 
	}
}

2438 
	$dhd_v¨_void
(*
dhd
, 
cmd_t
 *
cmd
, **
¨gv
)

2440 
	`UNUSED_PARAMETER
(
¨gv
);

2442 i‡(
cmd
->
£t
 < 0)

2443  
USAGE_ERROR
;

2445  
	`dhd_v¨_£tbuf
(
dhd
, 
cmd
->
«me
, 
NULL
, 0);

2446 
	}
}

2451 
uöt


2452 
	$dhd_iov¨_mkbuf
(*
«me
, *
d©a
, 
uöt
 
d©Æí
, *
buf
, uöà
buÊí
, *
≥º
)

2454 
uöt
 
Àn
;

2456 
Àn
 = 
	`°æí
(
«me
) + 1;

2459 i‡((
Àn
 + 
d©Æí
Ë> 
buÊí
) {

2460 *
≥º
 = 
BCME_BUFTOOSHORT
;

2464 
	`°r˝y
(
buf
, 
«me
);

2467 i‡(
d©Æí
 > 0)

2468 
	`mem˝y
(&
buf
[
Àn
], 
d©a
, 
d©Æí
);

2470 
Àn
 +
d©Æí
;

2472 *
≥º
 = 0;

2473  
Àn
;

2474 
	}
}

2477 
	$dhd_iov¨_gëöt
(*
dhd
, *
«me
, *
v¨
)

2479 
ibuf
[
DHD_IOCTL_SMLEN
];

2480 
îr‹
;

2482 
	`dhd_iov¨_mkbuf
(
«me
, 
NULL
, 0, 
ibuf
, (ibuf), &
îr‹
);

2483 i‡(
îr‹
)

2484  
îr‹
;

2486 i‡((
îr‹
 = 
	`dhd_gë
(
dhd
, 
DHD_GET_VAR
, &
ibuf
, (ibuf))) < 0)

2487  
îr‹
;

2489 
	`mem˝y
(
v¨
, 
ibuf
, ());

2492 
	}
}

2495 
	$dhd_iov¨_£töt
(*
dhd
, *
«me
, 
v¨
)

2497 
Àn
;

2498 
ibuf
[
DHD_IOCTL_SMLEN
];

2499 
îr‹
;

2501 
Àn
 = 
	`dhd_iov¨_mkbuf
(
«me
, (*)&
v¨
, (v¨), 
ibuf
, (ibuf), &
îr‹
);

2502 i‡(
îr‹
)

2503  
îr‹
;

2505 i‡((
îr‹
 = 
	`dhd_£t
(
dhd
, 
DHD_SET_VAR
, &
ibuf
, 
Àn
)) < 0)

2506  
îr‹
;

2509 
	}
}

2512 
	$dhd_v¨°r
(*
dhd
, 
cmd_t
 *
cmd
, **
¨gv
)

2514 
îr‹
;

2515 *
°r
;

2517 i‡(!*++
¨gv
) {

2518 *
±r
;

2520 i‡((
îr‹
 = 
	`dhd_v¨_gëbuf
(
dhd
, 
cmd
->
«me
, 
NULL
, 0, &
±r
)) < 0)

2521  (
îr‹
);

2523 
°r
 = (*)
±r
;

2524 
	`¥ötf
("%s\n", 
°r
);

2527 
°r
 = *
¨gv
;

2529  
	`dhd_v¨_£tbuf
(
dhd
, 
cmd
->
«me
, 
°r
, 
	`°æí
(str) + 1);

2531 
	}
}

2535 
	#MATCH_OP
(
›
, 
›°r
Ë(
	`°æí
(›Ë=°æí(›°rË&& 
	`°∫cmp
(›, op°r, såÀn(›)Ë=0)

	)

2538 
	$wl_HCI_cmd
(*
wl
, 
cmd_t
 *
cmd
, **
¨gv
)

2541 
buf
[
HCI_CMD_PREAMBLE_SIZE
 + 
HCI_CMD_DATA_SIZE
];

2542 
uöt32
 
Æignme
;

2543 } 
cbuf
;

2544 
amp_hci_cmd_t
 *
˝kt
 = (amp_hci_cmd_à*)&
cbuf
.
buf
[0];

2546 *
›
;

2547 
uöt8
 
∂í
;

2549 
	`UNUSED_PARAMETER
(
cmd
);

2551 i‡(!*++
¨gv
)

2552  
USAGE_ERROR
;

2555 
›
 = *
¨gv
++;

2556 i‡(
	`MATCH_OP
(
›
, "Read_Link_Quality")) {

2557 
˝kt
->
›code
 = 
HCI_Ród_Lök_QuÆôy
;

2558 } i‡(
	`MATCH_OP
(
›
, "Read_Local_AMP_Info")) {

2559 
˝kt
->
›code
 = 
HCI_Ród_Loˇl_AMP_Info
;

2560 } i‡(
	`MATCH_OP
(
›
, "Read_Local_AMP_ASSOC")) {

2561 
˝kt
->
›code
 = 
HCI_Ród_Loˇl_AMP_ASSOC
;

2562 } i‡(
	`MATCH_OP
(
›
, "Write_Remote_AMP_ASSOC")) {

2563 
˝kt
->
›code
 = 
HCI_Wrôe_RemŸe_AMP_ASSOC
;

2564 } i‡(
	`MATCH_OP
(
›
, "Create_Physical_Link")) {

2565 
˝kt
->
›code
 = 
HCI_Cª©e_Physiˇl_Lök
;

2566 } i‡(
	`MATCH_OP
(
›
, "Accept_Physical_Link_Request")) {

2567 
˝kt
->
›code
 = 
HCI_Ac˚±_Physiˇl_Lök_Reque°
;

2568 } i‡(
	`MATCH_OP
(
›
, "Disconnect_Physical_Link")) {

2569 
˝kt
->
›code
 = 
HCI_Disc⁄√˘_Physiˇl_Lök
;

2570 } i‡(
	`MATCH_OP
(
›
, "Create_Logical_Link")) {

2571 
˝kt
->
›code
 = 
HCI_Cª©e_Logiˇl_Lök
;

2572 } i‡(
	`MATCH_OP
(
›
, "Accept_Logical_Link")) {

2573 
˝kt
->
›code
 = 
HCI_Ac˚±_Logiˇl_Lök
;

2574 } i‡(
	`MATCH_OP
(
›
, "Disconnect_Logical_Link")) {

2575 
˝kt
->
›code
 = 
HCI_Disc⁄√˘_Logiˇl_Lök
;

2576 } i‡(
	`MATCH_OP
(
›
, "Logical_Link_Cancel")) {

2577 
˝kt
->
›code
 = 
HCI_Logiˇl_Lök_C™˚l
;

2578 } i‡(
	`MATCH_OP
(
›
, "Short_Range_Mode")) {

2579 
˝kt
->
›code
 = 
HCI_Sh‹t_R™ge_Mode
;

2580 } i‡(
	`MATCH_OP
(
›
, "Read_Connection_Accept_Timeout")) {

2581 
˝kt
->
›code
 = 
HCI_Ród_C⁄√˘i⁄_Ac˚±_Timeout
;

2582 } i‡(
	`MATCH_OP
(
›
, "Write_Connection_Accept_Timeout")) {

2583 
˝kt
->
›code
 = 
HCI_Wrôe_C⁄√˘i⁄_Ac˚±_Timeout
;

2584 } i‡(
	`MATCH_OP
(
›
, "Read_Link_Supervision_Timeout")) {

2585 
˝kt
->
›code
 = 
HCI_Ród_Lök_Su≥rvisi⁄_Timeout
;

2586 } i‡(
	`MATCH_OP
(
›
, "Write_Link_Supervision_Timeout")) {

2587 
˝kt
->
›code
 = 
HCI_Wrôe_Lök_Su≥rvisi⁄_Timeout
;

2588 } i‡(
	`MATCH_OP
(
›
, "Reset")) {

2589 
˝kt
->
›code
 = 
HCI_Re£t
;

2590 } i‡(
	`MATCH_OP
(
›
, "Enhanced_Flush")) {

2591 
˝kt
->
›code
 = 
HCI_Enh™˚d_Flush
;

2592 } i‡(
	`MATCH_OP
(
›
, "Read_Best_Effort_Flush_Timeout")) {

2593 
˝kt
->
›code
 = 
HCI_Ród_Be°_Eff‹t_Flush_Timeout
;

2594 } i‡(
	`MATCH_OP
(
›
, "Write_Best_Effort_Flush_Timeout")) {

2595 
˝kt
->
›code
 = 
HCI_Wrôe_Be°_Eff‹t_Flush_Timeout
;

2596 } i‡(
	`MATCH_OP
(
›
, "Read_Logical_Link_Accept_Timeout")) {

2597 
˝kt
->
›code
 = 
HCI_Ród_Logiˇl_Lök_Ac˚±_Timeout
;

2598 } i‡(
	`MATCH_OP
(
›
, "Write_Logical_Link_Accept_Timeout")) {

2599 
˝kt
->
›code
 = 
HCI_Wrôe_Logiˇl_Lök_Ac˚±_Timeout
;

2600 } i‡(
	`MATCH_OP
(
›
, "Read_Buffer_Size")) {

2601 
˝kt
->
›code
 = 
HCI_Ród_Buf„r_Size
;

2602 } i‡(
	`MATCH_OP
(
›
, "Read_Data_Block_Size")) {

2603 
˝kt
->
›code
 = 
HCI_Ród_D©a_Block_Size
;

2604 } i‡(
	`MATCH_OP
(
›
, "Set_Event_Mask_Page_2")) {

2605 
˝kt
->
›code
 = 
HCI_Së_Evít_Mask_Page_2
;

2606 } i‡(
	`MATCH_OP
(
›
, "Flow_Spec_Modify")) {

2607 
˝kt
->
›code
 = 
HCI_Flow_S≥c_Modify
;

2608 } i‡(
	`MATCH_OP
(
›
, "Read_Local_Version_Info")) {

2609 
˝kt
->
›code
 = 
HCI_Ród_Loˇl_Vîsi⁄_Info
;

2610 } i‡(
	`MATCH_OP
(
›
, "Read_Local_Supported_Commands")) {

2611 
˝kt
->
›code
 = 
HCI_Ród_Loˇl_Suµ‹ãd_Comm™ds
;

2612 } i‡(
	`MATCH_OP
(
›
, "Read_Failed_Contact_Counter")) {

2613 
˝kt
->
›code
 = 
HCI_Ród_Faûed_C⁄è˘_Cou¡î
;

2614 } i‡(
	`MATCH_OP
(
›
, "Reset_Failed_Contact_Counter")) {

2615 
˝kt
->
›code
 = 
HCI_Re£t_Faûed_C⁄è˘_Cou¡î
;

2617 
	`¥ötf
("unsuµ‹ãd HCI comm™d: %s\n", 
›
);

2621 
∂í
 = 0;

2622 *
¨gv
 && (
∂í
 < 
HCI_CMD_DATA_SIZE
)) {

2623 
˝kt
->
∑rms
[
∂í
++] = (
uöt8
)
	`°πﬁ
(*
¨gv
++, 
NULL
, 0);

2625 
˝kt
->
∂í
 =Ölen;

2627  
	`dhd_v¨_£tbuf
(
wl
, 
cmd
->
«me
, 
˝kt
, 
HCI_CMD_PREAMBLE_SIZE
 + 
∂í
);

2628 
	}
}

2631 
	$wl_HCI_ACL_d©a
(*
wl
, 
cmd_t
 *
cmd
, **
¨gv
)

2637 
uöt8
 
buf
[
HCI_ACL_DATA_PREAMBLE_SIZE
 + 2048];

2638 
uöt32
 
Æignme
;

2639 } 
g_hci_dbuf
;

2641 
amp_hci_ACL_d©a_t
 *
dpkt
 = (amp_hci_ACL_d©a_à*)&
g_hci_dbuf
.
buf
[0];

2642 
uöt16
 
dÀn
;

2644 i‡(!*++
¨gv
)

2645  
USAGE_ERROR
;

2648 
dpkt
->
h™dÀ
 = (
HCI_ACL_DATA_BC_FLAGS
 | 
HCI_ACL_DATA_PB_FLAGS
);

2649 
dpkt
->
h™dÀ
 |(
uöt16
)
	`°πﬁ
(*
¨gv
++, 
NULL
, 0);

2652 
dÀn
 = 0;

2653 *
¨gv
 && (
dÀn
 < 2048)) {

2654 
dpkt
->
d©a
[
dÀn
++] = (
uöt8
)
	`°πﬁ
(*
¨gv
++, 
NULL
, 0);

2656 
dpkt
->
dÀn
 = dlen;

2658  
	`dhd_v¨_£tbuf
(
wl
, 
cmd
->
«me
, 
dpkt
, 
HCI_ACL_DATA_PREAMBLE_SIZE
 + 
dÀn
);

2659 
	}
}

2665 
	$dhd_©où
(c⁄° *
a
, 
ùv4_addr
 *
n
)

2667 *
c
;

2668 
i
 = 0;

2671 
n
->
addr
[
i
++] = (
uöt8
)
	`°πoul
(
a
, &
c
, 0);

2672 i‡(*
c
++ !'.' || 
i
 =
IPV4_ADDR_LEN
)

2674 
a
 = 
c
;

2676  (
i
 =
IPV4_ADDR_LEN
);

2677 
	}
}

2680 
	$dhd_ëhî_©€
(c⁄° *
a
, 
ëhî_addr
 *
n
)

2682 *
c
;

2683 
i
 = 0;

2685 
	`mem£t
(
n
, 0, 
ETHER_ADDR_LEN
);

2687 
n
->
o˘ë
[
i
++] = (
uöt8
)
	`°πoul
(
a
, &
c
, 16);

2688 i‡(!*
c
++ || 
i
 =
ETHER_ADDR_LEN
)

2690 
a
 = 
c
;

2692  (
i
 =
ETHER_ADDR_LEN
);

2693 
	}
}

	@dhdutil/dhdu.h

21 #i‚de‡
_dhdu_h_


22 
	#_dhdu_h_


	)

24 
	~"dhdu_cmd.h
"

26 *
dhdu_av0
;

29 
dhd_›ti⁄
(***
∑rgv
, **
pi‚ame
, *
phñp
);

30 
dhd_cmd_öô
();

33 
dhd_cmd_ußge
(
cmd_t
 *
cmd
);

34 
dhd_ußge
(
cmd_t
 *
p‹t_cmds
);

35 
dhd_cmds_ußge
(
cmd_t
 *
p‹t_cmds
);

38 
dhd_¥öéa°îr‹
(*
dhd
);

39 
dhd_¥ötöt
(
vÆ
);

42 
dhd_check
(*
dhd
);

45 
	gùv4_addr
;

46 
dhd_ëhî_©€
(c⁄° *
a
, 
ëhî_addr
 *
n
);

47 
dhd_©où
(c⁄° *
a
, 
ùv4_addr
 *
n
);

49 
	#ARRAYSIZE
(
a
Ë(◊)/◊[0]))

	)

51 
	#USAGE_ERROR
 -1

	)

52 
	#IOCTL_ERROR
 -2

	)

53 
	#COMMAND_ERROR
 -3

	)

56 
	#INT_FMT_DEC
 0

	)

57 
	#INT_FMT_UINT
 1

	)

58 
	#INT_FMT_HEX
 2

	)

61 
	#CMD_ERR
 -1

	)

62 
	#CMD_OPT
 0

	)

63 
	#CMD_DHD
 1

	)

	@dhdutil/dhdu_cmd.h

21 #i‚de‡
_dhdu_cmd_h_


22 
	#_dhdu_cmd_h_


	)

24 
cmd
 
	tcmd_t
;

25 (
	tcmd_func_t
)(*
	tdhd
, 
	tcmd_t
 *
	tcmd
, **
	t¨gv
);

28 
	scmd
 {

29 *
«me
;

30 
cmd_func_t
 *
func
;

31 
gë
;

32 
£t
;

33 *
hñp
;

37 
cmd_t
 
dhd_cmds
[];

38 
cmd_t
 
dhd_v¨cmd
;

41 
	#DHD_DLDN_ST
 0x400

	)

42 
	#DHD_DLDN_WRITE
 (
DHD_DLDN_ST
 + 1)

	)

43 
	#DHD_DLDN_END
 (
DHD_DLDN_ST
 + 2)

	)

46 
	`dhd_gë
(*
dhd
, 
cmd
, *
buf
, 
Àn
);

47 
	`dhd_£t
(*
dhd
, 
cmd
, *
buf
, 
Àn
);

	@dhdutil/dhdu_common.h

23 #i‚de‡
_dhdu_comm⁄_h


24 
	#_dhdu_comm⁄_h


	)

27 
dhd_check
(*
dhd
);

28 
dhd_©où
(c⁄° *
a
, 
ùv4_addr
 *
n
);

29 
dhd_›ti⁄
(***
∑rgv
, **
pi‚ame
, *
phñp
);

30 
dhd_ußge
(
cmd_t
 *
p‹t_cmds
);

32 
¥o˚ss_¨gs
(
i‰eq
* 
i‰
, **
¨gv
);

35 
	#dtoh32
(
i
Ë
	)
i

36 
	#dtoh16
(
i
Ë
	)
i

	@dhdutil/dhdu_linux.c

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

23 
	~<uni°d.h
>

24 
	~<˘y≥.h
>

25 
	~<°rög.h
>

26 
	~<î∫o.h
>

27 
	~<sys/ty≥s.h
>

28 
	~<sys/waô.h
>

29 
	~<sys/sockë.h
>

30 
	~<¥Ÿo/ëhî√t.h
>

31 
	~<¥Ÿo/bcmù.h
>

32 
	~<¨∑/öë.h
>

33 
	~<sys/io˘l.h
>

34 
	~<√t/if.h
>

35 
	~<f˙é.h
>

36 
	~<sys/io˘l.h
>

37 
	~<uni°d.h
>

39 #i‚de‡
TARGETENV_™droid


40 
	~<îr‹.h
>

41 
u_öt64_t
 
	tu64
;

42 
u_öt32_t
 
	tu32
;

43 
u_öt16_t
 
	tu16
;

44 
u_öt8_t
 
	tu8
;

46 
	~<löux/sockios.h
>

47 
	~<löux/ty≥s.h
>

48 
	~<löux/ëhtoﬁ.h
>

50 
	~<ty≥defs.h
>

51 
	~<sig«l.h
>

52 
	~<dhdio˘l.h
>

53 
	~<wlio˘l.h
>

54 
	~<bcmcdc.h
>

55 
	~<bcmutûs.h
>

56 
	~"dhdu.h
"

57 
	~<√tdb.h
>

58 
	~<dhdio˘l.h
>

59 
	~"dhdu_comm⁄.h
"

61 
wl_gë
(*
wl
, 
cmd
, *
buf
, 
Àn
);

62 
wl_£t
(*
wl
, 
cmd
, *
buf
, 
Àn
);

64 *
	gav0
;

68 
cmd_t
 *

69 
	$dhd_föd_cmd
(* 
«me
)

71 
cmd_t
 *
cmd
 = 
NULL
;

73 
cmd
 = 
dhd_cmds
; cmd->
«me
 && 
	`°rcmp
(cmd->name,Çame); cmd++);

74 i‡(
cmd
->
«me
 =
NULL
)

75 
cmd
 = 
NULL
;

76  
cmd
;

77 
	}
}

80 
	$sy£º
(*
s
)

82 
	`Ârötf
(
°dîr
, "%s: ", 
dhdu_av0
);

83 
	`≥º‹
(
s
);

84 
	`exô
(
î∫o
);

85 
	}
}

91 
	$dhd_io˘l
(*
dhd
, 
cmd
, *
buf
, 
Àn
, 
boﬁ
 
£t
)

93 
i‰eq
 *
i‰
 = (i‰eq *)
dhd
;

94 
dhd_io˘l_t
 
ioc
;

95 
ªt
 = 0;

96 
s
;

98 
drivî_magic
 = 
DHD_IOCTL_MAGIC
;

99 
gë_magic
 = 
DHD_GET_MAGIC
;

102 i‡((
s
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0)) < 0)

103 
	`sy£º
("socket");

106 
ioc
.
cmd
 = cmd;

107 
ioc
.
buf
 = buf;

108 
ioc
.
Àn
 =Üen;

109 
ioc
.
£t
 = set;

110 
ioc
.
drivî
 = 
drivî_magic
;

111 
i‰
->
i‰_d©a
 = (
ˇddr_t
Ë&
ioc
;

113 i‡((
ªt
 = 
	`io˘l
(
s
, 
SIOCDEVPRIVATE
, 
i‰
)) < 0) {

114 i‡(
cmd
 !
gë_magic
) {

115 
ªt
 = 
IOCTL_ERROR
;

120 
	`˛o£
(
s
);

121  
ªt
;

122 
	}
}

127 
	$wl_io˘l
(*
wl
, 
cmd
, *
buf
, 
Àn
, 
boﬁ
 
£t
)

129  
	`dhd_io˘l
(
wl
, 
cmd
, 
buf
, 
Àn
, 
£t
);

130 
	}
}

138 
	$dhd_gë_dev_ty≥
(*
«me
, *
buf
, *
ty≥
)

140 
s
;

141 
ªt
;

142 
i‰eq
 
i‰
;

143 
ëhtoﬁ_drvöfo
 
öfo
;

146 i‡((
s
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0)) < 0)

147 
	`sy£º
("socket");

150 
	`mem£t
(&
öfo
, 0, (info));

151 
öfo
.
cmd
 = 
ETHTOOL_GDRVINFO
;

152 
	`°r˝y
(
öfo
.
drivî
, "?");

153 
	`°rˇt
(
öfo
.
drivî
, 
ty≥
);

154 
i‰
.
i‰_d©a
 = (
ˇddr_t
)&
öfo
;

155 
	`°∫˝y
(
i‰
.
i‰_«me
, 
«me
, 
IFNAMSIZ
);

156 i‡((
ªt
 = 
	`io˘l
(
s
, 
SIOCETHTOOL
, &
i‰
)) < 0) {

159 i‡(
î∫o
 =
EPERM
)

160 
	`sy£º
("dhd_get_dev_type");

162 *(*)
buf
 = '\0';

165 
	`°r˝y
(
buf
, 
öfo
.
drivî
);

167 
	`˛o£
(
s
);

168  
ªt
;

169 
	}
}

179 
	$dhd_gë
(*
dhd
, 
cmd
, *
buf
, 
Àn
)

181  
	`wl_gë
(
dhd
, 
cmd
, 
buf
, 
Àn
);

182 
	}
}

189 
	#NODE
 "/dev/hnd0"

	)

192 
	$dhd_£t
(*
dhd
, 
cmd
, *
buf
, 
Àn
)

194 
dnode
 = -1;

196 
cmd
) {

197 
DHD_DLDN_ST
:

198 i‡(
dnode
 == -1)

199 
dnode
 = 
	`›í
(
NODE
, 
O_RDWR
);

201 
	`Ârötf
(
°dîr
, "devnodeálready opened!\n");

203  
dnode
;

205 
DHD_DLDN_WRITE
:

206 i‡(
dnode
 > 0)

207  
	`wrôe
(
dnode
, 
buf
, 
Àn
);

209 
DHD_DLDN_END
:

210 i‡(
dnode
 > 0)

211  
	`˛o£
(
dnode
);

214  
	`wl_£t
(
dhd
, 
cmd
, 
buf
, 
Àn
);

219 
	}
}

227 
	$wl_check
(*
wl
)

229 
ªt
;

230 
vÆ
 = 0;

232 i‡(!
	`dhd_check
 (
wl
))

238 i‡((
ªt
 = 
	`wl_gë
(
wl
, 
WLC_GET_MAGIC
, &
vÆ
, ())) < 0)

239  
ªt
;

240 i‡(
vÆ
 !
WLC_IOCTL_MAGIC
)

241  
BCME_ERROR
;

242 i‡((
ªt
 = 
	`wl_gë
(
wl
, 
WLC_GET_VERSION
, &
vÆ
, ())) < 0)

243  
ªt
;

244 i‡(
vÆ
 > 
WLC_IOCTL_VERSION
) {

245 
	`Ârötf
(
°dîr
, "Version mismatch,Ölease upgrade\n");

246  
BCME_ERROR
;

249 
	}
}

255 
	$dhd_föd
(
i‰eq
 *
i‰
, *
ty≥
)

257 
¥oc_√t_dev
[] = "/proc/net/dev";

258 
FILE
 *
Â
;

259 
buf
[400];

260 *
c
, *
«me
;

261 
dev_ty≥
[32];

263 
i‰
->
i‰_«me
[0] = '\0';

265 i‡(!(
Â
 = 
	`f›í
(
¥oc_√t_dev
, "r")) ||

266 !
	`fgës
(
buf
, (buf), 
Â
) ||

267 !
	`fgës
(
buf
, (buf), 
Â
))

270 
	`fgës
(
buf
, (buf), 
Â
)) {

271 
c
 = 
buf
;

272 
	`is•a˚
(*
c
))

273 
c
++;

274 i‡(!(
«me
 = 
	`°r£p
(&
c
, ":")))

276 
	`°∫˝y
(
i‰
->
i‰_«me
, 
«me
, 
IFNAMSIZ
);

277 i‡(
	`dhd_gë_dev_ty≥
(
«me
, 
dev_ty≥
, 
ty≥
) >= 0 &&

278 !
	`°∫cmp
(
dev_ty≥
, 
ty≥
, 
	`°æí
(dev_type) - 1))

280 i‡(!
	`wl_check
((*)
i‰
))

283 
i‰
->
i‰_«me
[0] = '\0';

286 
	`f˛o£
(
Â
);

287 
	}
}

292 
	$io˘l_quîyöf‹m©i⁄_„
(*
wl
, 
cmd
, * 
öput_buf
, *
öput_Àn
)

294  
	`dhd_io˘l
(
wl
, 
cmd
, 
öput_buf
, *
öput_Àn
, 
FALSE
);

295 
	}
}

301 
	$io˘l_£töf‹m©i⁄_„
(*
wl
, 
cmd
, * 
buf
, *
Àn
)

303  
	`dhd_io˘l
(
wl
, 
cmd
, 
buf
, *
Àn
, 
TRUE
);

304 
	}
}

310 
	$wl_gë
(*
wl
, 
cmd
, *
buf
, 
Àn
)

312 
îr‹
 = 
BCME_OK
;

313 
îr‹
 = ()
	`io˘l_quîyöf‹m©i⁄_„
(
wl
, 
cmd
, 
buf
, &
Àn
);

315 i‡(
îr‹
 != 0)

316  
IOCTL_ERROR
;

318  
îr‹
;

319 
	}
}

325 
	$wl_£t
(*
wl
, 
cmd
, *
buf
, 
Àn
)

327 
îr‹
 = 
BCME_OK
;

329 
îr‹
 = ()
	`io˘l_£töf‹m©i⁄_„
(
wl
, 
cmd
, 
buf
, &
Àn
);

331 i‡(
îr‹
 != 0) {

332  
IOCTL_ERROR
;

334  
îr‹
;

335 
	}
}

341 
	$maö
(
¨gc
, **
¨gv
)

343 
i‰eq
 
i‰
;

344 *
i‚ame
 = 
NULL
;

345 
îr
 = 0;

346 
hñp
 = 0;

347 
°©us
 = 
CMD_DHD
;

348 
	`UNUSED_PARAMETER
(
¨gc
);

350 
av0
 = 
dhdu_av0
 = 
¨gv
[0];

351 
	`mem£t
(&
i‰
, 0, (ifr));

352 
¨gv
++;

354 i‡((
°©us
 = 
	`dhd_›ti⁄
(&
¨gv
, &
i‚ame
, &
hñp
)Ë=
CMD_OPT
) {

355 i‡(
i‚ame
)

356 
	`°∫˝y
(
i‰
.
i‰_«me
, 
i‚ame
, 
IFNAMSIZ
);

359 
îr
 = 
	`¥o˚ss_¨gs
(&
i‰
, 
¨gv
);

361  
îr
;

362 
	}
}

369 
	$¥o˚ss_¨gs
(
i‰eq
* 
i‰
, **
¨gv
)

371 *
i‚ame
 = 
NULL
;

372 
hñp
 = 0;

373 
°©us
 = 0;

374 
îr
 = 
BCME_OK
;

375 
cmd_t
 *
cmd
 = 
NULL
;

376 *
¨gv
) {

377 i‡((
°©us
 = 
	`dhd_›ti⁄
(&
¨gv
, &
i‚ame
, &
hñp
)Ë=
CMD_OPT
) {

378 i‡(
hñp
)

380 i‡(
i‚ame
)

381 
	`°∫˝y
(
i‰
->
i‰_«me
, 
i‚ame
, 
IFNAMSIZ
);

385 i‡(
°©us
 =
CMD_ERR
)

389 i‡(!
i‰
->
i‰_«me
[0])

390 
	`dhd_föd
(
i‰
, "dhd");

392 i‡(!
i‰
->
i‰_«me
[0] || 
	`dhd_check
((*)ifr)) {

393 i‡(
	`°rcmp
("dldn", *
¨gv
) != 0) {

394 
	`Ârötf
(
°dîr
, "%s: dhd drivîád≠ã∏nŸ found\n", 
av0
);

395 
	`exô
(
BCME_ERROR
);

400 
cmd
 = 
	`dhd_föd_cmd
(*
¨gv
);

402 i‡(!
cmd
) {

403 
cmd
 = &
dhd_v¨cmd
;

407 
îr
 = (*
cmd
->
func
)((*Ë
i‰
, cmd, 
¨gv
);

412 i‡(
hñp
 && *
¨gv
) {

413 
cmd
 = 
	`dhd_föd_cmd
(*
¨gv
);

414 i‡(
cmd
) {

415 
	`dhd_cmd_ußge
(
cmd
);

417 
	`¥ötf
("%s: Unrecognized command \"%s\",Åype -h for help\n",

418 
av0
, *
¨gv
);

420 } i‡(!
cmd
)

421 
	`dhd_ußge
(
NULL
);

422 i‡(
îr
 =
USAGE_ERROR
)

423 
	`dhd_cmd_ußge
(
cmd
);

424 i‡(
îr
 =
IOCTL_ERROR
)

425 
	`dhd_¥öéa°îr‹
((*Ë
i‰
);

427  
îr
;

428 
	}
}

431 
	$rwl_shñl_¸óã¥oc
(*
wl
)

433 
	`UNUSED_PARAMETER
(
wl
);

434  
	`f‹k
();

435 
	}
}

438 
	$rwl_shñl_kûÕroc
(
pid
)

440 
	`kûl
(
pid
, 
SIGKILL
);

441 
	}
}

	@dhdutil/include/bcmcdc.h

24 #i‚de‡
_bcmcdc_h_


25 
	#_bcmcdc_h_


	)

26 
	~<¥Ÿo/ëhî√t.h
>

28 
	scdc_io˘l
 {

29 
uöt32
 
	mcmd
;

30 
uöt32
 
	mÀn
;

31 
uöt32
 
	mÊags
;

32 
uöt32
 
	m°©us
;

33 } 
	tcdc_io˘l_t
;

36 
	#CDC_MAX_MSG_SIZE
 
ETHER_MAX_LEN


	)

39 
	#CDCL_IOC_OUTLEN_MASK
 0x0000FFFF

	)

40 
	#CDCL_IOC_OUTLEN_SHIFT
 0

	)

41 
	#CDCL_IOC_INLEN_MASK
 0xFFFF0000

	)

42 
	#CDCL_IOC_INLEN_SHIFT
 16

	)

45 
	#CDCF_IOC_ERROR
 0x01

	)

46 
	#CDCF_IOC_SET
 0x02

	)

47 
	#CDCF_IOC_OVL_IDX_MASK
 0x3c

	)

48 
	#CDCF_IOC_OVL_RSV
 0x40

	)

49 
	#CDCF_IOC_OVL
 0x80

	)

50 
	#CDCF_IOC_ACTION_MASK
 0x„

	)

51 
	#CDCF_IOC_ACTION_SHIFT
 1

	)

52 
	#CDCF_IOC_IF_MASK
 0xF000

	)

53 
	#CDCF_IOC_IF_SHIFT
 12

	)

54 
	#CDCF_IOC_ID_MASK
 0xFFFF0000

	)

55 
	#CDCF_IOC_ID_SHIFT
 16

	)

57 
	#CDC_IOC_IF_IDX
(
Êags
Ë(((ÊagsË& 
CDCF_IOC_IF_MASK
Ë>> 
CDCF_IOC_IF_SHIFT
)

	)

58 
	#CDC_IOC_ID
(
Êags
Ë(((ÊagsË& 
CDCF_IOC_ID_MASK
Ë>> 
CDCF_IOC_ID_SHIFT
)

	)

60 
	#CDC_GET_IF_IDX
(
hdr
) \

61 (()((((
hdr
)->
Êags
Ë& 
CDCF_IOC_IF_MASK
Ë>> 
CDCF_IOC_IF_SHIFT
))

	)

62 
	#CDC_SET_IF_IDX
(
hdr
, 
idx
) \

63 ((
hdr
)->
Êags
 = (((hdr)->Êag†& ~
CDCF_IOC_IF_MASK
Ë| ((
idx
Ë<< 
CDCF_IOC_IF_SHIFT
)))

	)

67 
	#BDC_HEADER_LEN
 4

	)

69 
	#BDC_PROTO_VER_1
 1

	)

70 
	#BDC_PROTO_VER
 2

	)

72 
	#BDC_FLAG_VER_MASK
 0xf0

	)

73 
	#BDC_FLAG_VER_SHIFT
 4

	)

75 
	#BDC_FLAG__UNUSED
 0x03

	)

76 
	#BDC_FLAG_SUM_GOOD
 0x04

	)

77 
	#BDC_FLAG_SUM_NEEDED
 0x08

	)

79 
	#BDC_PRIORITY_MASK
 0x7

	)

81 
	#BDC_FLAG2_FC_FLAG
 0x10

	)

83 
	#BDC_PRIORITY_FC_SHIFT
 4

	)

85 
	#BDC_FLAG2_IF_MASK
 0x0f

	)

86 
	#BDC_FLAG2_IF_SHIFT
 0

	)

87 
	#BDC_FLAG2_PAD_MASK
 0xf0

	)

88 
	#BDC_FLAG_PAD_MASK
 0x03

	)

89 
	#BDC_FLAG2_PAD_SHIFT
 2

	)

90 
	#BDC_FLAG_PAD_SHIFT
 0

	)

91 
	#BDC_FLAG2_PAD_IDX
 0x3c

	)

92 
	#BDC_FLAG_PAD_IDX
 0x03

	)

93 
	#BDC_GET_PAD_LEN
(
hdr
) \

94 (()(((((
hdr
)->
Êags2
Ë& 
BDC_FLAG2_PAD_MASK
Ë>> 
BDC_FLAG2_PAD_SHIFT
) | \

95 ((((
hdr
)->
Êags
Ë& 
BDC_FLAG_PAD_MASK
Ë>> 
BDC_FLAG_PAD_SHIFT
)))

	)

96 
	#BDC_SET_PAD_LEN
(
hdr
, 
idx
) \

97 ((
hdr
)->
Êags2
 = (((hdr)->Êags2 & ~
BDC_FLAG2_PAD_MASK
) | \

98 (((
idx
Ë& 
BDC_FLAG2_PAD_IDX
Ë<< 
BDC_FLAG2_PAD_SHIFT
))); \

99 ((
hdr
)->
Êags
 = (((hdr)->Êag†& ~
BDC_FLAG_PAD_MASK
) | \

100 (((
idx
Ë& 
BDC_FLAG_PAD_IDX
Ë<< 
BDC_FLAG_PAD_SHIFT
)))

	)

102 
	#BDC_GET_IF_IDX
(
hdr
) \

103 (()((((
hdr
)->
Êags2
Ë& 
BDC_FLAG2_IF_MASK
Ë>> 
BDC_FLAG2_IF_SHIFT
))

	)

104 
	#BDC_SET_IF_IDX
(
hdr
, 
idx
) \

105 ((
hdr
)->
Êags2
 = (((hdr)->Êags2 & ~
BDC_FLAG2_IF_MASK
Ë| ((
idx
Ë<< 
BDC_FLAG2_IF_SHIFT
)))

	)

107 
	sbdc_hódî
 {

108 
uöt8
 
	mÊags
;

109 
uöt8
 
	m¥i‹ôy
;

110 
uöt8
 
	mÊags2
;

111 
uöt8
 
	md©aOff£t
;

	@dhdutil/include/bcmdefs.h

21 #i‚def 
_bcmdefs_h_


22 
	#_bcmdefs_h_


	)

26 
	#bcmª˛aimed
 0

	)

27 
	#_d©a
 
_d©a


	)

28 
	#_‚
 
_‚


	)

29 
	#_d©a
 
_d©a


	)

30 
	#_‚
 
_‚


	)

31 
	#_‚
 
_‚


	)

32 
	#CONST
 c⁄°

	)

33 
	#BCMFASTPATH


	)

38 
	#_d©a
 
_d©a


	)

39 
	#_‚
 
_‚


	)

40 
	#_‚
 
_‚


	)

41 
	#STATIC
 

	)

44 
	#SI_BUS
 0

	)

45 
	#PCI_BUS
 1

	)

46 
	#PCMCIA_BUS
 2

	)

47 
	#SDIO_BUS
 3

	)

48 
	#JTAG_BUS
 4

	)

49 
	#USB_BUS
 5

	)

50 
	#SPI_BUS
 6

	)

51 
	#RPC_BUS
 7

	)

54 #ifde‡
BCMBUSTYPE


55 
	#BUSTYPE
(
bus
Ë(
BCMBUSTYPE
)

	)

57 
	#BUSTYPE
(
bus
Ë(bus)

	)

61 #ifde‡
BCMCHIPTYPE


62 
	#CHIPTYPE
(
bus
Ë(
BCMCHIPTYPE
)

	)

64 
	#CHIPTYPE
(
bus
Ë(bus)

	)

69 #i‡
deföed
(
BCMSPROMBUS
)

70 
	#SPROMBUS
 (
BCMSPROMBUS
)

	)

71 #ñi‡
deföed
(
SI_PCMCIA_SROM
)

72 
	#SPROMBUS
 (
PCMCIA_BUS
)

	)

74 
	#SPROMBUS
 (
PCI_BUS
)

	)

78 #ifde‡
BCMCHIPID


79 
	#CHIPID
(
chù
Ë(
BCMCHIPID
)

	)

81 
	#CHIPID
(
chù
Ë(chù)

	)

84 #ifde‡
BCMCHIPREV


85 
	#CHIPREV
(
ªv
Ë(
BCMCHIPREV
)

	)

87 
	#CHIPREV
(
ªv
Ë‘ev)

	)

91 
	#DMADDR_MASK_32
 0x0

	)

92 
	#DMADDR_MASK_30
 0xc0000000

	)

93 
	#DMADDR_MASK_0
 0xffffffff

	)

95 
	#DMADDRWIDTH_30
 30

	)

96 
	#DMADDRWIDTH_32
 32

	)

97 
	#DMADDRWIDTH_63
 63

	)

98 
	#DMADDRWIDTH_64
 64

	)

100 #ifde‡
BCMDMA64OSL


102 
uöt32
 
	mlﬂddr
;

103 
uöt32
 
	mhüddr
;

104 } 
	tdma64addr_t
;

106 
dma64addr_t
 
	tdmØddr_t
;

107 
	#PHYSADDRHI
(
_∑
Ë((_∑).
hüddr
)

	)

108 
	#PHYSADDRHISET
(
_∑
, 
_vÆ
) \

110 (
_∑
).
hüddr
 = (
_vÆ
); \

111 } 0)

	)

112 
	#PHYSADDRLO
(
_∑
Ë((_∑).
lﬂddr
)

	)

113 
	#PHYSADDRLOSET
(
_∑
, 
_vÆ
) \

115 (
_∑
).
lﬂddr
 = (
_vÆ
); \

116 } 0)

	)

119 
	tdmØddr_t
;

120 
	#PHYSADDRHI
(
_∑
Ë(0)

	)

121 
	#PHYSADDRHISET
(
_∑
, 
_vÆ
)

	)

122 
	#PHYSADDRLO
(
_∑
Ë((_∑))

	)

123 
	#PHYSADDRLOSET
(
_∑
, 
_vÆ
) \

125 (
_∑
Ë(
_vÆ
); \

126 } 0)

	)

131 
dmØddr_t
 
	maddr
;

132 
uöt32
 
	mÀngth
;

133 } 
	thnddma_£g_t
;

135 
	#MAX_DMA_SEGS
 4

	)

139 *
	moshdmah
;

140 
uöt
 
	m‹igsize
;

141 
uöt
 
	mn£gs
;

142 
hnddma_£g_t
 
	m£gs
[
MAX_DMA_SEGS
];

143 } 
	thnddma_£g_m≠_t
;

148 #i‡
deföed
(
BCM_RPC_NOCOPY
Ë|| deföed(
BCM_RCP_TXNOCOPY
)

150 
	#BCMEXTRAHDROOM
 220

	)

152 
	#BCMEXTRAHDROOM
 172

	)

156 
	#BCMDONGLEHDRSZ
 12

	)

157 
	#BCMDONGLEPADSZ
 16

	)

159 
	#BCMDONGLEOVERHEAD
 (
BCMDONGLEHDRSZ
 + 
BCMDONGLEPADSZ
)

	)

162 #i‡
deföed
(
BCMASSERT_LOG
)

163 
	#BCMASSERT_SUPPORT


	)

167 
	#BITFIELD_MASK
(
width
) \

168 ((()1 << (
width
)Ë- 1)

	)

169 
	#GFIELD
(
vÆ
, 
fõld
) \

170 (((
vÆ
Ë>> 
fõld
 ## 
_S
Ë& fõld ## 
_M
)

	)

171 
	#SFIELD
(
vÆ
, 
fõld
, 
bôs
) \

172 (((
vÆ
Ë& (~(
fõld
 ## 
_M
 << fõld ## 
_S
))) | \

173 (()(
bôs
Ë<< 
fõld
 ## 
_S
))

	)

176 #ifde‡
BCMSMALL


177 #unde‡
BCMSPACE


178 
	#bcm•a˚
 
FALSE


	)

180 
	#BCMSPACE


	)

181 
	#bcm•a˚
 
TRUE


	)

185 
	#MAXSZ_NVRAM_VARS
 4096

	)

187 
	#LOCATOR_EXTERN
 

	)

	@dhdutil/include/bcmdevs.h

22 #i‚def 
_BCMDEVS_H


23 
	#_BCMDEVS_H


	)

26 
	#VENDOR_EPIGRAM
 0x„da

	)

27 
	#VENDOR_BROADCOM
 0x14e4

	)

28 
	#VENDOR_SI_IMAGE
 0x1095

	)

29 
	#VENDOR_TI
 0x104c

	)

30 
	#VENDOR_RICOH
 0x1180

	)

31 
	#VENDOR_JMICRON
 0x197b

	)

35 
	#VENDOR_BROADCOM_PCMCIA
 0x02d0

	)

38 
	#VENDOR_BROADCOM_SDIO
 0x00BF

	)

41 
	#BCM_DNGL_VID
 0x0a5c

	)

42 
	#BCM_DNGL_BL_PID_4328
 0xbd12

	)

43 
	#BCM_DNGL_BL_PID_4322
 0xbd13

	)

44 
	#BCM_DNGL_BL_PID_4319
 0xbd16

	)

45 
	#BCM_DNGL_BL_PID_43236
 0xbd17

	)

46 
	#BCM_DNGL_BL_PID_4332
 0xbd18

	)

47 
	#BCM_DNGL_BL_PID_4330
 0xbd19

	)

48 
	#BCM_DNGL_BL_PID_43239
 0xbd1b

	)

49 
	#BCM_DNGL_BDC_PID
 0x0bdc

	)

50 
	#BCM_DNGL_JTAG_PID
 0x4a44

	)

51 
	#BCM4325_D11DUAL_ID
 0x431b

	)

52 
	#BCM4325_D11G_ID
 0x431c

	)

53 
	#BCM4325_D11A_ID
 0x431d

	)

54 
	#BCM4321_D11N_ID
 0x4328

	)

55 
	#BCM4321_D11N2G_ID
 0x4329

	)

56 
	#BCM4321_D11N5G_ID
 0x432a

	)

57 
	#BCM4322_D11N_ID
 0x432b

	)

58 
	#BCM4322_D11N2G_ID
 0x432c

	)

59 
	#BCM4322_D11N5G_ID
 0x432d

	)

60 
	#BCM4329_D11N_ID
 0x432e

	)

61 
	#BCM4329_D11N2G_ID
 0x432f

	)

62 
	#BCM4329_D11N5G_ID
 0x4330

	)

63 
	#BCM4315_D11DUAL_ID
 0x4334

	)

64 
	#BCM4315_D11G_ID
 0x4335

	)

65 
	#BCM4315_D11A_ID
 0x4336

	)

66 
	#BCM4319_D11N_ID
 0x4337

	)

67 
	#BCM4319_D11N2G_ID
 0x4338

	)

68 
	#BCM4319_D11N5G_ID
 0x4339

	)

69 
	#BCM43231_D11N2G_ID
 0x4340

	)

70 
	#BCM43221_D11N2G_ID
 0x4341

	)

71 
	#BCM43222_D11N_ID
 0x4350

	)

72 
	#BCM43222_D11N2G_ID
 0x4351

	)

73 
	#BCM43222_D11N5G_ID
 0x4352

	)

74 
	#BCM43224_D11N_ID
 0x4353

	)

75 
	#BCM43224_D11N_ID_VEN1
 0x0576

	)

76 
	#BCM43226_D11N_ID
 0x4354

	)

77 
	#BCM43236_D11N_ID
 0x4346

	)

78 
	#BCM43236_D11N2G_ID
 0x4347

	)

79 
	#BCM43236_D11N5G_ID
 0x4348

	)

80 
	#BCM43225_D11N2G_ID
 0x4357

	)

81 
	#BCM43421_D11N_ID
 0xA99D

	)

82 
	#BCM4313_D11N2G_ID
 0x4727

	)

83 
	#BCM4330_D11N_ID
 0x4360

	)

84 
	#BCM4330_D11N2G_ID
 0x4361

	)

85 
	#BCM4330_D11N5G_ID
 0x4362

	)

86 
	#BCM4336_D11N_ID
 0x4343

	)

87 
	#BCM6362_D11N_ID
 0x435f

	)

88 
	#BCM4331_D11N_ID
 0x4331

	)

89 
	#BCM4331_D11N2G_ID
 0x4332

	)

90 
	#BCM4331_D11N5G_ID
 0x4333

	)

91 
	#BCM43237_D11N_ID
 0x4355

	)

92 
	#BCM43237_D11N5G_ID
 0x4356

	)

93 
	#BCM43227_D11N2G_ID
 0x4358

	)

94 
	#BCM43228_D11N_ID
 0x4359

	)

95 
	#BCM43228_D11N5G_ID
 0x435a

	)

96 
	#BCM43362_D11N_ID
 0x4363

	)

97 
	#BCM43239_D11N_ID
 0x4370

	)

100 
	#SDIOH_FPGA_ID
 0x43f2

	)

101 
	#SPIH_FPGA_ID
 0x43f5

	)

102 
	#BCM4710_DEVICE_ID
 0x4710

	)

103 
	#BCM27XX_SDIOH_ID
 0x2702

	)

104 
	#PCIXX21_FLASHMEDIA0_ID
 0x8033

	)

105 
	#PCIXX21_SDIOH0_ID
 0x8034

	)

106 
	#PCIXX21_FLASHMEDIA_ID
 0x803b

	)

107 
	#PCIXX21_SDIOH_ID
 0x803c

	)

108 
	#R5C822_SDIOH_ID
 0x0822

	)

109 
	#JMICRON_SDIOH_ID
 0x2381

	)

112 
	#BCM4306_CHIP_ID
 0x4306

	)

113 
	#BCM4311_CHIP_ID
 0x4311

	)

114 
	#BCM43111_CHIP_ID
 43111

	)

115 
	#BCM43112_CHIP_ID
 43112

	)

116 
	#BCM4312_CHIP_ID
 0x4312

	)

117 
	#BCM4313_CHIP_ID
 0x4313

	)

118 
	#BCM4315_CHIP_ID
 0x4315

	)

119 
	#BCM4318_CHIP_ID
 0x4318

	)

120 
	#BCM4319_CHIP_ID
 0x4319

	)

121 
	#BCM4320_CHIP_ID
 0x4320

	)

122 
	#BCM4321_CHIP_ID
 0x4321

	)

123 
	#BCM4322_CHIP_ID
 0x4322

	)

124 
	#BCM43221_CHIP_ID
 43221

	)

125 
	#BCM43222_CHIP_ID
 43222

	)

126 
	#BCM43224_CHIP_ID
 43224

	)

127 
	#BCM43225_CHIP_ID
 43225

	)

128 
	#BCM43227_CHIP_ID
 43227

	)

129 
	#BCM43228_CHIP_ID
 43228

	)

130 
	#BCM43226_CHIP_ID
 43226

	)

131 
	#BCM43231_CHIP_ID
 43231

	)

132 
	#BCM43234_CHIP_ID
 43234

	)

133 
	#BCM43235_CHIP_ID
 43235

	)

134 
	#BCM43236_CHIP_ID
 43236

	)

135 
	#BCM43237_CHIP_ID
 43237

	)

136 
	#BCM43238_CHIP_ID
 43238

	)

137 
	#BCM43239_CHIP_ID
 43239

	)

138 
	#BCM43420_CHIP_ID
 43420

	)

139 
	#BCM43421_CHIP_ID
 43421

	)

140 
	#BCM43428_CHIP_ID
 43428

	)

141 
	#BCM43431_CHIP_ID
 43431

	)

142 
	#BCM4325_CHIP_ID
 0x4325

	)

143 
	#BCM4328_CHIP_ID
 0x4328

	)

144 
	#BCM4329_CHIP_ID
 0x4329

	)

145 
	#BCM4331_CHIP_ID
 0x4331

	)

146 
	#BCM4336_CHIP_ID
 0x4336

	)

147 
	#BCM43362_CHIP_ID
 43362

	)

148 
	#BCM4330_CHIP_ID
 0x4330

	)

149 
	#BCM4402_CHIP_ID
 0x4402

	)

150 
	#BCM4704_CHIP_ID
 0x4704

	)

151 
	#BCM4710_CHIP_ID
 0x4710

	)

152 
	#BCM4712_CHIP_ID
 0x4712

	)

153 
	#BCM4785_CHIP_ID
 0x4785

	)

154 
	#BCM5350_CHIP_ID
 0x5350

	)

155 
	#BCM5352_CHIP_ID
 0x5352

	)

156 
	#BCM5354_CHIP_ID
 0x5354

	)

157 
	#BCM5365_CHIP_ID
 0x5365

	)

160 
	#BCM4303_PKG_ID
 2

	)

161 
	#BCM4309_PKG_ID
 1

	)

162 
	#BCM4712LARGE_PKG_ID
 0

	)

163 
	#BCM4712SMALL_PKG_ID
 1

	)

164 
	#BCM4712MID_PKG_ID
 2

	)

165 
	#BCM4328USBD11G_PKG_ID
 2

	)

166 
	#BCM4328USBDUAL_PKG_ID
 3

	)

167 
	#BCM4328SDIOD11G_PKG_ID
 4

	)

168 
	#BCM4328SDIODUAL_PKG_ID
 5

	)

169 
	#BCM4329_289PIN_PKG_ID
 0

	)

170 
	#BCM4329_182PIN_PKG_ID
 1

	)

171 
	#BCM5354E_PKG_ID
 1

	)

172 
	#HDLSIM5350_PKG_ID
 1

	)

173 
	#HDLSIM_PKG_ID
 14

	)

174 
	#HWSIM_PKG_ID
 15

	)

	@dhdutil/include/bcmendian.h

25 #i‚de‡
_BCMENDIAN_H_


26 
	#_BCMENDIAN_H_


	)

28 
	~<ty≥defs.h
>

31 
	#BCMSWAP16
(
vÆ
) \

32 ((
uöt16
)((((uöt16)(
vÆ
) & (uint16)0x00ffU) << 8) | \

33 (((
uöt16
)(
vÆ
Ë& (uöt16)0xff00UË>> 8)))

	)

36 
	#BCMSWAP32
(
vÆ
) \

37 ((
uöt32
)((((uöt32)(
vÆ
) & (uint32)0x000000ffU) << 24) | \

38 (((
uöt32
)(
vÆ
) & (uint32)0x0000ff00U) << 8) | \

39 (((
uöt32
)(
vÆ
) & (uint32)0x00ff0000U) >> 8) | \

40 (((
uöt32
)(
vÆ
Ë& (uöt32)0xff000000UË>> 24)))

	)

43 
	#BCMSWAP32BY16
(
vÆ
) \

44 ((
uöt32
)((((uöt32)(
vÆ
) & (uint32)0x0000ffffU) << 16) | \

45 (((
uöt32
)(
vÆ
Ë& (uöt32)0xffff0000UË>> 16)))

	)

48 #i‚de‡
ht⁄16


49 
	#HTON16
(
i
Ë
	`BCMSWAP16
(i)

	)

50 
	#ht⁄16
(
i
Ë
	`bcmsw≠16
(i)

	)

51 
	#HTON32
(
i
Ë
	`BCMSWAP32
(i)

	)

52 
	#ht⁄32
(
i
Ë
	`bcmsw≠32
(i)

	)

53 
	#NTOH16
(
i
Ë
	`BCMSWAP16
(i)

	)

54 
	#¡oh16
(
i
Ë
	`bcmsw≠16
(i)

	)

55 
	#NTOH32
(
i
Ë
	`BCMSWAP32
(i)

	)

56 
	#¡oh32
(
i
Ë
	`bcmsw≠32
(i)

	)

57 
	#LTOH16
(
i
Ë(i)

	)

58 
	#…oh16
(
i
Ë(i)

	)

59 
	#LTOH32
(
i
Ë(i)

	)

60 
	#…oh32
(
i
Ë(i)

	)

61 
	#HTOL16
(
i
Ë(i)

	)

62 
	#htﬁ16
(
i
Ë(i)

	)

63 
	#HTOL32
(
i
Ë(i)

	)

64 
	#htﬁ32
(
i
Ë(i)

	)

67 
	#…oh16_buf
(
buf
, 
i
)

	)

68 
	#htﬁ16_buf
(
buf
, 
i
)

	)

71 
	#lﬂd32_ua
(
a
Ë
	`…oh32_ua
◊)

	)

72 
	#°‹e32_ua
(
a
, 
v
Ë
	`htﬁ32_ua_°‹e
(v,á)

	)

73 
	#lﬂd16_ua
(
a
Ë
	`…oh16_ua
◊)

	)

74 
	#°‹e16_ua
(
a
, 
v
Ë
	`htﬁ16_ua_°‹e
(v,á)

	)

76 
	#_LTOH16_UA
(
˝
Ë((˝)[0] | ((˝)[1] << 8))

	)

77 
	#_LTOH32_UA
(
˝
Ë((˝)[0] | ((˝)[1] << 8Ë| ((˝)[2] << 16Ë| ((˝)[3] << 24))

	)

78 
	#_NTOH16_UA
(
˝
Ë(((˝)[0] << 8Ë| (˝)[1])

	)

79 
	#_NTOH32_UA
(
˝
Ë(((˝)[0] << 24Ë| ((˝)[1] << 16Ë| ((˝)[2] << 8Ë| (˝)[3])

	)

81 
	#…oh_ua
(
±r
) \

82 ((*(
±r
)Ë=(
uöt8
) ? *(const uint8 *)(ptr) : \

83 (*(
±r
)Ë=(
uöt16
Ë? 
	`_LTOH16_UA
((c⁄° 
uöt8
 *)(ptr)) : \

84 (*(
±r
)Ë=(
uöt32
Ë? 
	`_LTOH32_UA
((c⁄° 
uöt8
 *)(ptr)) : \

85 *(
uöt8
 *)0)

	)

87 
	#¡oh_ua
(
±r
) \

88 ((*(
±r
)Ë=(
uöt8
) ? *(const uint8 *)(ptr) : \

89 (*(
±r
)Ë=(
uöt16
Ë? 
	`_NTOH16_UA
((c⁄° 
uöt8
 *)(ptr)) : \

90 (*(
±r
)Ë=(
uöt32
Ë? 
	`_NTOH32_UA
((c⁄° 
uöt8
 *)(ptr)) : \

91 *(
uöt8
 *)0)

	)

93 #ifde‡
__GNUC__


97 
	#bcmsw≠16
(
vÆ
) ({ \

98 
uöt16
 
_vÆ
 = (
vÆ
); \

99 
	`BCMSWAP16
(
_vÆ
); \

100 })

	)

102 
	#bcmsw≠32
(
vÆ
) ({ \

103 
uöt32
 
_vÆ
 = (
vÆ
); \

104 
	`BCMSWAP32
(
_vÆ
); \

105 })

	)

107 
	#bcmsw≠32by16
(
vÆ
) ({ \

108 
uöt32
 
_vÆ
 = (
vÆ
); \

109 
	`BCMSWAP32BY16
(
_vÆ
); \

110 })

	)

112 
	#bcmsw≠16_buf
(
buf
, 
Àn
) ({ \

113 
uöt16
 *
_buf
 = (uöt16 *)(
buf
); \

114 
uöt
 
_wds
 = (
Àn
) / 2; \

115 
_wds
--) { \

116 *
_buf
 = 
	`bcmsw≠16
(*_buf); \

117 
_buf
++; \

119 })

	)

121 
	#htﬁ16_ua_°‹e
(
vÆ
, 
byãs
) ({ \

122 
uöt16
 
_vÆ
 = (
vÆ
); \

123 
uöt8
 *
_byãs
 = (uöt8 *)(
byãs
); \

124 
_byãs
[0] = 
_vÆ
 & 0xff; \

125 
_byãs
[1] = 
_vÆ
 >> 8; \

126 })

	)

128 
	#htﬁ32_ua_°‹e
(
vÆ
, 
byãs
) ({ \

129 
uöt32
 
_vÆ
 = (
vÆ
); \

130 
uöt8
 *
_byãs
 = (uöt8 *)(
byãs
); \

131 
_byãs
[0] = 
_vÆ
 & 0xff; \

132 
_byãs
[1] = (
_vÆ
 >> 8) & 0xff; \

133 
_byãs
[2] = (
_vÆ
 >> 16) & 0xff; \

134 
_byãs
[3] = 
_vÆ
 >> 24; \

135 })

	)

137 
	#ht⁄16_ua_°‹e
(
vÆ
, 
byãs
) ({ \

138 
uöt16
 
_vÆ
 = (
vÆ
); \

139 
uöt8
 *
_byãs
 = (uöt8 *)(
byãs
); \

140 
_byãs
[0] = 
_vÆ
 >> 8; \

141 
_byãs
[1] = 
_vÆ
 & 0xff; \

142 })

	)

144 
	#ht⁄32_ua_°‹e
(
vÆ
, 
byãs
) ({ \

145 
uöt32
 
_vÆ
 = (
vÆ
); \

146 
uöt8
 *
_byãs
 = (uöt8 *)(
byãs
); \

147 
_byãs
[0] = 
_vÆ
 >> 24; \

148 
_byãs
[1] = (
_vÆ
 >> 16) & 0xff; \

149 
_byãs
[2] = (
_vÆ
 >> 8) & 0xff; \

150 
_byãs
[3] = 
_vÆ
 & 0xff; \

151 })

	)

153 
	#…oh16_ua
(
byãs
) ({ \

154 c⁄° 
uöt8
 *
_byãs
 = (c⁄° uöt8 *)(
byãs
); \

155 
	`_LTOH16_UA
(
_byãs
); \

156 })

	)

158 
	#…oh32_ua
(
byãs
) ({ \

159 c⁄° 
uöt8
 *
_byãs
 = (c⁄° uöt8 *)(
byãs
); \

160 
	`_LTOH32_UA
(
_byãs
); \

161 })

	)

163 
	#¡oh16_ua
(
byãs
) ({ \

164 c⁄° 
uöt8
 *
_byãs
 = (c⁄° uöt8 *)(
byãs
); \

165 
	`_NTOH16_UA
(
_byãs
); \

166 })

	)

168 
	#¡oh32_ua
(
byãs
) ({ \

169 c⁄° 
uöt8
 *
_byãs
 = (c⁄° uöt8 *)(
byãs
); \

170 
	`_NTOH32_UA
(
_byãs
); \

171 })

	)

176 
INLINE
 
uöt16


177 
	$bcmsw≠16
(
uöt16
 
vÆ
)

179  
	`BCMSWAP16
(
vÆ
);

180 
	}
}

182 
INLINE
 
uöt32


183 
	$bcmsw≠32
(
uöt32
 
vÆ
)

185  
	`BCMSWAP32
(
vÆ
);

186 
	}
}

188 
INLINE
 
uöt32


189 
	$bcmsw≠32by16
(
uöt32
 
vÆ
)

191  
	`BCMSWAP32BY16
(
vÆ
);

192 
	}
}

197 
INLINE
 

198 
	$bcmsw≠16_buf
(
uöt16
 *
buf
, 
uöt
 
Àn
)

200 
Àn
 =Üen / 2;

202 
Àn
--) {

203 *
buf
 = 
	`bcmsw≠16
(*buf);

204 
buf
++;

206 
	}
}

209 
INLINE
 

210 
	$htﬁ16_ua_°‹e
(
uöt16
 
vÆ
, 
uöt8
 *
byãs
)

212 
byãs
[0] = 
vÆ
 & 0xff;

213 
byãs
[1] = 
vÆ
 >> 8;

214 
	}
}

217 
INLINE
 

218 
	$htﬁ32_ua_°‹e
(
uöt32
 
vÆ
, 
uöt8
 *
byãs
)

220 
byãs
[0] = 
vÆ
 & 0xff;

221 
byãs
[1] = (
vÆ
 >> 8) & 0xff;

222 
byãs
[2] = (
vÆ
 >> 16) & 0xff;

223 
byãs
[3] = 
vÆ
 >> 24;

224 
	}
}

227 
INLINE
 

228 
	$ht⁄16_ua_°‹e
(
uöt16
 
vÆ
, 
uöt8
 *
byãs
)

230 
byãs
[0] = 
vÆ
 >> 8;

231 
byãs
[1] = 
vÆ
 & 0xff;

232 
	}
}

235 
INLINE
 

236 
	$ht⁄32_ua_°‹e
(
uöt32
 
vÆ
, 
uöt8
 *
byãs
)

238 
byãs
[0] = 
vÆ
 >> 24;

239 
byãs
[1] = (
vÆ
 >> 16) & 0xff;

240 
byãs
[2] = (
vÆ
 >> 8) & 0xff;

241 
byãs
[3] = 
vÆ
 & 0xff;

242 
	}
}

245 
INLINE
 
uöt16


246 
	$…oh16_ua
(c⁄° *
byãs
)

248  
	`_LTOH16_UA
((c⁄° 
uöt8
 *)
byãs
);

249 
	}
}

252 
INLINE
 
uöt32


253 
	$…oh32_ua
(c⁄° *
byãs
)

255  
	`_LTOH32_UA
((c⁄° 
uöt8
 *)
byãs
);

256 
	}
}

259 
INLINE
 
uöt16


260 
	$¡oh16_ua
(c⁄° *
byãs
)

262  
	`_NTOH16_UA
((c⁄° 
uöt8
 *)
byãs
);

263 
	}
}

266 
INLINE
 
uöt32


267 
	$¡oh32_ua
(c⁄° *
byãs
)

269  
	`_NTOH32_UA
((c⁄° 
uöt8
 *)
byãs
);

270 
	}
}

	@dhdutil/include/bcmutils.h

22 #i‚def 
_bcmutûs_h_


23 
	#_bcmutûs_h_


	)

25 
	~<°ddef.h
>

27 
	#bcm_°r˝y_s
(
d°
, 
noOfEÀmíts
, 
§c
Ë
	`°r˝y
((d°), (§c))

	)

28 
	#bcm_°∫˝y_s
(
d°
, 
noOfEÀmíts
, 
§c
, 
cou¡
Ë
	`°∫˝y
((d°), (§c), (cou¡))

	)

29 
	#bcm_°rˇt_s
(
d°
, 
noOfEÀmíts
, 
§c
Ë
	`°rˇt
((d°), (§c))

	)

31 #ifde‡
__˝lu•lus


36 
	#_BCM_U
 0x01

	)

37 
	#_BCM_L
 0x02

	)

38 
	#_BCM_D
 0x04

	)

39 
	#_BCM_C
 0x08

	)

40 
	#_BCM_P
 0x10

	)

41 
	#_BCM_S
 0x20

	)

42 
	#_BCM_X
 0x40

	)

43 
	#_BCM_SP
 0x80

	)

45 c⁄° 
bcm_˘y≥
[];

46 
	#bcm_ismask
(
x
Ë(
bcm_˘y≥
[()()(x)])

	)

48 
	#bcm_iß um
(
c
Ë((
	`bcm_ismask
(c)&(
_BCM_U
|
_BCM_L
|
_BCM_D
)Ë!0)

	)

49 
	#bcm_ißÕha
(
c
Ë((
	`bcm_ismask
(c)&(
_BCM_U
|
_BCM_L
)Ë!0)

	)

50 
	#bcm_is˙ål
(
c
Ë((
	`bcm_ismask
(c)&(
_BCM_C
)Ë!0)

	)

51 
	#bcm_isdigô
(
c
Ë((
	`bcm_ismask
(c)&(
_BCM_D
)Ë!0)

	)

52 
	#bcm_isgøph
(
c
Ë((
	`bcm_ismask
(c)&(
_BCM_P
|
_BCM_U
|
_BCM_L
|
_BCM_D
)Ë!0)

	)

53 
	#bcm_i¶owî
(
c
Ë((
	`bcm_ismask
(c)&(
_BCM_L
)Ë!0)

	)

54 
	#bcm_i•röt
(
c
Ë((
	`bcm_ismask
(c)&(
_BCM_P
|
_BCM_U
|
_BCM_L
|
_BCM_D
|
_BCM_SP
)Ë!0)

	)

55 
	#bcm_i•un˘
(
c
Ë((
	`bcm_ismask
(c)&(
_BCM_P
)Ë!0)

	)

56 
	#bcm_is•a˚
(
c
Ë((
	`bcm_ismask
(c)&(
_BCM_S
)Ë!0)

	)

57 
	#bcm_isuµî
(
c
Ë((
	`bcm_ismask
(c)&(
_BCM_U
)Ë!0)

	)

58 
	#bcm_isxdigô
(
c
Ë((
	`bcm_ismask
(c)&(
_BCM_D
|
_BCM_X
)Ë!0)

	)

59 
	#bcm_tﬁowî
(
c
Ë(
	`bcm_isuµî
((c)Ë? ((cË+ 'a' - 'A'Ë: (c))

	)

60 
	#bcm_touµî
(
c
Ë(
	`bcm_i¶owî
((c)Ë? ((cË+ 'A' - 'a'Ë: (c))

	)

64 
	sbcm°rbuf
 {

65 *
	gbuf
;

66 
	gsize
;

67 *
	g‹igbuf
;

68 
	g‹igsize
;

72 #ifde‡
BCMDRIVER


73 
	~<o¶.h
>

75 
	#GPIO_PIN_NOTDEFINED
 0x20

	)

78 
	#SPINWAIT
(
exp
, 
us
) { \

79 
uöt
 
cou¡down
 = (
us
) + 9; \

80 (
exp
Ë&& (
cou¡down
 >= 10)) {\

81 
	`OSL_DELAY
(10); \

82 
cou¡down
 -= 10; \

84 }

	)

87 #i‚de‡
PKTQ_LEN_DEFAULT


88 
	#PKTQ_LEN_DEFAULT
 128

	)

90 #i‚de‡
PKTQ_MAX_PREC


91 
	#PKTQ_MAX_PREC
 16

	)

94 
	spktq_¥ec
 {

95 *
	ghód
;

96 *
	gèû
;

97 
uöt16
 
	gÀn
;

98 
uöt16
 
	gmax
;

99 } 
	tpktq_¥ec_t
;

103 
	spktq
 {

104 
uöt16
 
	gnum_¥ec
;

105 
uöt16
 
	ghi_¥ec
;

106 
uöt16
 
	gmax
;

107 
uöt16
 
	gÀn
;

109 
pktq_¥ec
 
	gq
[
PKTQ_MAX_PREC
];

113 
	s•ktq
 {

114 
uöt16
 
	gnum_¥ec
;

115 
uöt16
 
	ghi_¥ec
;

116 
uöt16
 
	gmax
;

117 
uöt16
 
	gÀn
;

119 
pktq_¥ec
 
	gq
[1];

122 
	#PKTQ_PREC_ITER
(
pq
, 
¥ec
Ë¥e¯’q)->
num_¥ec
 - 1;Öª¯>0;Öªc--)

	)

125 
boﬁ
 (*
	tiÂkt_cb_t
)(*, );

127 #ifde‡
BCMPKTPOOL


128 
	#POOL_ENAB
(
poﬁ
Ë(’oﬁË&& (poﬁ)->
öôed
)

	)

129 #i‡
deföed
(
BCM4329C0
)

130 
	#SHARED_POOL
 (
pkçoﬁ_sh¨ed_±r
)

	)

132 
	#SHARED_POOL
 (
pkçoﬁ_sh¨ed
)

	)

135 
	#POOL_ENAB
(
bus
Ë0

	)

136 
	#SHARED_POOL
 ((
pkçoﬁ
 *)
NULL
)

	)

139 
	#PKTPOOL_LEN_MAX
 40

	)

140 
	#PKTPOOL_CB_MAX
 3

	)

142 
	gpkçoﬁ
;

143 (*
	gpkçoﬁ_cb_t
)(
	tpkçoﬁ
 *
	tpoﬁ
, *
	t¨g
);

145 
pkçoﬁ_cb_t
 
	gcb
;

146 *
	g¨g
;

147 } 
	tpkçoﬁ_cböfo_t
;

149 #ifde‡
BCMDBG_POOL


151 
	#POOL_IDLE
 0

	)

152 
	#POOL_RXFILL
 1

	)

153 
	#POOL_RXDH
 2

	)

154 
	#POOL_RXD11
 3

	)

155 
	#POOL_TXDH
 4

	)

156 
	#POOL_TXD11
 5

	)

157 
	#POOL_AMPDU
 6

	)

158 
	#POOL_TXENQ
 7

	)

161 *
	gp
;

162 
uöt32
 
	gcy˛es
;

163 
uöt32
 
	gdur
;

164 } 
	tpkçoﬁ_dbg_t
;

167 
uöt8
 
	gtxdh
;

168 
uöt8
 
	gtxd11
;

169 
uöt8
 
	gíq
;

170 
uöt8
 
	grxdh
;

171 
uöt8
 
	grxd11
;

172 
uöt8
 
	grxfûl
;

173 
uöt8
 
	gidÀ
;

174 } 
	tpkçoﬁ_°©s_t
;

177 
	spkçoﬁ
 {

178 
boﬁ
 
	göôed
;

179 
uöt16
 
	gr
;

180 
uöt16
 
	gw
;

181 
uöt16
 
	gÀn
;

182 
uöt16
 
	gmaxÀn
;

183 
uöt16
 
	g∂í
;

184 
boﬁ
 
	gi°x
;

185 
boﬁ
 
	gem±y
;

186 
uöt8
 
	gcbtoggÀ
;

187 
uöt8
 
	gcb˙t
;

188 
uöt8
 
	gecb˙t
;

189 
boﬁ
 
	gem±ycb_dißbÀ
;

190 
pkçoﬁ_cböfo_t
 
	gcbs
[
PKTPOOL_CB_MAX
];

191 
pkçoﬁ_cböfo_t
 
	gecbs
[
PKTPOOL_CB_MAX
];

192 *
	gq
[
PKTPOOL_LEN_MAX
 + 1];

194 #ifde‡
BCMDBG_POOL


195 
uöt8
 
	gdbg_cb˙t
;

196 
pkçoﬁ_cböfo_t
 
	gdbg_cbs
[
PKTPOOL_CB_MAX
];

197 
uöt16
 
	gdbg_qÀn
;

198 
pkçoﬁ_dbg_t
 
	gdbg_q
[
PKTPOOL_LEN_MAX
 + 1];

200 } 
	tpkçoﬁ_t
;

202 #i‡
deföed
(
BCM4329C0
)

203 
pkçoﬁ_t
 *
pkçoﬁ_sh¨ed_±r
;

205 
pkçoﬁ_t
 *
pkçoﬁ_sh¨ed
;

208 
pkçoﬁ_öô
(
o¶_t
 *
osh
, 
pkçoﬁ_t
 *
pkç
, *
pkçÀn
, 
∂í
, 
boﬁ
 
i°x
);

209 
pkçoﬁ_deöô
(
o¶_t
 *
osh
, 
pkçoﬁ_t
 *
pkç
);

210 
pkçoﬁ_fûl
(
o¶_t
 *
osh
, 
pkçoﬁ_t
 *
pkç
, 
boﬁ
 
möimÆ
);

211 * 
pkçoﬁ_gë
(
pkçoﬁ_t
 *
pkç
);

212 
pkçoﬁ_‰ì
(
pkçoﬁ_t
 *
pkç
, *
p
);

213 
pkçoﬁ_add
(
pkçoﬁ_t
 *
pkç
, *
p
);

214 
uöt16
 
pkçoﬁ_avaû
(
pkçoﬁ_t
 *
pkç
);

215 
pkçoﬁ_avaû_ªgi°î
(
pkçoﬁ_t
 *
pkç
, 
pkçoﬁ_cb_t
 
cb
, *
¨g
);

216 
pkçoﬁ_em±y_ªgi°î
(
pkçoﬁ_t
 *
pkç
, 
pkçoﬁ_cb_t
 
cb
, *
¨g
);

217 
pkçoﬁ_£tmaxÀn
(
pkçoﬁ_t
 *
pkç
, 
uöt16
 
maxÀn
);

218 
pkçoﬁ_em±ycb_dißbÀ
(
pkçoﬁ_t
 *
pkç
, 
boﬁ
 
dißbÀ
);

220 
	#POOLPTR
(
µ
Ë((
pkçoﬁ_t
 *)’p))

	)

221 
	#pkçoﬁ_Àn
(
µ
Ë(
	`POOLPTR
’p)->
Àn
 - 1)

	)

222 
	#pkçoﬁ_∂í
(
µ
Ë(
	`POOLPTR
’p)->
∂í
)

	)

223 
	#pkçoﬁ_maxÀn
(
µ
Ë(
	`POOLPTR
’p)->
maxÀn
)

	)

225 #ifde‡
BCMDBG_POOL


226 
pkçoﬁ_dbg_ªgi°î
(
pkçoﬁ_t
 *
pkç
, 
pkçoﬁ_cb_t
 
cb
, *
¨g
);

227 
pkçoﬁ_°¨t_åiggî
(
pkçoﬁ_t
 *
pkç
, *
p
);

228 
pkçoﬁ_dbg_dump
(
pkçoﬁ_t
 *
pkç
);

229 
pkçoﬁ_dbg_nŸify
(
pkçoﬁ_t
 *
pkç
);

230 
pkçoﬁ_°©s_dump
(
pkçoﬁ_t
 *
pkç
, 
pkçoﬁ_°©s_t
 *
°©s
);

235 
	gëhî_addr
;

237 
ëhî_isbˇ°
(c⁄° *
ó
);

238 
ëhî_i¢uŒaddr
(c⁄° *
ó
);

242 
	#pktq_p£tmax
(
pq
, 
¥ec
, 
_max
Ë(’q)->
q
[¥ec].
max
 = (_max))

	)

243 
	#pktq_∂í
(
pq
, 
¥ec
Ë(’q)->
q
[¥ec].
Àn
)

	)

244 
	#pktq_∑vaû
(
pq
, 
¥ec
Ë(’q)->
q
[¥ec].
max
 - (pq)->q[¥ec].
Àn
)

	)

245 
	#pktq_pfuŒ
(
pq
, 
¥ec
Ë(’q)->
q
[¥ec].
Àn
 >’q)->q[¥ec].
max
)

	)

246 
	#pktq_≥m±y
(
pq
, 
¥ec
Ë(’q)->
q
[¥ec].
Àn
 =0)

	)

248 
	#pktq_µìk
(
pq
, 
¥ec
Ë(’q)->
q
[¥ec].
hód
)

	)

249 
	#pktq_µìk_èû
(
pq
, 
¥ec
Ë(’q)->
q
[¥ec].
èû
)

	)

251 *
pktq_≥nq
(
pktq
 *
pq
, 
¥ec
, *
p
);

252 *
pktq_≥nq_hód
(
pktq
 *
pq
, 
¥ec
, *
p
);

253 *
pktq_pdeq
(
pktq
 *
pq
, 
¥ec
);

254 *
pktq_pdeq_èû
(
pktq
 *
pq
, 
¥ec
);

256 
pktq_pÊush
(
o¶_t
 *
osh
, 
pktq
 *
pq
, 
¥ec
, 
boﬁ
 
dú
,

257 
iÂkt_cb_t
 
‚
, 
¨g
);

259 
boﬁ
 
pktq_pdñ
(
pktq
 *
pq
, *
p
, 
¥ec
);

263 
pktq_mÀn
(
pktq
 *
pq
, 
uöt
 
¥ec_bmp
);

264 *
pktq_mdeq
(
pktq
 *
pq
, 
uöt
 
¥ec_bmp
, *
¥ec_out
);

268 
	#pktq_Àn
(
pq
Ë(()’q)->
Àn
)

	)

269 
	#pktq_max
(
pq
Ë(()’q)->
max
)

	)

270 
	#pktq_avaû
(
pq
Ë(()(’q)->
max
 - (pq)->
Àn
))

	)

271 
	#pktq_fuŒ
(
pq
Ë(’q)->
Àn
 >’q)->
max
)

	)

272 
	#pktq_em±y
(
pq
Ë(’q)->
Àn
 =0)

	)

275 
	#pkãnq
(
pq
, 
p
Ë
	`pktq_≥nq
(((
pktq
 *Ìq), 0, (p))

	)

276 
	#pkãnq_hód
(
pq
, 
p
Ë
	`pktq_≥nq_hód
(((
pktq
 *Ìq), 0, (p))

	)

277 
	#pktdeq
(
pq
Ë
	`pktq_pdeq
(((
pktq
 *Ìq), 0)

	)

278 
	#pktdeq_èû
(
pq
Ë
	`pktq_pdeq_èû
(((
pktq
 *Ìq), 0)

	)

279 
	#pktqöô
(
pq
, 
Àn
Ë
	`pktq_öô
(((
pktq
 *Ìq), 1,Üí)

	)

281 
pktq_öô
(
pktq
 *
pq
, 
num_¥ec
, 
max_Àn
);

283 *
pktq_deq
(
pktq
 *
pq
, *
¥ec_out
);

284 *
pktq_deq_èû
(
pktq
 *
pq
, *
¥ec_out
);

285 *
pktq_≥ek
(
pktq
 *
pq
, *
¥ec_out
);

286 *
pktq_≥ek_èû
(
pktq
 *
pq
, *
¥ec_out
);

287 
pktq_Êush
(
o¶_t
 *
osh
, 
pktq
 *
pq
, 
boﬁ
 
dú
, 
iÂkt_cb_t
 
‚
, 
¨g
);

291 
uöt
 
pktc›y
(
o¶_t
 *
osh
, *
p
, uöà
off£t
, 
Àn
, 
uch¨
 *
buf
);

292 
uöt
 
pkt‰ombuf
(
o¶_t
 *
osh
, *
p
, uöà
off£t
, 
Àn
, 
uch¨
 *
buf
);

293 
uöt
 
pkâŸÀn
(
o¶_t
 *
osh
, *
p
);

294 *
pkéa°
(
o¶_t
 *
osh
, *
p
);

295 
uöt
 
pkt£g˙t
(
o¶_t
 *
osh
, *
p
);

298 
uöt
 
pkt£çrio
(*
pkt
, 
boﬁ
 
upd©e_vèg
);

299 
	#PKTPRIO_VDSCP
 0x100

	)

300 
	#PKTPRIO_VLAN
 0x200

	)

301 
	#PKTPRIO_UPD
 0x400

	)

302 
	#PKTPRIO_DSCP
 0x800

	)

305 
bcm_©oi
(*
s
);

306 
ul⁄g
 
bcm_°πoul
(*
˝
, **
ídp
, 
uöt
 
ba£
);

307 *
bcm°r°r
(*
hay°ack
, *
√edÀ
);

308 *
bcm°rˇt
(*
de°
, c⁄° *
§c
);

309 *
bcm°∫ˇt
(*
de°
, c⁄° *
§c
, 
uöt
 
size
);

310 
ul⁄g
 
wch¨2ascii
(*
abuf
, 
ush‹t
 *
wbuf
, ush‹à
wbuÊí
, ul⁄g 
abuÊí
);

311 * 
bcm°πok
(**
°rög
, c⁄° *
dñimôîs
, *
tokdñim
);

312 
bcm°ricmp
(c⁄° *
s1
, c⁄° *
s2
);

313 
bcm°∫icmp
(c⁄° * 
s1
, c⁄° * 
s2
, 
˙t
);

317 *
bcm_ëhî_¡ﬂ
(c⁄° 
ëhî_addr
 *
ó
, *
buf
);

318 
bcm_ëhî_©€
(*
p
, 
ëhî_addr
 *
ó
);

321 
	gùv4_addr
;

322 *
bcm_ù_¡ﬂ
(
ùv4_addr
 *
ü
, *
buf
);

325 
bcm_mdñay
(
uöt
 
ms
);

327 *
gëv¨
(*
v¨s
, c⁄° *
«me
);

328 
gëötv¨
(*
v¨s
, c⁄° *
«me
);

329 
gëötv¨¨øy
(*
v¨s
, c⁄° *
«me
, 
ödex
);

330 
gëötv¨¨øysize
(*
v¨s
, c⁄° *
«me
);

331 
uöt
 
gëgpi›ö
(*
v¨s
, *
pö_«me
, uöà
def_pö
);

332 
	#bcm_≥rf_íabÀ
()

	)

333 
	#bcm°©s
(
fmt
)

	)

334 
	#bcmlog
(
fmt
, 
a1
, 
a2
)

	)

335 
	#bcmdum∂og
(
buf
, 
size
Ë*bu‡'\0'

	)

336 
	#bcmdum∂ogít
(
buf
, 
idx
Ë-1

	)

338 
	#bcmt¶og
(
t°amp
, 
fmt
, 
a1
, 
a2
)

	)

339 
	#bcm¥öâ¶ogs
()

	)

340 
	#bcm¥öâ°amp
(
us
)

	)

342 *
bcm_nvøm_v¨s
(
uöt
 *
Àngth
);

343 
bcm_nvøm_ˇche
(*
sih
);

348 
	sbcm_iov¨
 {

349 c⁄° *
	g«me
;

350 
uöt16
 
	gv¨id
;

351 
uöt16
 
	gÊags
;

352 
uöt16
 
	gty≥
;

353 
uöt16
 
	gmöÀn
;

354 } 
	tbcm_iov¨_t
;

359 
	#IOV_GET
 0

	)

360 
	#IOV_SET
 1

	)

363 
	#IOV_GVAL
(
id
Ë((id)*2)

	)

364 
	#IOV_SVAL
(
id
Ë(((id)*2)+
IOV_SET
)

	)

365 
	#IOV_ISSET
(
a˘i⁄id
Ë(◊˘i⁄id & 
IOV_SET
Ë=IOV_SET)

	)

366 
	#IOV_ID
(
a˘i⁄id
Ë◊˘i⁄id >> 1)

	)

370 c⁄° 
bcm_iov¨_t
 *
bcm_iov¨_lookup
(c⁄° bcm_iov¨_à*
èbÀ
, c⁄° *
«me
);

371 
bcm_iov¨_Àncheck
(c⁄° 
bcm_iov¨_t
 *
èbÀ
, *
¨g
, 
Àn
, 
boﬁ
 
£t
);

372 #i‡
deföed
(
WLTINYDUMP
Ë|| deföed(
WLMSG_INFORM
Ë|| deföed(
WLMSG_ASSOC
) || \

373 
deföed
(
WLMSG_PRPKT
Ë|| deföed(
WLMSG_WSEC
)

374 
bcm_f‹m©_ssid
(* 
buf
, c⁄° 
uch¨
 
ssid
[], 
uöt
 
ssid_Àn
);

379 
	#IOVT_VOID
 0

	)

380 
	#IOVT_BOOL
 1

	)

381 
	#IOVT_INT8
 2

	)

382 
	#IOVT_UINT8
 3

	)

383 
	#IOVT_INT16
 4

	)

384 
	#IOVT_UINT16
 5

	)

385 
	#IOVT_INT32
 6

	)

386 
	#IOVT_UINT32
 7

	)

387 
	#IOVT_BUFFER
 8

	)

388 
	#BCM_IOVT_VALID
(
ty≥
Ë((()—y≥)Ë<
IOVT_BUFFER
)

	)

391 
	#BCM_IOV_TYPE_INIT
 { \

401 "" }

	)

403 
	#BCM_IOVT_IS_INT
(
ty≥
) (\

404 (
ty≥
 =
IOVT_BOOL
) || \

405 (
ty≥
 =
IOVT_INT8
) || \

406 (
ty≥
 =
IOVT_UINT8
) || \

407 (
ty≥
 =
IOVT_INT16
) || \

408 (
ty≥
 =
IOVT_UINT16
) || \

409 (
ty≥
 =
IOVT_INT32
) || \

410 (
ty≥
 =
IOVT_UINT32
))

	)

414 
	#BCME_STRLEN
 64

	)

415 
	#VALID_BCMERROR
(
e
Ë(” <0Ë&& (ê>
BCME_LAST
))

	)

420 
	#BCME_OK
 0

	)

421 
	#BCME_ERROR
 -1

	)

422 
	#BCME_BADARG
 -2

	)

423 
	#BCME_BADOPTION
 -3

	)

424 
	#BCME_NOTUP
 -4

	)

425 
	#BCME_NOTDOWN
 -5

	)

426 
	#BCME_NOTAP
 -6

	)

427 
	#BCME_NOTSTA
 -7

	)

428 
	#BCME_BADKEYIDX
 -8

	)

429 
	#BCME_RADIOOFF
 -9

	)

430 
	#BCME_NOTBANDLOCKED
 -10

	)

431 
	#BCME_NOCLK
 -11

	)

432 
	#BCME_BADRATESET
 -12

	)

433 
	#BCME_BADBAND
 -13

	)

434 
	#BCME_BUFTOOSHORT
 -14

	)

435 
	#BCME_BUFTOOLONG
 -15

	)

436 
	#BCME_BUSY
 -16

	)

437 
	#BCME_NOTASSOCIATED
 -17

	)

438 
	#BCME_BADSSIDLEN
 -18

	)

439 
	#BCME_OUTOFRANGECHAN
 -19

	)

440 
	#BCME_BADCHAN
 -20

	)

441 
	#BCME_BADADDR
 -21

	)

442 
	#BCME_NORESOURCE
 -22

	)

443 
	#BCME_UNSUPPORTED
 -23

	)

444 
	#BCME_BADLEN
 -24

	)

445 
	#BCME_NOTREADY
 -25

	)

446 
	#BCME_EPERM
 -26

	)

447 
	#BCME_NOMEM
 -27

	)

448 
	#BCME_ASSOCIATED
 -28

	)

449 
	#BCME_RANGE
 -29

	)

450 
	#BCME_NOTFOUND
 -30

	)

451 
	#BCME_WME_NOT_ENABLED
 -31

	)

452 
	#BCME_TSPEC_NOTFOUND
 -32

	)

453 
	#BCME_ACM_NOTSUPPORTED
 -33

	)

454 
	#BCME_NOT_WME_ASSOCIATION
 -34

	)

455 
	#BCME_SDIO_ERROR
 -35

	)

456 
	#BCME_DONGLE_DOWN
 -36

	)

457 
	#BCME_VERSION
 -37

	)

458 
	#BCME_TXFAIL
 -38

	)

459 
	#BCME_RXFAIL
 -39

	)

460 
	#BCME_NODEVICE
 -40

	)

461 
	#BCME_NMODE_DISABLED
 -41

	)

462 
	#BCME_NONRESIDENT
 -42

	)

463 
	#BCME_LAST
 
BCME_NONRESIDENT


	)

466 
	#BCMERRSTRINGTABLE
 { \

510 }

	)

512 #i‚de‡
ABS


513 
	#ABS
(
a
Ë((◊Ë< 0)?-◊):◊))

	)

516 #i‚de‡
MIN


517 
	#MIN
(
a
, 
b
Ë((◊Ë< (b))?◊):(b))

	)

520 #i‚de‡
MAX


521 
	#MAX
(
a
, 
b
Ë((◊Ë> (b))?◊):(b))

	)

524 
	#CEIL
(
x
, 
y
Ë(((xË+ ((y)-1)Ë/ (y))

	)

525 
	#ROUNDUP
(
x
, 
y
Ë((((x)+((y)-1))/(y))*(y))

	)

526 
	#ISALIGNED
(
a
, 
x
Ë(((
uöçå
)◊Ë& ((x)-1)Ë=0)

	)

527 
	#ALIGN_ADDR
(
addr
, 
bound¨y
Ë(*)(((
uöçå
)(addr) + (boundary) - 1) \

528 & ~((
bound¨y
Ë- 1))

	)

529 
	#ISPOWEROF2
(
x
Ë((((x)-1)&(x)Ë=0)

	)

530 
	#VALID_MASK
(
mask
Ë!((maskË& ((maskË+ 1))

	)

531 #i‚de‡
OFFSETOF


532 
	#OFFSETOF
(
ty≥
, 
membî
Ë((
uöt
)
	`off£tof
—y≥, membî))

	)

534 #i‚de‡
ARRAYSIZE


535 
	#ARRAYSIZE
(
a
Ë(◊)/◊[0]))

	)

539 *
_bcmutûs_dummy_‚
;

540 
	#REFERENCE_FUNCTION
(
f
Ë(
_bcmutûs_dummy_‚
 = (*)(f))

	)

543 #i‚de‡
£tbô


544 #i‚de‡
NBBY


545 
	#NBBY
 8

	)

547 
	#£tbô
(
a
, 
i
Ë(((
uöt8
 *Ô)[(i)/
NBBY
] |1<<((i)%NBBY))

	)

548 
	#˛rbô
(
a
, 
i
Ë(((
uöt8
 *Ô)[(i)/
NBBY
] &~(1<<((i)%NBBY)))

	)

549 
	#is£t
(
a
, 
i
Ë(((c⁄° 
uöt8
 *Ô)[(i)/
NBBY
] & (1<<((i)%NBBY)))

	)

550 
	#is˛r
(
a
, 
i
Ë((((c⁄° 
uöt8
 *Ô)[(i)/
NBBY
] & (1<<((i)%NBBY))Ë=0)

	)

553 
	#NBITS
(
ty≥
Ë(—y≥Ë* 8)

	)

554 
	#NBITVAL
(
nbôs
Ë(1 << (nbôs))

	)

555 
	#MAXBITVAL
(
nbôs
Ë((1 << (nbôs)Ë- 1)

	)

556 
	#NBITMASK
(
nbôs
Ë
	`MAXBITVAL
“bôs)

	)

557 
	#MAXNBVAL
(
nbyã
Ë
	`MAXBITVAL
(“byãË* 8)

	)

560 
	#MUX
(
¥ed
, 
åue
, 
Ál£
Ë(’ªdË? (åueË: (Ál£))

	)

563 
	#MODDEC
(
x
, 
bound
Ë
	`MUX
((xË=0, (boundË- 1, (xË- 1)

	)

564 
	#MODINC
(
x
, 
bound
Ë
	`MUX
((xË=(boundË- 1, 0, (xË+ 1)

	)

567 
	#MODDEC_POW2
(
x
, 
bound
Ë(((xË- 1Ë& ((boundË- 1))

	)

568 
	#MODINC_POW2
(
x
, 
bound
Ë(((xË+ 1Ë& ((boundË- 1))

	)

571 
	#MODADD
(
x
, 
y
, 
bound
) \

572 
	`MUX
((
x
Ë+ (
y
Ë>(
bound
), (xË+ (yË- (bound), (xË+ (y))

	)

573 
	#MODSUB
(
x
, 
y
, 
bound
) \

574 
	`MUX
((()(
x
)Ë- (()(
y
)Ë< 0, (xË- (yË+ (
bound
), (xË- (y))

	)

577 
	#MODADD_POW2
(
x
, 
y
, 
bound
Ë(((xË+ (y)Ë& ((boundË- 1))

	)

578 
	#MODSUB_POW2
(
x
, 
y
, 
bound
Ë(((xË- (y)Ë& ((boundË- 1))

	)

581 
	#CRC8_INIT_VALUE
 0xff

	)

582 
	#CRC8_GOOD_VALUE
 0x9f

	)

583 
	#CRC16_INIT_VALUE
 0xffff

	)

584 
	#CRC16_GOOD_VALUE
 0xf0b8

	)

585 
	#CRC32_INIT_VALUE
 0xffffffff

	)

586 
	#CRC32_GOOD_VALUE
 0xdebb20e3

	)

589 
	sbcm_bô_desc
 {

590 
uöt32
 
	gbô
;

591 c⁄° * 
	g«me
;

592 } 
	tbcm_bô_desc_t
;

595 
	sbcm_év
 {

596 
uöt8
 
	gid
;

597 
uöt8
 
	gÀn
;

598 
uöt8
 
	gd©a
[1];

599 } 
	tbcm_év_t
;

602 
	#bcm_vÆid_év
(
ñt
, 
buÊí
Ë((buÊíË>2 && ()(buÊíË>()(2 + (ñt)->
Àn
))

	)

605 
	#ETHER_ADDR_STR_LEN
 18

	)

609 
INLINE
 

610 
x‹_128bô_block
(c⁄° 
uöt8
 *
§c1
, c⁄° uöt8 *
§c2
, uöt8 *
d°
)

613 #ifde‡
__i386__


616 (((
	guöçå
)
	g§c1
 | (uöçå)
	g§c2
 | (uöçå)
	gd°
) & 3) == 0) {

619 ((
uöt32
 *)
d°
)[0] = ((c⁄° uöt32 *)
§c1
)[0] ^ ((c⁄° uöt32 *)
§c2
)[0];

620 ((
	guöt32
 *)
	gd°
)[1] = ((c⁄° 
uöt32
 *)
§c1
)[1] ^ ((c⁄° uöt32 *)
§c2
)[1];

621 ((
	guöt32
 *)
	gd°
)[2] = ((c⁄° 
uöt32
 *)
§c1
)[2] ^ ((c⁄° uöt32 *)
§c2
)[2];

622 ((
	guöt32
 *)
	gd°
)[3] = ((c⁄° 
uöt32
 *)
§c1
)[3] ^ ((c⁄° uöt32 *)
§c2
)[3];

625 
	gk
;

626 
	gk
 = 0; k < 16; k++)

627 
	gd°
[
k
] = 
§c1
[k] ^ 
§c2
[k];

633 
uöt8
 
hnd¸c8
(uöt8 *
p
, 
uöt
 
nbyãs
, uöt8 
¸c
);

634 
uöt16
 
hnd¸c16
(
uöt8
 *
p
, 
uöt
 
nbyãs
, uöt16 
¸c
);

635 
uöt32
 
hnd¸c32
(
uöt8
 *
p
, 
uöt
 
nbyãs
, uöt32 
¸c
);

637 #i‡
deföed
(
DHD_DEBUG
Ë|| deföed(
WLMSG_PRHDRS
Ë|| deföed(
WLMSG_PRPKT
) || \

638 
deföed
(
WLMSG_ASSOC
)

639 
bcm_f‹m©_Êags
(c⁄° 
bcm_bô_desc_t
 *
bd
, 
uöt32
 
Êags
, * 
buf
, 
Àn
);

642 #i‡
deföed
(
DHD_DEBUG
Ë|| deföed(
WLMSG_PRHDRS
Ë|| deföed(
WLMSG_PRPKT
) || \

643 
deföed
(
WLMSG_ASSOC
Ë|| deföed(
WLMEDIA_PEAKRATE
)

644 
bcm_f‹m©_hex
(*
°r
, c⁄° *
byãs
, 
Àn
);

647 c⁄° *
bcm_¸y±o_Ægo_«me
(
uöt
 
Ægo
);

648 *
bcm_chù«me
(
uöt
 
chùid
, *
buf
, uöà
Àn
);

649 *
bcm_bªv_°r
(
uöt32
 
bªv
, *
buf
);

650 
¥ötbig
(*
buf
);

651 
¥hex
(c⁄° *
msg
, 
uch¨
 *
buf
, 
uöt
 
Àn
);

654 
bcm_év_t
 *
bcm_√xt_év
(bcm_év_à*
ñt
, *
buÊí
);

655 
bcm_év_t
 *
bcm_∑r£_évs
(*
buf
, 
buÊí
, 
uöt
 
key
);

656 
bcm_év_t
 *
bcm_∑r£_‹dîed_évs
(*
buf
, 
buÊí
, 
uöt
 
key
);

659 c⁄° *
bcmîr‹°r
(
bcmîr‹
);

662 
uöt32
 
	tmboﬁ
;

663 
	#mboﬁ£t
(
mb
, 
bô
Ë((mbË|(bô))

	)

664 
	#mboﬁ˛r
(
mb
, 
bô
Ë((mbË&~(bô))

	)

665 
	#mboﬁis£t
(
mb
, 
bô
Ë(((mbË& (bô)Ë!0)

	)

666 
	#mboﬁmask£t
(
mb
, 
mask
, 
vÆ
Ë((mbË(((mbË& ~(mask)Ë| (vÆ)))

	)

669 
uöt16
 
bcm_qdbm_to_mw
(
uöt8
 
qdbm
);

670 
uöt8
 
bcm_mw_to_qdbm
(
uöt16
 
mw
);

673 
	sfõlddesc
 {

674 c⁄° *
	g«móndfmt
;

675 
uöt32
 
	goff£t
;

676 
uöt32
 
	gÀn
;

679 
bcm_böô
(
bcm°rbuf
 *
b
, *
buf
, 
uöt
 
size
);

680 
bcm_b¥ötf
(
bcm°rbuf
 *
b
, c⁄° *
fmt
, ...);

681 
bcm_öc_byãs
(
uch¨
 *
num
, 
num_byãs
, 
uöt8
 
amou¡
);

682 
bcm_cmp_byãs
(
uch¨
 *
¨g1
, uch¨ *
¨g2
, 
uöt8
 
nbyãs
);

683 
bcm_¥öt_byãs
(*
«me
, c⁄° 
uch¨
 *
cd©a
, 
Àn
);

685 
uöt32
 (*
	tbcmué_rdªg_πn
)(*
	t¨g0
, 
	tuöt
 
	t¨g1
, 
	tuöt32
 
	toff£t
);

686 
uöt
 
bcmdumpfõlds
(
bcmué_rdªg_πn
 
func_±r
, *
¨g0
, uöà
¨g1
, 
fõlddesc
 *
°r
,

687 *
buf
, 
uöt32
 
bufsize
);

689 
uöt
 
bcm_mkiov¨
(*
«me
, *
d©a
, uöà
d©Æí
, *
buf
, uöà
Àn
);

690 
uöt
 
bcm_bôcou¡
(
uöt8
 *
bôm≠
, uöà
byãÀngth
);

694 
	#SSID_FMT_BUF_LEN
 ((4 * 
DOT11_MAX_SSID_LEN
Ë+ 1)

	)

696 
¥o˚ss_nvøm_v¨s
(*
v¨buf
, 
Àn
);

698 #ifde‡
__˝lu•lus


	@dhdutil/include/bcmwifi.h

24 #i‚def 
_bcmwifi_h_


25 
	#_bcmwifi_h_


	)

29 
uöt16
 
	tch™•ec_t
;

32 
	#CH_UPPER_SB
 0x01

	)

33 
	#CH_LOWER_SB
 0x02

	)

34 
	#CH_EWA_VALID
 0x04

	)

35 
	#CH_20MHZ_APART
 4

	)

36 
	#CH_10MHZ_APART
 2

	)

37 
	#CH_5MHZ_APART
 1

	)

38 
	#CH_MAX_2G_CHANNEL
 14

	)

39 
	#WLC_MAX_2G_CHANNEL
 
CH_MAX_2G_CHANNEL


	)

40 
	#MAXCHANNEL
 224

	)

42 
	#WL_CHANSPEC_CHAN_MASK
 0x00ff

	)

43 
	#WL_CHANSPEC_CHAN_SHIFT
 0

	)

45 
	#WL_CHANSPEC_CTL_SB_MASK
 0x0300

	)

46 
	#WL_CHANSPEC_CTL_SB_SHIFT
 8

	)

47 
	#WL_CHANSPEC_CTL_SB_LOWER
 0x0100

	)

48 
	#WL_CHANSPEC_CTL_SB_UPPER
 0x0200

	)

49 
	#WL_CHANSPEC_CTL_SB_NONE
 0x0300

	)

51 
	#WL_CHANSPEC_BW_MASK
 0x0C00

	)

52 
	#WL_CHANSPEC_BW_SHIFT
 10

	)

53 
	#WL_CHANSPEC_BW_10
 0x0400

	)

54 
	#WL_CHANSPEC_BW_20
 0x0800

	)

55 
	#WL_CHANSPEC_BW_40
 0x0C00

	)

57 
	#WL_CHANSPEC_BAND_MASK
 0xf000

	)

58 
	#WL_CHANSPEC_BAND_SHIFT
 12

	)

59 
	#WL_CHANSPEC_BAND_5G
 0x1000

	)

60 
	#WL_CHANSPEC_BAND_2G
 0x2000

	)

61 
	#INVCHANSPEC
 255

	)

64 
	#WF_CHAN_FACTOR_2_4_G
 4814

	)

65 
	#WF_CHAN_FACTOR_5_G
 10000

	)

66 
	#WF_CHAN_FACTOR_4_G
 8000

	)

69 
	#LOWER_20_SB
(
ch™√l
Ë(((ch™√lË> 
CH_10MHZ_APART
Ë? ((ch™√lË- CH_10MHZ_APARTË: 0)

	)

70 
	#UPPER_20_SB
(
ch™√l
Ë(((ch™√lË< (
MAXCHANNEL
 - 
CH_10MHZ_APART
)) ? \

71 ((
ch™√l
Ë+ 
CH_10MHZ_APART
Ë: 0)

	)

72 
	#CHSPEC_WLCBANDUNIT
(
ch•ec
Ë(
	`CHSPEC_IS5G
(ch•ecË? 
BAND_5G_INDEX
 : 
BAND_2G_INDEX
)

	)

73 
	#CH20MHZ_CHSPEC
(
ch™√l
Ë(
ch™•ec_t
)((ch™•ec_t)(ch™√lË| 
WL_CHANSPEC_BW_20
 | \

74 
WL_CHANSPEC_CTL_SB_NONE
 | (((
ch™√l
Ë<
CH_MAX_2G_CHANNEL
) ? \

75 
WL_CHANSPEC_BAND_2G
 : 
WL_CHANSPEC_BAND_5G
))

	)

76 
	#NEXT_20MHZ_CHAN
(
ch™√l
Ë(((ch™√lË< (
MAXCHANNEL
 - 
CH_20MHZ_APART
)) ? \

77 ((
ch™√l
Ë+ 
CH_20MHZ_APART
Ë: 0)

	)

78 
	#CH40MHZ_CHSPEC
(
ch™√l
, 
˘lsb
Ë(
ch™•ec_t
) \

79 ((
ch™√l
Ë| (
˘lsb
Ë| 
WL_CHANSPEC_BW_40
 | \

80 ((
ch™√l
Ë<
CH_MAX_2G_CHANNEL
 ? 
WL_CHANSPEC_BAND_2G
 : \

81 
WL_CHANSPEC_BAND_5G
))

	)

82 
	#CHSPEC_CHANNEL
(
ch•ec
Ë((
uöt8
)((ch•ecË& 
WL_CHANSPEC_CHAN_MASK
))

	)

83 
	#CHSPEC_BAND
(
ch•ec
Ë((ch•ecË& 
WL_CHANSPEC_BAND_MASK
)

	)

86 
	#CHSPEC_CTL_SB
(
ch•ec
Ë(ch•e¯& 
WL_CHANSPEC_CTL_SB_MASK
)

	)

87 
	#CHSPEC_BW
(
ch•ec
Ë(ch•e¯& 
WL_CHANSPEC_BW_MASK
)

	)

89 #ifde‡
WL11N_20MHZONLY


91 
	#CHSPEC_IS10
(
ch•ec
Ë0

	)

92 
	#CHSPEC_IS20
(
ch•ec
Ë1

	)

93 #i‚de‡
CHSPEC_IS40


94 
	#CHSPEC_IS40
(
ch•ec
Ë0

	)

99 
	#CHSPEC_IS10
(
ch•ec
Ë(((ch•ecË& 
WL_CHANSPEC_BW_MASK
Ë=
WL_CHANSPEC_BW_10
)

	)

100 
	#CHSPEC_IS20
(
ch•ec
Ë(((ch•ecË& 
WL_CHANSPEC_BW_MASK
Ë=
WL_CHANSPEC_BW_20
)

	)

101 #i‚de‡
CHSPEC_IS40


102 
	#CHSPEC_IS40
(
ch•ec
Ë(((ch•ecË& 
WL_CHANSPEC_BW_MASK
Ë=
WL_CHANSPEC_BW_40
)

	)

107 
	#CHSPEC_IS20_UNCOND
(
ch•ec
Ë(((ch•ecË& 
WL_CHANSPEC_BW_MASK
Ë=
WL_CHANSPEC_BW_20
)

	)

109 
	#CHSPEC_IS5G
(
ch•ec
Ë(((ch•ecË& 
WL_CHANSPEC_BAND_MASK
Ë=
WL_CHANSPEC_BAND_5G
)

	)

110 
	#CHSPEC_IS2G
(
ch•ec
Ë(((ch•ecË& 
WL_CHANSPEC_BAND_MASK
Ë=
WL_CHANSPEC_BAND_2G
)

	)

111 
	#CHSPEC_SB_NONE
(
ch•ec
Ë(((ch•ecË& 
WL_CHANSPEC_CTL_SB_MASK
Ë=
WL_CHANSPEC_CTL_SB_NONE
)

	)

112 
	#CHSPEC_SB_UPPER
(
ch•ec
Ë(((ch•ecË& 
WL_CHANSPEC_CTL_SB_MASK
Ë=
WL_CHANSPEC_CTL_SB_UPPER
)

	)

113 
	#CHSPEC_SB_LOWER
(
ch•ec
Ë(((ch•ecË& 
WL_CHANSPEC_CTL_SB_MASK
Ë=
WL_CHANSPEC_CTL_SB_LOWER
)

	)

114 
	#CHSPEC_CTL_CHAN
(
ch•ec
Ë((
	`CHSPEC_SB_LOWER
(chspec)) ? \

115 (
	`LOWER_20_SB
(((
ch•ec
Ë& 
WL_CHANSPEC_CHAN_MASK
))) : \

116 (
	`UPPER_20_SB
(((
ch•ec
Ë& 
WL_CHANSPEC_CHAN_MASK
))))

	)

117 
	#CHSPEC2WLC_BAND
(
ch•ec
Ë(
	`CHSPEC_IS5G
(ch•ecË? 
WLC_BAND_5G
 : 
WLC_BAND_2G
)

	)

119 
	#CHANSPEC_STR_LEN
 8

	)

122 
	#WLC_MAXRATE
 108

	)

123 
	#WLC_RATE_1M
 2

	)

124 
	#WLC_RATE_2M
 4

	)

125 
	#WLC_RATE_5M5
 11

	)

126 
	#WLC_RATE_11M
 22

	)

127 
	#WLC_RATE_6M
 12

	)

128 
	#WLC_RATE_9M
 18

	)

129 
	#WLC_RATE_12M
 24

	)

130 
	#WLC_RATE_18M
 36

	)

131 
	#WLC_RATE_24M
 48

	)

132 
	#WLC_RATE_36M
 72

	)

133 
	#WLC_RATE_48M
 96

	)

134 
	#WLC_RATE_54M
 108

	)

136 
	#WLC_2G_25MHZ_OFFSET
 5

	)

139 * 
wf_ch•ec_¡ﬂ
(
ch™•ec_t
 
ch•ec
, *
buf
);

142 
ch™•ec_t
 
wf_ch•ec_©⁄
(*
a
);

145 
boﬁ
 
wf_ch•ec_mÆf‹med
(
ch™•ec_t
 
ch™•ec
);

148 
uöt8
 
wf_ch•ec_˘lch™
(
ch™•ec_t
 
ch•ec
);

151 
ch™•ec_t
 
wf_ch•ec_˘lch•ec
(ch™•ec_à
ch•ec
);

154 
wf_mhz2ch™√l
(
uöt
 
‰eq
, uöà
°¨t_Á˘‹
);

157 
wf_ch™√l2mhz
(
uöt
 
ch™√l
, uöà
°¨t_Á˘‹
);

	@dhdutil/include/dhdioctl.h

25 #i‚de‡
_dhdio˘l_h_


26 
	#_dhdio˘l_h_


	)

28 
	~<ty≥defs.h
>

32 
	#BWL_DEFAULT_PACKING


	)

33 
	~<∑cked_£˘i⁄_°¨t.h
>

37 
	sdhd_io˘l
 {

38 
uöt
 
	mcmd
;

39 *
	mbuf
;

40 
uöt
 
	mÀn
;

41 
boﬁ
 
	m£t
;

42 
uöt
 
	mu£d
;

43 
uöt
 
	m√eded
;

44 
uöt
 
	mdrivî
;

45 } 
	tdhd_io˘l_t
;

49 
	mBUS_TYPE_USB
 = 0,

50 
	mBUS_TYPE_SDIO


54 
	#DHD_IOCTL_MAGIC
 0x00444944

	)

57 
	#DHD_IOCTL_VERSION
 1

	)

59 
	#DHD_IOCTL_MAXLEN
 8192

	)

60 
	#DHD_IOCTL_SMLEN
 256

	)

63 
	#DHD_GET_MAGIC
 0

	)

64 
	#DHD_GET_VERSION
 1

	)

65 
	#DHD_GET_VAR
 2

	)

66 
	#DHD_SET_VAR
 3

	)

69 
	#DHD_ERROR_VAL
 0x0001

	)

70 
	#DHD_TRACE_VAL
 0x0002

	)

71 
	#DHD_INFO_VAL
 0x0004

	)

72 
	#DHD_DATA_VAL
 0x0008

	)

73 
	#DHD_CTL_VAL
 0x0010

	)

74 
	#DHD_TIMER_VAL
 0x0020

	)

75 
	#DHD_HDRS_VAL
 0x0040

	)

76 
	#DHD_BYTES_VAL
 0x0080

	)

77 
	#DHD_INTR_VAL
 0x0100

	)

78 
	#DHD_LOG_VAL
 0x0200

	)

79 
	#DHD_GLOM_VAL
 0x0400

	)

80 
	#DHD_EVENT_VAL
 0x0800

	)

81 
	#DHD_BTA_VAL
 0x1000

	)

82 
	#DHD_ISCAN_VAL
 0x2000

	)

84 #ifde‡
SDTEST


86 
	sdhd_pktgí
 {

87 
uöt
 
	mvîsi⁄
;

88 
uöt
 
	m‰eq
;

89 
uöt
 
	mcou¡
;

90 
uöt
 
	m¥öt
;

91 
uöt
 
	mtŸÆ
;

92 
uöt
 
	mmöÀn
;

93 
uöt
 
	mmaxÀn
;

94 
uöt
 
	mnum£¡
;

95 
uöt
 
	mnumrcvd
;

96 
uöt
 
	mnumÁû
;

97 
uöt
 
	mmode
;

98 
uöt
 
	m°›
;

99 } 
	tdhd_pktgí_t
;

102 
	#DHD_PKTGEN_VERSION
 2

	)

105 
	#DHD_PKTGEN_ECHO
 1

	)

106 
	#DHD_PKTGEN_SEND
 2

	)

107 
	#DHD_PKTGEN_RXBURST
 3

	)

108 
	#DHD_PKTGEN_RECV
 4

	)

112 
	#DHD_IDLE_IMMEDIATE
 (-1)

	)

115 
	#DHD_IDLE_ACTIVE
 0

	)

116 
	#DHD_IDLE_STOP
 (-1Ë

	)

120 
	~<∑cked_£˘i⁄_íd.h
>

	@dhdutil/include/epivers.h

21 #i‚de‡
_ïivîs_h_


22 
	#_ïivîs_h_


	)

24 
	#EPI_MAJOR_VERSION
 5

	)

26 
	#EPI_MINOR_VERSION
 90

	)

28 
	#EPI_RC_NUMBER
 125

	)

30 
	#EPI_INCREMENTAL_NUMBER
 14

	)

32 
	#EPI_BUILD_NUMBER
 0

	)

34 
	#EPI_VERSION
 5, 90, 125, 14

	)

36 
	#EPI_VERSION_NUM
 0x055a7d0e

	)

38 
	#EPI_VERSION_DEV
 5.90.125

	)

41 
	#EPI_VERSION_STR
 "5.90.125.14"

	)

	@dhdutil/include/miniopt.h

22 #i‚de‡
MINI_OPT_H


23 
	#MINI_OPT_H


	)

25 #ifde‡
__˝lu•lus


32 
	#MINIOPT_MAXKEY
 128

	)

33 
	smöi›t
 {

36 c⁄° * 
«me
;

37 c⁄° * 
Êags
;

38 
boﬁ
 
l⁄gÊags
;

39 
boﬁ
 
›t_íd
;

43 
c⁄sumed
;

46 
boﬁ
 
posôi⁄Æ
;

47 
boﬁ
 
good_öt
;

50 
›t
;

51 
key
[
MINIOPT_MAXKEY
];

52 * 
vÆ°r
;

56 
uöt
 
uvÆ
;

57 
vÆ
;

58 } 
	tmöi›t_t
;

60 
möi›t_öô
(
möi›t_t
 *
t
, c⁄° * 
«me
, c⁄° * 
Êags
, 
boﬁ
 
l⁄gÊags
);

61 
möi›t
(
möi›t_t
 *
t
, **
¨gv
);

68 #ifde‡
__˝lu•lus


	@dhdutil/include/packed_section_end.h

38 #ifde‡
BWL_PACKED_SECTION


39 #unde‡
BWL_PACKED_SECTION


48 #unde‡
BWL_PRE_PACKED_STRUCT


49 #unde‡
BWL_POST_PACKED_STRUCT


	@dhdutil/include/packed_section_start.h

38 #ifde‡
BWL_PACKED_SECTION


41 
	#BWL_PACKED_SECTION


	)

48 #i‡
deföed
(
__GNUC__
)

49 
	#BWL_PRE_PACKED_STRUCT


	)

50 
	#BWL_POST_PACKED_STRUCT
 
	`__©åibuã__
 ((
∑cked
))

	)

51 #ñi‡
deföed
(
__CC_ARM
)

52 
	#BWL_PRE_PACKED_STRUCT
 
__∑cked


	)

53 
	#BWL_POST_PACKED_STRUCT


	)

	@dhdutil/include/proto/802.11.h

22 #i‚de‡
_802_11_H_


23 
	#_802_11_H_


	)

25 #i‚de‡
_TYPEDEFS_H_


26 
	~<ty≥defs.h
>

29 #i‚de‡
_NET_ETHERNET_H_


30 
	~<¥Ÿo/ëhî√t.h
>

33 
	~<¥Ÿo/w∑.h
>

36 
	~<∑cked_£˘i⁄_°¨t.h
>

39 
	#DOT11_TU_TO_US
 1024

	)

42 
	#DOT11_A3_HDR_LEN
 24

	)

43 
	#DOT11_A4_HDR_LEN
 30

	)

44 
	#DOT11_MAC_HDR_LEN
 
DOT11_A3_HDR_LEN


	)

45 
	#DOT11_FCS_LEN
 4

	)

46 
	#DOT11_ICV_LEN
 4

	)

47 
	#DOT11_ICV_AES_LEN
 8

	)

48 
	#DOT11_QOS_LEN
 2

	)

49 
	#DOT11_HTC_LEN
 4

	)

51 
	#DOT11_KEY_INDEX_SHIFT
 6

	)

52 
	#DOT11_IV_LEN
 4

	)

53 
	#DOT11_IV_TKIP_LEN
 8

	)

54 
	#DOT11_IV_AES_OCB_LEN
 4

	)

55 
	#DOT11_IV_AES_CCM_LEN
 8

	)

56 
	#DOT11_IV_MAX_LEN
 8

	)

59 
	#DOT11_MAX_MPDU_BODY_LEN
 2304

	)

61 
	#DOT11_MAX_MPDU_LEN
 (
DOT11_A4_HDR_LEN
 + \

62 
DOT11_QOS_LEN
 + \

63 
DOT11_IV_AES_CCM_LEN
 + \

64 
DOT11_MAX_MPDU_BODY_LEN
 + \

65 
DOT11_ICV_LEN
 + \

66 
DOT11_FCS_LEN
)

	)

68 
	#DOT11_MAX_SSID_LEN
 32

	)

71 
	#DOT11_DEFAULT_RTS_LEN
 2347

	)

72 
	#DOT11_MAX_RTS_LEN
 2347

	)

75 
	#DOT11_MIN_FRAG_LEN
 256

	)

76 
	#DOT11_MAX_FRAG_LEN
 2346

	)

77 
	#DOT11_DEFAULT_FRAG_LEN
 2346

	)

80 
	#DOT11_MIN_BEACON_PERIOD
 1

	)

81 
	#DOT11_MAX_BEACON_PERIOD
 0xFFFF

	)

84 
	#DOT11_MIN_DTIM_PERIOD
 1

	)

85 
	#DOT11_MAX_DTIM_PERIOD
 0xFF

	)

88 
	#DOT11_LLC_SNAP_HDR_LEN
 8

	)

89 
	#DOT11_OUI_LEN
 3

	)

90 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_Œc_¢≠_hódî
 {

91 
uöt8
 
	mdßp
;

92 
uöt8
 
	msßp
;

93 
uöt8
 
	m˘l
;

94 
uöt8
 
	moui
[
DOT11_OUI_LEN
];

95 
uöt16
 
	mty≥
;

96 } 
	gBWL_POST_PACKED_STRUCT
;

99 
	#RFC1042_HDR_LEN
 (
ETHER_HDR_LEN
 + 
DOT11_LLC_SNAP_HDR_LEN
)

	)

103 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_hódî
 {

104 
uöt16
 
	mfc
;

105 
uöt16
 
	mdurid
;

106 
ëhî_addr
 
	ma1
;

107 
ëhî_addr
 
	ma2
;

108 
ëhî_addr
 
	ma3
;

109 
uöt16
 
	m£q
;

110 
ëhî_addr
 
	ma4
;

111 } 
	gBWL_POST_PACKED_STRUCT
;

115 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_πs_‰ame
 {

116 
uöt16
 
	mfc
;

117 
uöt16
 
	mdurid
;

118 
ëhî_addr
 
	mø
;

119 
ëhî_addr
 
	mè
;

120 } 
	gBWL_POST_PACKED_STRUCT
;

121 
	#DOT11_RTS_LEN
 16

	)

123 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_˘s_‰ame
 {

124 
uöt16
 
	mfc
;

125 
uöt16
 
	mdurid
;

126 
ëhî_addr
 
	mø
;

127 } 
	gBWL_POST_PACKED_STRUCT
;

128 
	#DOT11_CTS_LEN
 10

	)

130 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_ack_‰ame
 {

131 
uöt16
 
	mfc
;

132 
uöt16
 
	mdurid
;

133 
ëhî_addr
 
	mø
;

134 } 
	gBWL_POST_PACKED_STRUCT
;

135 
	#DOT11_ACK_LEN
 10

	)

137 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_ps_pﬁl_‰ame
 {

138 
uöt16
 
	mfc
;

139 
uöt16
 
	mdurid
;

140 
ëhî_addr
 
	mbssid
;

141 
ëhî_addr
 
	mè
;

142 } 
	gBWL_POST_PACKED_STRUCT
;

143 
	#DOT11_PS_POLL_LEN
 16

	)

145 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_cf_íd_‰ame
 {

146 
uöt16
 
	mfc
;

147 
uöt16
 
	mdurid
;

148 
ëhî_addr
 
	mø
;

149 
ëhî_addr
 
	mbssid
;

150 } 
	gBWL_POST_PACKED_STRUCT
;

151 
	#DOT11_CS_END_LEN
 16

	)

154 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_a˘i⁄_wifi_víd‹_•ecific
 {

155 
uöt8
 
	mˇãg‹y
;

156 
uöt8
 
	mOUI
[3];

157 
uöt8
 
	mty≥
;

158 
uöt8
 
	msubty≥
;

159 
uöt8
 
	md©a
[1040];

160 } 
	gBWL_POST_PACKED_STRUCT
;

161 
dŸ11_a˘i⁄_wifi_víd‹_•ecific
 
	tdŸ11_a˘i⁄_wifi_víd‹_•ecific_t
;

164 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_a˘i⁄_vs_‰mhdr
 {

165 
uöt8
 
	mˇãg‹y
;

166 
uöt8
 
	mOUI
[3];

167 
uöt8
 
	mty≥
;

168 
uöt8
 
	msubty≥
;

169 
uöt8
 
	md©a
[1];

170 } 
	gBWL_POST_PACKED_STRUCT
;

171 
dŸ11_a˘i⁄_vs_‰mhdr
 
	tdŸ11_a˘i⁄_vs_‰mhdr_t
;

172 
	#DOT11_ACTION_VS_HDR_LEN
 6

	)

174 
	#BCM_ACTION_OUI_BYTE0
 0x00

	)

175 
	#BCM_ACTION_OUI_BYTE1
 0x90

	)

176 
	#BCM_ACTION_OUI_BYTE2
 0x4c

	)

179 
	#DOT11_BA_CTL_POLICY_NORMAL
 0x0000

	)

180 
	#DOT11_BA_CTL_POLICY_NOACK
 0x0001

	)

181 
	#DOT11_BA_CTL_POLICY_MASK
 0x0001

	)

183 
	#DOT11_BA_CTL_MTID
 0x0002

	)

184 
	#DOT11_BA_CTL_COMPRESSED
 0x0004

	)

186 
	#DOT11_BA_CTL_NUMMSDU_MASK
 0x0FC0

	)

187 
	#DOT11_BA_CTL_NUMMSDU_SHIFT
 6

	)

189 
	#DOT11_BA_CTL_TID_MASK
 0xF000

	)

190 
	#DOT11_BA_CTL_TID_SHIFT
 12

	)

193 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_˘l_hódî
 {

194 
uöt16
 
	mfc
;

195 
uöt16
 
	mdurid
;

196 
ëhî_addr
 
	mø
;

197 
ëhî_addr
 
	mè
;

198 } 
	gBWL_POST_PACKED_STRUCT
;

199 
	#DOT11_CTL_HDR_LEN
 16

	)

202 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_b¨
 {

203 
uöt16
 
	mb¨_c⁄åﬁ
;

204 
uöt16
 
	m£qnum
;

205 } 
	gBWL_POST_PACKED_STRUCT
;

206 
	#DOT11_BAR_LEN
 4

	)

208 
	#DOT11_BA_BITMAP_LEN
 128

	)

209 
	#DOT11_BA_CMP_BITMAP_LEN
 8

	)

211 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_ba
 {

212 
uöt16
 
	mba_c⁄åﬁ
;

213 
uöt16
 
	m£qnum
;

214 
uöt8
 
	mbôm≠
[
DOT11_BA_BITMAP_LEN
];

215 } 
	gBWL_POST_PACKED_STRUCT
;

216 
	#DOT11_BA_LEN
 4

	)

219 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_m™agemít_hódî
 {

220 
uöt16
 
	mfc
;

221 
uöt16
 
	mdurid
;

222 
ëhî_addr
 
	mda
;

223 
ëhî_addr
 
	mß
;

224 
ëhî_addr
 
	mbssid
;

225 
uöt16
 
	m£q
;

226 } 
	gBWL_POST_PACKED_STRUCT
;

227 
	#DOT11_MGMT_HDR_LEN
 24

	)

231 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_b˙_¥b
 {

232 
uöt32
 
	mtime°amp
[2];

233 
uöt16
 
	mbóc⁄_öãrvÆ
;

234 
uöt16
 
	mˇ∑bûôy
;

235 } 
	gBWL_POST_PACKED_STRUCT
;

236 
	#DOT11_BCN_PRB_LEN
 12

	)

237 
	#DOT11_BCN_PRB_FIXED_LEN
 12

	)

239 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_auth
 {

240 
uöt16
 
	mÆg
;

241 
uöt16
 
	m£q
;

242 
uöt16
 
	m°©us
;

243 } 
	gBWL_POST_PACKED_STRUCT
;

244 
	#DOT11_AUTH_FIXED_LEN
 6

	)

246 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_assoc_ªq
 {

247 
uöt16
 
	mˇ∑bûôy
;

248 
uöt16
 
	mli°í
;

249 } 
	gBWL_POST_PACKED_STRUCT
;

250 
	#DOT11_ASSOC_REQ_FIXED_LEN
 4

	)

252 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_ªassoc_ªq
 {

253 
uöt16
 
	mˇ∑bûôy
;

254 
uöt16
 
	mli°í
;

255 
ëhî_addr
 
	m≠
;

256 } 
	gBWL_POST_PACKED_STRUCT
;

257 
	#DOT11_REASSOC_REQ_FIXED_LEN
 10

	)

259 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_assoc_ª•
 {

260 
uöt16
 
	mˇ∑bûôy
;

261 
uöt16
 
	m°©us
;

262 
uöt16
 
	maid
;

263 } 
	gBWL_POST_PACKED_STRUCT
;

264 
	#DOT11_ASSOC_RESP_FIXED_LEN
 6

	)

266 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_a˘i⁄_mósuª
 {

267 
uöt8
 
	mˇãg‹y
;

268 
uöt8
 
	ma˘i⁄
;

269 
uöt8
 
	mtokí
;

270 
uöt8
 
	md©a
[1];

271 } 
	gBWL_POST_PACKED_STRUCT
;

272 
	#DOT11_ACTION_MEASURE_LEN
 3

	)

274 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_a˘i⁄_ht_ch_width
 {

275 
uöt8
 
	mˇãg‹y
;

276 
uöt8
 
	ma˘i⁄
;

277 
uöt8
 
	mch_width
;

278 } 
	gBWL_POST_PACKED_STRUCT
;

280 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_a˘i⁄_ht_mim›s
 {

281 
uöt8
 
	mˇãg‹y
;

282 
uöt8
 
	ma˘i⁄
;

283 
uöt8
 
	mc⁄åﬁ
;

284 } 
	gBWL_POST_PACKED_STRUCT
;

286 
	#SM_PWRSAVE_ENABLE
 1

	)

287 
	#SM_PWRSAVE_MODE
 2

	)

290 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_powî_˙°
 {

291 
uöt8
 
	mid
;

292 
uöt8
 
	mÀn
;

293 
uöt8
 
	mpowî
;

294 } 
	gBWL_POST_PACKED_STRUCT
;

295 
dŸ11_powî_˙°
 
	tdŸ11_powî_˙°_t
;

297 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_powî_ˇp
 {

298 
uöt8
 
	mmö
;

299 
uöt8
 
	mmax
;

300 } 
	gBWL_POST_PACKED_STRUCT
;

301 
dŸ11_powî_ˇp
 
	tdŸ11_powî_ˇp_t
;

303 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_çc_ªp
 {

304 
uöt8
 
	mid
;

305 
uöt8
 
	mÀn
;

306 
uöt8
 
	mtx_pwr
;

307 
uöt8
 
	mm¨gö
;

308 } 
	gBWL_POST_PACKED_STRUCT
;

309 
dŸ11_çc_ªp
 
	tdŸ11_çc_ªp_t
;

310 
	#DOT11_MNG_IE_TPC_REPORT_LEN
 2

	)

312 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_suµ_ch™√ls
 {

313 
uöt8
 
	mid
;

314 
uöt8
 
	mÀn
;

315 
uöt8
 
	mfú°_ch™√l
;

316 
uöt8
 
	mnum_ch™√ls
;

317 } 
	gBWL_POST_PACKED_STRUCT
;

318 
dŸ11_suµ_ch™√ls
 
	tdŸ11_suµ_ch™√ls_t
;

321 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_extch
 {

322 
uöt8
 
	mid
;

323 
uöt8
 
	mÀn
;

324 
uöt8
 
	mextch
;

325 } 
	gBWL_POST_PACKED_STRUCT
;

326 
dŸ11_extch
 
	tdŸ11_extch_õ_t
;

328 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_brcm_extch
 {

329 
uöt8
 
	mid
;

330 
uöt8
 
	mÀn
;

331 
uöt8
 
	moui
[3];

332 
uöt8
 
	mty≥
;

333 
uöt8
 
	mextch
;

334 } 
	gBWL_POST_PACKED_STRUCT
;

335 
dŸ11_brcm_extch
 
	tdŸ11_brcm_extch_õ_t
;

337 
	#BRCM_EXTCH_IE_LEN
 5

	)

338 
	#BRCM_EXTCH_IE_TYPE
 53

	)

339 
	#DOT11_EXTCH_IE_LEN
 1

	)

340 
	#DOT11_EXT_CH_MASK
 0x03

	)

341 
	#DOT11_EXT_CH_UPPER
 0x01

	)

342 
	#DOT11_EXT_CH_LOWER
 0x03

	)

343 
	#DOT11_EXT_CH_NONE
 0x00

	)

345 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_a˘i⁄_‰mhdr
 {

346 
uöt8
 
	mˇãg‹y
;

347 
uöt8
 
	ma˘i⁄
;

348 
uöt8
 
	md©a
[1];

349 } 
	gBWL_POST_PACKED_STRUCT
;

350 
	#DOT11_ACTION_FRMHDR_LEN
 2

	)

353 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_ch™√l_swôch
 {

354 
uöt8
 
	mid
;

355 
uöt8
 
	mÀn
;

356 
uöt8
 
	mmode
;

357 
uöt8
 
	mch™√l
;

358 
uöt8
 
	mcou¡
;

359 } 
	gBWL_POST_PACKED_STRUCT
;

360 
dŸ11_ch™√l_swôch
 
	tdŸ11_ch™_swôch_õ_t
;

362 
	#DOT11_SWITCH_IE_LEN
 3

	)

364 
	#DOT11_CSA_MODE_ADVISORY
 0

	)

365 
	#DOT11_CSA_MODE_NO_TX
 1

	)

367 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_a˘i⁄_swôch_ch™√l
 {

368 
uöt8
 
	mˇãg‹y
;

369 
uöt8
 
	ma˘i⁄
;

370 
dŸ11_ch™_swôch_õ_t
 
	mch™_swôch_õ
;

371 
dŸ11_brcm_extch_õ_t
 
	mextch_õ
;

372 } 
	gBWL_POST_PACKED_STRUCT
;

374 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_cß_body
 {

375 
uöt8
 
	mmode
;

376 
uöt8
 
	mªg
;

377 
uöt8
 
	mch™√l
;

378 
uöt8
 
	mcou¡
;

379 } 
	gBWL_POST_PACKED_STRUCT
;

382 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_ext_cß
 {

383 
uöt8
 
	mid
;

384 
uöt8
 
	mÀn
;

385 
dŸ11_cß_body
 
	mb
;

386 } 
	gBWL_POST_PACKED_STRUCT
;

387 
dŸ11_ext_cß
 
	tdŸ11_ext_cß_õ_t
;

388 
	#DOT11_EXT_CSA_IE_LEN
 4

	)

390 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_a˘i⁄_ext_cß
 {

391 
uöt8
 
	mˇãg‹y
;

392 
uöt8
 
	ma˘i⁄
;

393 
dŸ11_ext_cß_õ_t
 
	mch™_swôch_õ
;

394 } 
	gBWL_POST_PACKED_STRUCT
;

396 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11y_a˘i⁄_ext_cß
 {

397 
uöt8
 
	mˇãg‹y
;

398 
uöt8
 
	ma˘i⁄
;

399 
dŸ11_cß_body
 
	mb
;

400 } 
	gBWL_POST_PACKED_STRUCT
;

402 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_obss_c€x
 {

403 
uöt8
 
	mid
;

404 
uöt8
 
	mÀn
;

405 
uöt8
 
	möfo
;

406 } 
	gBWL_POST_PACKED_STRUCT
;

407 
dŸ11_obss_c€x
 
	tdŸ11_obss_c€x_t
;

408 
	#DOT11_OBSS_COEXINFO_LEN
 1

	)

410 
	#DOT11_OBSS_COEX_INFO_REQ
 0x01

	)

411 
	#DOT11_OBSS_COEX_40MHZ_INTOLERANT
 0x02

	)

412 
	#DOT11_OBSS_COEX_20MHZ_WIDTH_REQ
 0x04

	)

414 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_obss_ch™li°
 {

415 
uöt8
 
	mid
;

416 
uöt8
 
	mÀn
;

417 
uöt8
 
	mªg˛ass
;

418 
uöt8
 
	mch™li°
[1];

419 } 
	gBWL_POST_PACKED_STRUCT
;

420 
dŸ11_obss_ch™li°
 
	tdŸ11_obss_ch™li°_t
;

421 
	#DOT11_OBSS_CHANLIST_FIXED_LEN
 1

	)

423 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_extˇp_õ
 {

424 
uöt8
 
	mid
;

425 
uöt8
 
	mÀn
;

426 
uöt8
 
	mˇp
;

427 } 
	gBWL_POST_PACKED_STRUCT
;

428 
dŸ11_extˇp_õ
 
	tdŸ11_extˇp_õ_t
;

429 
	#DOT11_EXTCAP_LEN
 1

	)

433 
	#DOT11_MEASURE_TYPE_BASIC
 0

	)

434 
	#DOT11_MEASURE_TYPE_CCA
 1

	)

435 
	#DOT11_MEASURE_TYPE_RPI
 2

	)

436 
	#DOT11_MEASURE_TYPE_CHLOAD
 3

	)

437 
	#DOT11_MEASURE_TYPE_NOISE
 4

	)

438 
	#DOT11_MEASURE_TYPE_BEACON
 5

	)

439 
	#DOT11_MEASURE_TYPE_FRAME
 6

	)

440 
	#DOT11_MEASURE_TYPE_STATS
 7

	)

441 
	#DOT11_MEASURE_TYPE_LCI
 8

	)

442 
	#DOT11_MEASURE_TYPE_TXSTREAM
 9

	)

443 
	#DOT11_MEASURE_TYPE_PAUSE
 255

	)

446 
	#DOT11_MEASURE_MODE_PARALLEL
 (1<<0)

	)

447 
	#DOT11_MEASURE_MODE_ENABLE
 (1<<1)

	)

448 
	#DOT11_MEASURE_MODE_REQUEST
 (1<<2)

	)

449 
	#DOT11_MEASURE_MODE_REPORT
 (1<<3)

	)

450 
	#DOT11_MEASURE_MODE_DUR
 (1<<4)

	)

452 
	#DOT11_MEASURE_MODE_LATE
 (1<<0)

	)

453 
	#DOT11_MEASURE_MODE_INCAPABLE
 (1<<1)

	)

454 
	#DOT11_MEASURE_MODE_REFUSED
 (1<<2)

	)

456 
	#DOT11_MEASURE_BASIC_MAP_BSS
 ((
uöt8
)(1<<0))

	)

457 
	#DOT11_MEASURE_BASIC_MAP_OFDM
 ((
uöt8
)(1<<1))

	)

458 
	#DOT11_MEASURE_BASIC_MAP_UKNOWN
 ((
uöt8
)(1<<2))

	)

459 
	#DOT11_MEASURE_BASIC_MAP_RADAR
 ((
uöt8
)(1<<3))

	)

460 
	#DOT11_MEASURE_BASIC_MAP_UNMEAS
 ((
uöt8
)(1<<4))

	)

462 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_mós_ªq
 {

463 
uöt8
 
	mid
;

464 
uöt8
 
	mÀn
;

465 
uöt8
 
	mtokí
;

466 
uöt8
 
	mmode
;

467 
uöt8
 
	mty≥
;

468 
uöt8
 
	mch™√l
;

469 
uöt8
 
	m°¨t_time
[8];

470 
uöt16
 
	mduøti⁄
;

471 } 
	gBWL_POST_PACKED_STRUCT
;

472 
dŸ11_mós_ªq
 
	tdŸ11_mós_ªq_t
;

473 
	#DOT11_MNG_IE_MREQ_LEN
 14

	)

475 
	#DOT11_MNG_IE_MREQ_FIXED_LEN
 3

	)

477 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_mós_ªp
 {

478 
uöt8
 
	mid
;

479 
uöt8
 
	mÀn
;

480 
uöt8
 
	mtokí
;

481 
uöt8
 
	mmode
;

482 
uöt8
 
	mty≥
;

483 
BWL_PRE_PACKED_STRUCT
 union

485 
BWL_PRE_PACKED_STRUCT
 struct {

486 
uöt8
 
	mch™√l
;

487 
uöt8
 
	m°¨t_time
[8];

488 
uöt16
 
	mduøti⁄
;

489 
uöt8
 
	mm≠
;

490 } 
BWL_POST_PACKED_STRUCT
 
	mbasic
;

491 
uöt8
 
	md©a
[1];

492 } 
BWL_POST_PACKED_STRUCT
 
	mªp
;

493 } 
	gBWL_POST_PACKED_STRUCT
;

494 
dŸ11_mós_ªp
 
	tdŸ11_mós_ªp_t
;

497 
	#DOT11_MNG_IE_MREP_FIXED_LEN
 3

	)

499 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_mós_ªp_basic
 {

500 
uöt8
 
	mch™√l
;

501 
uöt8
 
	m°¨t_time
[8];

502 
uöt16
 
	mduøti⁄
;

503 
uöt8
 
	mm≠
;

504 } 
	gBWL_POST_PACKED_STRUCT
;

505 
dŸ11_mós_ªp_basic
 
	tdŸ11_mós_ªp_basic_t
;

506 
	#DOT11_MEASURE_BASIC_REP_LEN
 12

	)

508 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_quõt
 {

509 
uöt8
 
	mid
;

510 
uöt8
 
	mÀn
;

511 
uöt8
 
	mcou¡
;

512 
uöt8
 
	m≥riod
;

513 
uöt16
 
	mduøti⁄
;

514 
uöt16
 
	moff£t
;

515 } 
	gBWL_POST_PACKED_STRUCT
;

516 
dŸ11_quõt
 
	tdŸ11_quõt_t
;

518 
BWL_PRE_PACKED_STRUCT
 
	sch™_m≠_tu∂e
 {

519 
uöt8
 
	mch™√l
;

520 
uöt8
 
	mm≠
;

521 } 
	gBWL_POST_PACKED_STRUCT
;

522 
ch™_m≠_tu∂e
 
	tch™_m≠_tu∂e_t
;

524 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_ibss_dfs
 {

525 
uöt8
 
	mid
;

526 
uöt8
 
	mÀn
;

527 
uöt8
 
	móddr
[
ETHER_ADDR_LEN
];

528 
uöt8
 
	möãrvÆ
;

529 
ch™_m≠_tu∂e_t
 
	mm≠
[1];

530 } 
	gBWL_POST_PACKED_STRUCT
;

531 
dŸ11_ibss_dfs
 
	tdŸ11_ibss_dfs_t
;

534 
	#WME_OUI
 "\x00\x50\xf2"

	)

535 
	#WME_OUI_LEN
 3

	)

536 
	#WME_OUI_TYPE
 2

	)

537 
	#WME_VER
 1

	)

538 
	#WME_TYPE
 2

	)

539 
	#WME_SUBTYPE_IE
 0

	)

540 
	#WME_SUBTYPE_PARAM_IE
 1

	)

541 
	#WME_SUBTYPE_TSPEC
 2

	)

544 
	#AC_BE
 0

	)

545 
	#AC_BK
 1

	)

546 
	#AC_VI
 2

	)

547 
	#AC_VO
 3

	)

548 
	#AC_COUNT
 4

	)

550 
uöt8
 
	tac_bôm≠_t
;

552 
	#AC_BITMAP_NONE
 0x0

	)

553 
	#AC_BITMAP_ALL
 0xf

	)

554 
	#AC_BITMAP_TST
(
ab
, 
ac
Ë((◊bË& (1 << (ac))Ë!0)

	)

555 
	#AC_BITMAP_SET
(
ab
, 
ac
Ë((◊bË|(1 << (ac))))

	)

556 
	#AC_BITMAP_RESET
(
ab
, 
ac
Ë((◊bË&~(1 << (ac))))

	)

559 
BWL_PRE_PACKED_STRUCT
 
	swme_õ
 {

560 
uöt8
 
	moui
[3];

561 
uöt8
 
	mty≥
;

562 
uöt8
 
	msubty≥
;

563 
uöt8
 
	mvîsi⁄
;

564 
uöt8
 
	mqosöfo
;

565 } 
	gBWL_POST_PACKED_STRUCT
;

566 
wme_õ
 
	twme_õ_t
;

567 
	#WME_IE_LEN
 7

	)

569 
BWL_PRE_PACKED_STRUCT
 
	sedcf_a˝¨am
 {

570 
uöt8
 
	mACI
;

571 
uöt8
 
	mECW
;

572 
uöt16
 
	mTXOP
;

573 } 
	gBWL_POST_PACKED_STRUCT
;

574 
edcf_a˝¨am
 
	tedcf_a˝¨am_t
;

577 
BWL_PRE_PACKED_STRUCT
 
	swme_∑øm_õ
 {

578 
uöt8
 
	moui
[3];

579 
uöt8
 
	mty≥
;

580 
uöt8
 
	msubty≥
;

581 
uöt8
 
	mvîsi⁄
;

582 
uöt8
 
	mqosöfo
;

583 
uöt8
 
	mrsvd
;

584 
edcf_a˝¨am_t
 
	ma˝¨am
[
AC_COUNT
];

585 } 
	gBWL_POST_PACKED_STRUCT
;

586 
wme_∑øm_õ
 
	twme_∑øm_õ_t
;

587 
	#WME_PARAM_IE_LEN
 24

	)

590 
	#WME_QI_AP_APSD_MASK
 0x80

	)

591 
	#WME_QI_AP_APSD_SHIFT
 7

	)

592 
	#WME_QI_AP_COUNT_MASK
 0x0f

	)

593 
	#WME_QI_AP_COUNT_SHIFT
 0

	)

596 
	#WME_QI_STA_MAXSPLEN_MASK
 0x60

	)

597 
	#WME_QI_STA_MAXSPLEN_SHIFT
 5

	)

598 
	#WME_QI_STA_APSD_ALL_MASK
 0xf

	)

599 
	#WME_QI_STA_APSD_ALL_SHIFT
 0

	)

600 
	#WME_QI_STA_APSD_BE_MASK
 0x8

	)

601 
	#WME_QI_STA_APSD_BE_SHIFT
 3

	)

602 
	#WME_QI_STA_APSD_BK_MASK
 0x4

	)

603 
	#WME_QI_STA_APSD_BK_SHIFT
 2

	)

604 
	#WME_QI_STA_APSD_VI_MASK
 0x2

	)

605 
	#WME_QI_STA_APSD_VI_SHIFT
 1

	)

606 
	#WME_QI_STA_APSD_VO_MASK
 0x1

	)

607 
	#WME_QI_STA_APSD_VO_SHIFT
 0

	)

610 
	#EDCF_AIFSN_MIN
 1

	)

611 
	#EDCF_AIFSN_MAX
 15

	)

612 
	#EDCF_AIFSN_MASK
 0x0f

	)

613 
	#EDCF_ACM_MASK
 0x10

	)

614 
	#EDCF_ACI_MASK
 0x60

	)

615 
	#EDCF_ACI_SHIFT
 5

	)

616 
	#EDCF_AIFSN_SHIFT
 12

	)

619 
	#EDCF_ECW_MIN
 0

	)

620 
	#EDCF_ECW_MAX
 15

	)

621 
	#EDCF_ECW2CW
(
exp
Ë((1 << (exp)Ë- 1)

	)

622 
	#EDCF_ECWMIN_MASK
 0x0f

	)

623 
	#EDCF_ECWMAX_MASK
 0xf0

	)

624 
	#EDCF_ECWMAX_SHIFT
 4

	)

627 
	#EDCF_TXOP_MIN
 0

	)

628 
	#EDCF_TXOP_MAX
 65535

	)

629 
	#EDCF_TXOP2USEC
(
tx›
Ë(—x›Ë<< 5)

	)

632 
	#NON_EDCF_AC_BE_ACI_STA
 0x02

	)

635 
	#EDCF_AC_BE_ACI_STA
 0x03

	)

636 
	#EDCF_AC_BE_ECW_STA
 0xA4

	)

637 
	#EDCF_AC_BE_TXOP_STA
 0x0000

	)

638 
	#EDCF_AC_BK_ACI_STA
 0x27

	)

639 
	#EDCF_AC_BK_ECW_STA
 0xA4

	)

640 
	#EDCF_AC_BK_TXOP_STA
 0x0000

	)

641 
	#EDCF_AC_VI_ACI_STA
 0x42

	)

642 
	#EDCF_AC_VI_ECW_STA
 0x43

	)

643 
	#EDCF_AC_VI_TXOP_STA
 0x005e

	)

644 
	#EDCF_AC_VO_ACI_STA
 0x62

	)

645 
	#EDCF_AC_VO_ECW_STA
 0x32

	)

646 
	#EDCF_AC_VO_TXOP_STA
 0x002f

	)

649 
	#EDCF_AC_BE_ACI_AP
 0x03

	)

650 
	#EDCF_AC_BE_ECW_AP
 0x64

	)

651 
	#EDCF_AC_BE_TXOP_AP
 0x0000

	)

652 
	#EDCF_AC_BK_ACI_AP
 0x27

	)

653 
	#EDCF_AC_BK_ECW_AP
 0xA4

	)

654 
	#EDCF_AC_BK_TXOP_AP
 0x0000

	)

655 
	#EDCF_AC_VI_ACI_AP
 0x41

	)

656 
	#EDCF_AC_VI_ECW_AP
 0x43

	)

657 
	#EDCF_AC_VI_TXOP_AP
 0x005e

	)

658 
	#EDCF_AC_VO_ACI_AP
 0x61

	)

659 
	#EDCF_AC_VO_ECW_AP
 0x32

	)

660 
	#EDCF_AC_VO_TXOP_AP
 0x002f

	)

663 
BWL_PRE_PACKED_STRUCT
 
	sedˇ_∑øm_õ
 {

664 
uöt8
 
	mqosöfo
;

665 
uöt8
 
	mrsvd
;

666 
edcf_a˝¨am_t
 
	ma˝¨am
[
AC_COUNT
];

667 } 
	gBWL_POST_PACKED_STRUCT
;

668 
edˇ_∑øm_õ
 
	tedˇ_∑øm_õ_t
;

669 
	#EDCA_PARAM_IE_LEN
 18

	)

672 
BWL_PRE_PACKED_STRUCT
 
	sqos_ˇp_õ
 {

673 
uöt8
 
	mqosöfo
;

674 } 
	gBWL_POST_PACKED_STRUCT
;

675 
qos_ˇp_õ
 
	tqos_ˇp_õ_t
;

677 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_qbss_lﬂd_õ
 {

678 
uöt8
 
	mid
;

679 
uöt8
 
	mÀngth
;

680 
uöt16
 
	m°©i⁄_cou¡
;

681 
uöt8
 
	mch™√l_utûiz©i⁄
;

682 
uöt16
 
	mØc
;

683 } 
	gBWL_POST_PACKED_STRUCT
;

684 
dŸ11_qbss_lﬂd_õ
 
	tdŸ11_qbss_lﬂd_õ_t
;

687 
	#FIXED_MSDU_SIZE
 0x8000

	)

688 
	#MSDU_SIZE_MASK
 0x7fff

	)

692 
	#INTEGER_SHIFT
 13

	)

693 
	#FRACTION_MASK
 0x1FFF

	)

696 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_m™agemít_nŸifiˇti⁄
 {

697 
uöt8
 
	mˇãg‹y
;

698 
uöt8
 
	ma˘i⁄
;

699 
uöt8
 
	mtokí
;

700 
uöt8
 
	m°©us
;

701 
uöt8
 
	md©a
[1];

702 } 
	gBWL_POST_PACKED_STRUCT
;

703 
	#DOT11_MGMT_NOTIFICATION_LEN
 4

	)

706 
	#WME_ADDTS_REQUEST
 0

	)

707 
	#WME_ADDTS_RESPONSE
 1

	)

708 
	#WME_DELTS_REQUEST
 2

	)

711 
	#WME_ADMISSION_ACCEPTED
 0

	)

712 
	#WME_INVALID_PARAMETERS
 1

	)

713 
	#WME_ADMISSION_REFUSED
 3

	)

716 
	#BCN_PRB_SSID
(
body
Ë((*)(bodyË+ 
DOT11_BCN_PRB_LEN
)

	)

719 
	#DOT11_OPEN_SYSTEM
 0

	)

720 
	#DOT11_SHARED_KEY
 1

	)

721 
	#DOT11_OPEN_SHARED
 2

	)

722 
	#DOT11_FAST_BSS
 3

	)

723 
	#DOT11_CHALLENGE_LEN
 128

	)

726 
	#FC_PVER_MASK
 0x3

	)

727 
	#FC_PVER_SHIFT
 0

	)

728 
	#FC_TYPE_MASK
 0xC

	)

729 
	#FC_TYPE_SHIFT
 2

	)

730 
	#FC_SUBTYPE_MASK
 0xF0

	)

731 
	#FC_SUBTYPE_SHIFT
 4

	)

732 
	#FC_TODS
 0x100

	)

733 
	#FC_TODS_SHIFT
 8

	)

734 
	#FC_FROMDS
 0x200

	)

735 
	#FC_FROMDS_SHIFT
 9

	)

736 
	#FC_MOREFRAG
 0x400

	)

737 
	#FC_MOREFRAG_SHIFT
 10

	)

738 
	#FC_RETRY
 0x800

	)

739 
	#FC_RETRY_SHIFT
 11

	)

740 
	#FC_PM
 0x1000

	)

741 
	#FC_PM_SHIFT
 12

	)

742 
	#FC_MOREDATA
 0x2000

	)

743 
	#FC_MOREDATA_SHIFT
 13

	)

744 
	#FC_WEP
 0x4000

	)

745 
	#FC_WEP_SHIFT
 14

	)

746 
	#FC_ORDER
 0x8000

	)

747 
	#FC_ORDER_SHIFT
 15

	)

750 
	#SEQNUM_SHIFT
 4

	)

751 
	#SEQNUM_MAX
 0x1000

	)

752 
	#FRAGNUM_MASK
 0xF

	)

757 
	#FC_TYPE_MNG
 0

	)

758 
	#FC_TYPE_CTL
 1

	)

759 
	#FC_TYPE_DATA
 2

	)

762 
	#FC_SUBTYPE_ASSOC_REQ
 0

	)

763 
	#FC_SUBTYPE_ASSOC_RESP
 1

	)

764 
	#FC_SUBTYPE_REASSOC_REQ
 2

	)

765 
	#FC_SUBTYPE_REASSOC_RESP
 3

	)

766 
	#FC_SUBTYPE_PROBE_REQ
 4

	)

767 
	#FC_SUBTYPE_PROBE_RESP
 5

	)

768 
	#FC_SUBTYPE_BEACON
 8

	)

769 
	#FC_SUBTYPE_ATIM
 9

	)

770 
	#FC_SUBTYPE_DISASSOC
 10

	)

771 
	#FC_SUBTYPE_AUTH
 11

	)

772 
	#FC_SUBTYPE_DEAUTH
 12

	)

773 
	#FC_SUBTYPE_ACTION
 13

	)

774 
	#FC_SUBTYPE_ACTION_NOACK
 14

	)

777 
	#FC_SUBTYPE_CTL_WRAPPER
 7

	)

778 
	#FC_SUBTYPE_BLOCKACK_REQ
 8

	)

779 
	#FC_SUBTYPE_BLOCKACK
 9

	)

780 
	#FC_SUBTYPE_PS_POLL
 10

	)

781 
	#FC_SUBTYPE_RTS
 11

	)

782 
	#FC_SUBTYPE_CTS
 12

	)

783 
	#FC_SUBTYPE_ACK
 13

	)

784 
	#FC_SUBTYPE_CF_END
 14

	)

785 
	#FC_SUBTYPE_CF_END_ACK
 15

	)

788 
	#FC_SUBTYPE_DATA
 0

	)

789 
	#FC_SUBTYPE_DATA_CF_ACK
 1

	)

790 
	#FC_SUBTYPE_DATA_CF_POLL
 2

	)

791 
	#FC_SUBTYPE_DATA_CF_ACK_POLL
 3

	)

792 
	#FC_SUBTYPE_NULL
 4

	)

793 
	#FC_SUBTYPE_CF_ACK
 5

	)

794 
	#FC_SUBTYPE_CF_POLL
 6

	)

795 
	#FC_SUBTYPE_CF_ACK_POLL
 7

	)

796 
	#FC_SUBTYPE_QOS_DATA
 8

	)

797 
	#FC_SUBTYPE_QOS_DATA_CF_ACK
 9

	)

798 
	#FC_SUBTYPE_QOS_DATA_CF_POLL
 10

	)

799 
	#FC_SUBTYPE_QOS_DATA_CF_ACK_POLL
 11

	)

800 
	#FC_SUBTYPE_QOS_NULL
 12

	)

801 
	#FC_SUBTYPE_QOS_CF_POLL
 14

	)

802 
	#FC_SUBTYPE_QOS_CF_ACK_POLL
 15

	)

805 
	#FC_SUBTYPE_ANY_QOS
(
s
Ë(((sË& 8Ë!0)

	)

806 
	#FC_SUBTYPE_ANY_NULL
(
s
Ë(((sË& 4Ë!0)

	)

807 
	#FC_SUBTYPE_ANY_CF_POLL
(
s
Ë(((sË& 2Ë!0)

	)

808 
	#FC_SUBTYPE_ANY_CF_ACK
(
s
Ë(((sË& 1Ë!0)

	)

811 
	#FC_KIND_MASK
 (
FC_TYPE_MASK
 | 
FC_SUBTYPE_MASK
)

	)

813 
	#FC_KIND
(
t
, 
s
Ë((—Ë<< 
FC_TYPE_SHIFT
Ë| ((sË<< 
FC_SUBTYPE_SHIFT
))

	)

815 
	#FC_SUBTYPE
(
fc
Ë(((fcË& 
FC_SUBTYPE_MASK
Ë>> 
FC_SUBTYPE_SHIFT
)

	)

816 
	#FC_TYPE
(
fc
Ë(((fcË& 
FC_TYPE_MASK
Ë>> 
FC_TYPE_SHIFT
)

	)

818 
	#FC_ASSOC_REQ
 
	`FC_KIND
(
FC_TYPE_MNG
, 
FC_SUBTYPE_ASSOC_REQ
)

	)

819 
	#FC_ASSOC_RESP
 
	`FC_KIND
(
FC_TYPE_MNG
, 
FC_SUBTYPE_ASSOC_RESP
)

	)

820 
	#FC_REASSOC_REQ
 
	`FC_KIND
(
FC_TYPE_MNG
, 
FC_SUBTYPE_REASSOC_REQ
)

	)

821 
	#FC_REASSOC_RESP
 
	`FC_KIND
(
FC_TYPE_MNG
, 
FC_SUBTYPE_REASSOC_RESP
)

	)

822 
	#FC_PROBE_REQ
 
	`FC_KIND
(
FC_TYPE_MNG
, 
FC_SUBTYPE_PROBE_REQ
)

	)

823 
	#FC_PROBE_RESP
 
	`FC_KIND
(
FC_TYPE_MNG
, 
FC_SUBTYPE_PROBE_RESP
)

	)

824 
	#FC_BEACON
 
	`FC_KIND
(
FC_TYPE_MNG
, 
FC_SUBTYPE_BEACON
)

	)

825 
	#FC_DISASSOC
 
	`FC_KIND
(
FC_TYPE_MNG
, 
FC_SUBTYPE_DISASSOC
)

	)

826 
	#FC_AUTH
 
	`FC_KIND
(
FC_TYPE_MNG
, 
FC_SUBTYPE_AUTH
)

	)

827 
	#FC_DEAUTH
 
	`FC_KIND
(
FC_TYPE_MNG
, 
FC_SUBTYPE_DEAUTH
)

	)

828 
	#FC_ACTION
 
	`FC_KIND
(
FC_TYPE_MNG
, 
FC_SUBTYPE_ACTION
)

	)

829 
	#FC_ACTION_NOACK
 
	`FC_KIND
(
FC_TYPE_MNG
, 
FC_SUBTYPE_ACTION_NOACK
)

	)

831 
	#FC_CTL_WRAPPER
 
	`FC_KIND
(
FC_TYPE_CTL
, 
FC_SUBTYPE_CTL_WRAPPER
)

	)

832 
	#FC_BLOCKACK_REQ
 
	`FC_KIND
(
FC_TYPE_CTL
, 
FC_SUBTYPE_BLOCKACK_REQ
)

	)

833 
	#FC_BLOCKACK
 
	`FC_KIND
(
FC_TYPE_CTL
, 
FC_SUBTYPE_BLOCKACK
)

	)

834 
	#FC_PS_POLL
 
	`FC_KIND
(
FC_TYPE_CTL
, 
FC_SUBTYPE_PS_POLL
)

	)

835 
	#FC_RTS
 
	`FC_KIND
(
FC_TYPE_CTL
, 
FC_SUBTYPE_RTS
)

	)

836 
	#FC_CTS
 
	`FC_KIND
(
FC_TYPE_CTL
, 
FC_SUBTYPE_CTS
)

	)

837 
	#FC_ACK
 
	`FC_KIND
(
FC_TYPE_CTL
, 
FC_SUBTYPE_ACK
)

	)

838 
	#FC_CF_END
 
	`FC_KIND
(
FC_TYPE_CTL
, 
FC_SUBTYPE_CF_END
)

	)

839 
	#FC_CF_END_ACK
 
	`FC_KIND
(
FC_TYPE_CTL
, 
FC_SUBTYPE_CF_END_ACK
)

	)

841 
	#FC_DATA
 
	`FC_KIND
(
FC_TYPE_DATA
, 
FC_SUBTYPE_DATA
)

	)

842 
	#FC_NULL_DATA
 
	`FC_KIND
(
FC_TYPE_DATA
, 
FC_SUBTYPE_NULL
)

	)

843 
	#FC_DATA_CF_ACK
 
	`FC_KIND
(
FC_TYPE_DATA
, 
FC_SUBTYPE_DATA_CF_ACK
)

	)

844 
	#FC_QOS_DATA
 
	`FC_KIND
(
FC_TYPE_DATA
, 
FC_SUBTYPE_QOS_DATA
)

	)

845 
	#FC_QOS_NULL
 
	`FC_KIND
(
FC_TYPE_DATA
, 
FC_SUBTYPE_QOS_NULL
)

	)

850 
	#QOS_PRIO_SHIFT
 0

	)

851 
	#QOS_PRIO_MASK
 0x0007

	)

852 
	#QOS_PRIO
(
qos
Ë(((qosË& 
QOS_PRIO_MASK
Ë>> 
QOS_PRIO_SHIFT
)

	)

855 
	#QOS_TID_SHIFT
 0

	)

856 
	#QOS_TID_MASK
 0x000f

	)

857 
	#QOS_TID
(
qos
Ë(((qosË& 
QOS_TID_MASK
Ë>> 
QOS_TID_SHIFT
)

	)

860 
	#QOS_EOSP_SHIFT
 4

	)

861 
	#QOS_EOSP_MASK
 0x0010

	)

862 
	#QOS_EOSP
(
qos
Ë(((qosË& 
QOS_EOSP_MASK
Ë>> 
QOS_EOSP_SHIFT
)

	)

865 
	#QOS_ACK_NORMAL_ACK
 0

	)

866 
	#QOS_ACK_NO_ACK
 1

	)

867 
	#QOS_ACK_NO_EXP_ACK
 2

	)

868 
	#QOS_ACK_BLOCK_ACK
 3

	)

869 
	#QOS_ACK_SHIFT
 5

	)

870 
	#QOS_ACK_MASK
 0x0060

	)

871 
	#QOS_ACK
(
qos
Ë(((qosË& 
QOS_ACK_MASK
Ë>> 
QOS_ACK_SHIFT
)

	)

874 
	#QOS_AMSDU_SHIFT
 7

	)

875 
	#QOS_AMSDU_MASK
 0x0080

	)

882 
	#DOT11_MNG_AUTH_ALGO_LEN
 2

	)

883 
	#DOT11_MNG_AUTH_SEQ_LEN
 2

	)

884 
	#DOT11_MNG_BEACON_INT_LEN
 2

	)

885 
	#DOT11_MNG_CAP_LEN
 2

	)

886 
	#DOT11_MNG_AP_ADDR_LEN
 6

	)

887 
	#DOT11_MNG_LISTEN_INT_LEN
 2

	)

888 
	#DOT11_MNG_REASON_LEN
 2

	)

889 
	#DOT11_MNG_AID_LEN
 2

	)

890 
	#DOT11_MNG_STATUS_LEN
 2

	)

891 
	#DOT11_MNG_TIMESTAMP_LEN
 8

	)

894 
	#DOT11_AID_MASK
 0x3fff

	)

897 
	#DOT11_RC_RESERVED
 0

	)

898 
	#DOT11_RC_UNSPECIFIED
 1

	)

899 
	#DOT11_RC_AUTH_INVAL
 2

	)

900 
	#DOT11_RC_DEAUTH_LEAVING
 3

	)

901 
	#DOT11_RC_INACTIVITY
 4

	)

902 
	#DOT11_RC_BUSY
 5

	)

903 
	#DOT11_RC_INVAL_CLASS_2
 6

	)

904 
	#DOT11_RC_INVAL_CLASS_3
 7

	)

905 
	#DOT11_RC_DISASSOC_LEAVING
 8

	)

906 
	#DOT11_RC_NOT_AUTH
 9

	)

907 
	#DOT11_RC_BAD_PC
 10

	)

908 
	#DOT11_RC_BAD_CHANNELS
 11

	)

912 
	#DOT11_RC_UNSPECIFIED_QOS
 32

	)

913 
	#DOT11_RC_INSUFFCIENT_BW
 33

	)

914 
	#DOT11_RC_EXCESSIVE_FRAMES
 34

	)

915 
	#DOT11_RC_TX_OUTSIDE_TXOP
 35

	)

916 
	#DOT11_RC_LEAVING_QBSS
 36

	)

917 
	#DOT11_RC_BAD_MECHANISM
 37

	)

918 
	#DOT11_RC_SETUP_NEEDED
 38

	)

919 
	#DOT11_RC_TIMEOUT
 39

	)

921 
	#DOT11_RC_MAX
 23

	)

924 
	#DOT11_SC_SUCCESS
 0

	)

925 
	#DOT11_SC_FAILURE
 1

	)

926 
	#DOT11_SC_CAP_MISMATCH
 10

	)

927 
	#DOT11_SC_REASSOC_FAIL
 11

	)

928 
	#DOT11_SC_ASSOC_FAIL
 12

	)

929 
	#DOT11_SC_AUTH_MISMATCH
 13

	)

930 
	#DOT11_SC_AUTH_SEQ
 14

	)

931 
	#DOT11_SC_AUTH_CHALLENGE_FAIL
 15

	)

932 
	#DOT11_SC_AUTH_TIMEOUT
 16

	)

933 
	#DOT11_SC_ASSOC_BUSY_FAIL
 17

	)

934 
	#DOT11_SC_ASSOC_RATE_MISMATCH
 18

	)

935 
	#DOT11_SC_ASSOC_SHORT_REQUIRED
 19

	)

936 
	#DOT11_SC_ASSOC_PBCC_REQUIRED
 20

	)

937 
	#DOT11_SC_ASSOC_AGILITY_REQUIRED
 21

	)

938 
	#DOT11_SC_ASSOC_SPECTRUM_REQUIRED
 22

	)

939 
	#DOT11_SC_ASSOC_BAD_POWER_CAP
 23

	)

940 
	#DOT11_SC_ASSOC_BAD_SUP_CHANNELS
 24

	)

941 
	#DOT11_SC_ASSOC_SHORTSLOT_REQUIRED
 25

	)

942 
	#DOT11_SC_ASSOC_ERPBCC_REQUIRED
 26

	)

943 
	#DOT11_SC_ASSOC_DSSOFDM_REQUIRED
 27

	)

945 
	#DOT11_SC_DECLINED
 37

	)

946 
	#DOT11_SC_INVALID_PARAMS
 38

	)

947 
	#DOT11_SC_INVALID_AKMP
 43

	)

948 
	#DOT11_SC_INVALID_MDID
 54

	)

949 
	#DOT11_SC_INVALID_FTIE
 55

	)

952 
	#DOT11_MNG_DS_PARAM_LEN
 1

	)

953 
	#DOT11_MNG_IBSS_PARAM_LEN
 2

	)

956 
	#DOT11_MNG_TIM_FIXED_LEN
 3

	)

957 
	#DOT11_MNG_TIM_DTIM_COUNT
 0

	)

958 
	#DOT11_MNG_TIM_DTIM_PERIOD
 1

	)

959 
	#DOT11_MNG_TIM_BITMAP_CTL
 2

	)

960 
	#DOT11_MNG_TIM_PVB
 3

	)

963 
	#TLV_TAG_OFF
 0

	)

964 
	#TLV_LEN_OFF
 1

	)

965 
	#TLV_HDR_LEN
 2

	)

966 
	#TLV_BODY_OFF
 2

	)

969 
	#DOT11_MNG_SSID_ID
 0

	)

970 
	#DOT11_MNG_RATES_ID
 1

	)

971 
	#DOT11_MNG_FH_PARMS_ID
 2

	)

972 
	#DOT11_MNG_DS_PARMS_ID
 3

	)

973 
	#DOT11_MNG_CF_PARMS_ID
 4

	)

974 
	#DOT11_MNG_TIM_ID
 5

	)

975 
	#DOT11_MNG_IBSS_PARMS_ID
 6

	)

976 
	#DOT11_MNG_COUNTRY_ID
 7

	)

977 
	#DOT11_MNG_HOPPING_PARMS_ID
 8

	)

978 
	#DOT11_MNG_HOPPING_TABLE_ID
 9

	)

979 
	#DOT11_MNG_REQUEST_ID
 10

	)

980 
	#DOT11_MNG_QBSS_LOAD_ID
 11

	)

981 
	#DOT11_MNG_EDCA_PARAM_ID
 12

	)

982 
	#DOT11_MNG_CHALLENGE_ID
 16

	)

983 
	#DOT11_MNG_PWR_CONSTRAINT_ID
 32

	)

984 
	#DOT11_MNG_PWR_CAP_ID
 33

	)

985 
	#DOT11_MNG_TPC_REQUEST_ID
 34

	)

986 
	#DOT11_MNG_TPC_REPORT_ID
 35

	)

987 
	#DOT11_MNG_SUPP_CHANNELS_ID
 36

	)

988 
	#DOT11_MNG_CHANNEL_SWITCH_ID
 37

	)

989 
	#DOT11_MNG_MEASURE_REQUEST_ID
 38

	)

990 
	#DOT11_MNG_MEASURE_REPORT_ID
 39

	)

991 
	#DOT11_MNG_QUIET_ID
 40

	)

992 
	#DOT11_MNG_IBSS_DFS_ID
 41

	)

993 
	#DOT11_MNG_ERP_ID
 42

	)

994 
	#DOT11_MNG_TS_DELAY_ID
 43

	)

995 
	#DOT11_MNG_HT_CAP
 45

	)

996 
	#DOT11_MNG_QOS_CAP_ID
 46

	)

997 
	#DOT11_MNG_NONERP_ID
 47

	)

998 
	#DOT11_MNG_RSN_ID
 48

	)

999 
	#DOT11_MNG_EXT_RATES_ID
 50

	)

1000 
	#DOT11_MNG_AP_CHREP_ID
 51

	)

1001 
	#DOT11_MNG_NBR_REP_ID
 52

	)

1002 
	#DOT11_MNG_MDIE_ID
 54

	)

1003 
	#DOT11_MNG_FTIE_ID
 55

	)

1004 
	#DOT11_MNG_FT_TI_ID
 56

	)

1005 
	#DOT11_MNG_REGCLASS_ID
 59

	)

1006 
	#DOT11_MNG_EXT_CSA_ID
 60

	)

1007 
	#DOT11_MNG_HT_ADD
 61

	)

1008 
	#DOT11_MNG_EXT_CHANNEL_OFFSET
 62

	)

1011 
	#DOT11_MNG_RRM_CAP_ID
 70

	)

1012 
	#DOT11_MNG_HT_BSS_COEXINFO_ID
 72

	)

1013 
	#DOT11_MNG_HT_BSS_CHANNEL_REPORT_ID
 73

	)

1014 
	#DOT11_MNG_HT_OBSS_ID
 74

	)

1015 
	#DOT11_MNG_EXT_CAP
 127

	)

1016 
	#DOT11_MNG_WPA_ID
 221

	)

1017 
	#DOT11_MNG_PROPR_ID
 221

	)

1019 
	#DOT11_MNG_VS_ID
 221

	)

1022 
	#DOT11_RATE_BASIC
 0x80

	)

1023 
	#DOT11_RATE_MASK
 0x7F

	)

1026 
	#DOT11_MNG_ERP_LEN
 1

	)

1027 
	#DOT11_MNG_NONERP_PRESENT
 0x01

	)

1028 
	#DOT11_MNG_USE_PROTECTION
 0x02

	)

1029 
	#DOT11_MNG_BARKER_PREAMBLE
 0x04

	)

1031 
	#DOT11_MGN_TS_DELAY_LEN
 4

	)

1032 
	#TS_DELAY_FIELD_SIZE
 4

	)

1035 
	#DOT11_CAP_ESS
 0x0001

	)

1036 
	#DOT11_CAP_IBSS
 0x0002

	)

1037 
	#DOT11_CAP_POLLABLE
 0x0004

	)

1038 
	#DOT11_CAP_POLL_RQ
 0x0008

	)

1039 
	#DOT11_CAP_PRIVACY
 0x0010

	)

1040 
	#DOT11_CAP_SHORT
 0x0020

	)

1041 
	#DOT11_CAP_PBCC
 0x0040

	)

1042 
	#DOT11_CAP_AGILITY
 0x0080

	)

1043 
	#DOT11_CAP_SPECTRUM
 0x0100

	)

1044 
	#DOT11_CAP_SHORTSLOT
 0x0400

	)

1045 
	#DOT11_CAP_RRM
 0x1000

	)

1046 
	#DOT11_CAP_CCK_OFDM
 0x2000

	)

1049 
	#DOT11_OBSS_COEX_MNG_SUPPORT
 0x01

	)

1052 
	#DOT11_ACTION_HDR_LEN
 2

	)

1053 
	#DOT11_ACTION_CAT_OFF
 0

	)

1054 
	#DOT11_ACTION_ACT_OFF
 1

	)

1057 
	#DOT11_ACTION_CAT_ERR_MASK
 0x80

	)

1058 
	#DOT11_ACTION_CAT_MASK
 0x7F

	)

1059 
	#DOT11_ACTION_CAT_SPECT_MNG
 0

	)

1060 
	#DOT11_ACTION_CAT_QOS
 1

	)

1061 
	#DOT11_ACTION_CAT_DLS
 2

	)

1062 
	#DOT11_ACTION_CAT_BLOCKACK
 3

	)

1063 
	#DOT11_ACTION_CAT_PUBLIC
 4

	)

1064 
	#DOT11_ACTION_CAT_RRM
 5

	)

1065 
	#DOT11_ACTION_CAT_FBT
 6

	)

1066 
	#DOT11_ACTION_CAT_HT
 7

	)

1067 
	#DOT11_ACTION_CAT_BSSMGMT
 10

	)

1068 
	#DOT11_ACTION_NOTIFICATION
 17

	)

1069 
	#DOT11_ACTION_CAT_VS
 127

	)

1072 
	#DOT11_SM_ACTION_M_REQ
 0

	)

1073 
	#DOT11_SM_ACTION_M_REP
 1

	)

1074 
	#DOT11_SM_ACTION_TPC_REQ
 2

	)

1075 
	#DOT11_SM_ACTION_TPC_REP
 3

	)

1076 
	#DOT11_SM_ACTION_CHANNEL_SWITCH
 4

	)

1077 
	#DOT11_SM_ACTION_EXT_CSA
 5

	)

1080 
	#DOT11_ACTION_ID_HT_CH_WIDTH
 0

	)

1081 
	#DOT11_ACTION_ID_HT_MIMO_PS
 1

	)

1084 
	#DOT11_PUB_ACTION_BSS_COEX_MNG
 0

	)

1085 
	#DOT11_PUB_ACTION_CHANNEL_SWITCH
 4

	)

1088 
	#DOT11_BA_ACTION_ADDBA_REQ
 0

	)

1089 
	#DOT11_BA_ACTION_ADDBA_RESP
 1

	)

1090 
	#DOT11_BA_ACTION_DELBA
 2

	)

1093 
	#DOT11_ADDBA_PARAM_AMSDU_SUP
 0x0001

	)

1094 
	#DOT11_ADDBA_PARAM_POLICY_MASK
 0x0002

	)

1095 
	#DOT11_ADDBA_PARAM_POLICY_SHIFT
 1

	)

1096 
	#DOT11_ADDBA_PARAM_TID_MASK
 0x003c

	)

1097 
	#DOT11_ADDBA_PARAM_TID_SHIFT
 2

	)

1098 
	#DOT11_ADDBA_PARAM_BSIZE_MASK
 0xffc0

	)

1099 
	#DOT11_ADDBA_PARAM_BSIZE_SHIFT
 6

	)

1101 
	#DOT11_ADDBA_POLICY_DELAYED
 0

	)

1102 
	#DOT11_ADDBA_POLICY_IMMEDIATE
 1

	)

1104 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_addba_ªq
 {

1105 
uöt8
 
	mˇãg‹y
;

1106 
uöt8
 
	ma˘i⁄
;

1107 
uöt8
 
	mtokí
;

1108 
uöt16
 
	maddba_∑øm_£t
;

1109 
uöt16
 
	mtimeout
;

1110 
uöt16
 
	m°¨t_£qnum
;

1111 } 
	gBWL_POST_PACKED_STRUCT
;

1112 
dŸ11_addba_ªq
 
	tdŸ11_addba_ªq_t
;

1113 
	#DOT11_ADDBA_REQ_LEN
 9

	)

1115 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_addba_ª•
 {

1116 
uöt8
 
	mˇãg‹y
;

1117 
uöt8
 
	ma˘i⁄
;

1118 
uöt8
 
	mtokí
;

1119 
uöt16
 
	m°©us
;

1120 
uöt16
 
	maddba_∑øm_£t
;

1121 
uöt16
 
	mtimeout
;

1122 } 
	gBWL_POST_PACKED_STRUCT
;

1123 
dŸ11_addba_ª•
 
	tdŸ11_addba_ª•_t
;

1124 
	#DOT11_ADDBA_RESP_LEN
 9

	)

1127 
	#DOT11_DELBA_PARAM_INIT_MASK
 0x0800

	)

1128 
	#DOT11_DELBA_PARAM_INIT_SHIFT
 11

	)

1129 
	#DOT11_DELBA_PARAM_TID_MASK
 0xf000

	)

1130 
	#DOT11_DELBA_PARAM_TID_SHIFT
 12

	)

1132 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_dñba
 {

1133 
uöt8
 
	mˇãg‹y
;

1134 
uöt8
 
	ma˘i⁄
;

1135 
uöt16
 
	mdñba_∑øm_£t
;

1136 
uöt16
 
	mªas⁄
;

1137 } 
	gBWL_POST_PACKED_STRUCT
;

1138 
dŸ11_dñba
 
	tdŸ11_dñba_t
;

1139 
	#DOT11_DELBA_LEN
 6

	)

1145 
	#DOT11_RRM_CAP_LEN
 5

	)

1146 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_ºm_ˇp_õ
 {

1147 
uöt8
 
	mˇp
[
DOT11_RRM_CAP_LEN
];

1148 } 
	gBWL_POST_PACKED_STRUCT
;

1149 
dŸ11_ºm_ˇp_õ
 
	tdŸ11_ºm_ˇp_õ_t
;

1152 
	#DOT11_RRM_CAP_LINK
 0

	)

1153 
	#DOT11_RRM_CAP_NEIGHBOR_REPORT
 1

	)

1154 
	#DOT11_RRM_CAP_PARALLEL
 2

	)

1155 
	#DOT11_RRM_CAP_REPEATED
 3

	)

1156 
	#DOT11_RRM_CAP_BCN_PASSIVE
 4

	)

1157 
	#DOT11_RRM_CAP_BCN_ACTIVE
 5

	)

1158 
	#DOT11_RRM_CAP_BCN_TABLE
 6

	)

1159 
	#DOT11_RRM_CAP_BCN_REP_COND
 7

	)

1160 
	#DOT11_RRM_CAP_AP_CHANREP
 16

	)

1163 
	#DOT11_RM_ACTION_RM_REQ
 0

	)

1164 
	#DOT11_RM_ACTION_RM_REP
 1

	)

1165 
	#DOT11_RM_ACTION_LM_REQ
 2

	)

1166 
	#DOT11_RM_ACTION_LM_REP
 3

	)

1167 
	#DOT11_RM_ACTION_NR_REQ
 4

	)

1168 
	#DOT11_RM_ACTION_NR_REP
 5

	)

1171 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_rm_a˘i⁄
 {

1172 
uöt8
 
	mˇãg‹y
;

1173 
uöt8
 
	ma˘i⁄
;

1174 
uöt8
 
	mtokí
;

1175 
uöt8
 
	md©a
[1];

1176 } 
	gBWL_POST_PACKED_STRUCT
;

1177 
dŸ11_rm_a˘i⁄
 
	tdŸ11_rm_a˘i⁄_t
;

1178 
	#DOT11_RM_ACTION_LEN
 3

	)

1180 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_rmªq
 {

1181 
uöt8
 
	mˇãg‹y
;

1182 
uöt8
 
	ma˘i⁄
;

1183 
uöt8
 
	mtokí
;

1184 
uöt16
 
	mªps
;

1185 } 
	gBWL_POST_PACKED_STRUCT
;

1186 
dŸ11_rmªq
 
	tdŸ11_rmªq_t
;

1187 
	#DOT11_RMREQ_LEN
 5

	)

1189 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_rm_õ
 {

1190 
uöt8
 
	mid
;

1191 
uöt8
 
	mÀn
;

1192 
uöt8
 
	mtokí
;

1193 
uöt8
 
	mmode
;

1194 
uöt8
 
	mty≥
;

1195 } 
	gBWL_POST_PACKED_STRUCT
;

1196 
dŸ11_rm_õ
 
	tdŸ11_rm_õ_t
;

1197 
	#DOT11_RM_IE_LEN
 5

	)

1200 
	#DOT11_RMREQ_MODE_PARALLEL
 1

	)

1201 
	#DOT11_RMREQ_MODE_ENABLE
 2

	)

1202 
	#DOT11_RMREQ_MODE_REQUEST
 4

	)

1203 
	#DOT11_RMREQ_MODE_REPORT
 8

	)

1204 
	#DOT11_RMREQ_MODE_DURMAND
 0x10

	)

1207 
	#DOT11_RMREP_MODE_LATE
 1

	)

1208 
	#DOT11_RMREP_MODE_INCAPABLE
 2

	)

1209 
	#DOT11_RMREP_MODE_REFUSED
 4

	)

1211 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_rmªq_b˙
 {

1212 
uöt8
 
	mid
;

1213 
uöt8
 
	mÀn
;

1214 
uöt8
 
	mtokí
;

1215 
uöt8
 
	mmode
;

1216 
uöt8
 
	mty≥
;

1217 
uöt8
 
	mªg
;

1218 
uöt8
 
	mch™√l
;

1219 
uöt16
 
	möãrvÆ
;

1220 
uöt16
 
	mduøti⁄
;

1221 
uöt8
 
	mb˙_mode
;

1222 
ëhî_addr
 
	mbssid
;

1223 } 
	gBWL_POST_PACKED_STRUCT
;

1224 
dŸ11_rmªq_b˙
 
	tdŸ11_rmªq_b˙_t
;

1225 
	#DOT11_RMREQ_BCN_LEN
 18

	)

1227 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_rmªp_b˙
 {

1228 
uöt8
 
	mªg
;

1229 
uöt8
 
	mch™√l
;

1230 
uöt32
 
	m°¨âime
[2];

1231 
uöt16
 
	mduøti⁄
;

1232 
uöt8
 
	m‰ame_öfo
;

1233 
uöt8
 
	mr˝i
;

1234 
uöt8
 
	mr¢i
;

1235 
ëhî_addr
 
	mbssid
;

1236 
uöt8
 
	m™ã¬a_id
;

1237 
uöt32
 
	m∑ª¡_tsf
;

1238 } 
	gBWL_POST_PACKED_STRUCT
;

1239 
dŸ11_rmªp_b˙
 
	tdŸ11_rmªp_b˙_t
;

1240 
	#DOT11_RMREP_BCN_LEN
 26

	)

1243 
	#DOT11_RMREQ_BCN_PASSIVE
 0

	)

1244 
	#DOT11_RMREQ_BCN_ACTIVE
 1

	)

1245 
	#DOT11_RMREQ_BCN_TABLE
 2

	)

1248 
	#DOT11_RMREQ_BCN_SSID_ID
 0

	)

1249 
	#DOT11_RMREQ_BCN_REPINFO_ID
 1

	)

1250 
	#DOT11_RMREQ_BCN_REPDET_ID
 2

	)

1251 
	#DOT11_RMREQ_BCN_REQUEST_ID
 10

	)

1252 
	#DOT11_RMREQ_BCN_APCHREP_ID
 51

	)

1255 
	#DOT11_RMREQ_BCN_REPDET_FIXED
 0

	)

1256 
	#DOT11_RMREQ_BCN_REPDET_REQUEST
 1

	)

1257 
	#DOT11_RMREQ_BCN_REPDET_ALL
 2

	)

1260 
	#DOT11_RMREP_BCN_FRM_BODY
 1

	)

1263 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_rmªp_nbr
 {

1264 
ëhî_addr
 
	mbssid
;

1265 
uöt32
 
	mbssid_öfo
;

1266 
uöt8
 
	mªg
;

1267 
uöt8
 
	mch™√l
;

1268 
uöt8
 
	mphyty≥
;

1269 } 
	gBWL_POST_PACKED_STRUCT
;

1270 
dŸ11_rmªp_nbr
 
	tdŸ11_rmªp_nbr_t
;

1271 
	#DOT11_RMREP_NBR_LEN
 13

	)

1274 
	#DOT11_BSSTYPE_INFRASTRUCTURE
 0

	)

1275 
	#DOT11_BSSTYPE_INDEPENDENT
 1

	)

1276 
	#DOT11_BSSTYPE_ANY
 2

	)

1277 
	#DOT11_SCANTYPE_ACTIVE
 0

	)

1278 
	#DOT11_SCANTYPE_PASSIVE
 1

	)

1281 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_lmªq
 {

1282 
uöt8
 
	mˇãg‹y
;

1283 
uöt8
 
	ma˘i⁄
;

1284 
uöt8
 
	mtokí
;

1285 
uöt8
 
	mtxpwr
;

1286 
uöt8
 
	mmaxtxpwr
;

1287 } 
	gBWL_POST_PACKED_STRUCT
;

1288 
dŸ11_lmªq
 
	tdŸ11_lmªq_t
;

1289 
	#DOT11_LMREQ_LEN
 5

	)

1291 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_lmªp
 {

1292 
uöt8
 
	mˇãg‹y
;

1293 
uöt8
 
	ma˘i⁄
;

1294 
uöt8
 
	mtokí
;

1295 
dŸ11_çc_ªp_t
 
	mçc
;

1296 
uöt8
 
	mrx™t
;

1297 
uöt8
 
	mtx™t
;

1298 
uöt8
 
	mr˝i
;

1299 
uöt8
 
	mr¢i
;

1300 } 
	gBWL_POST_PACKED_STRUCT
;

1301 
dŸ11_lmªp
 
	tdŸ11_lmªp_t
;

1302 
	#DOT11_LMREP_LEN
 11

	)

1305 
	#PREN_PREAMBLE
 24

	)

1306 
	#PREN_MM_EXT
 12

	)

1307 
	#PREN_PREAMBLE_EXT
 4

	)

1310 
	#RIFS_11N_TIME
 2

	)

1314 
	#HT_SIG1_MCS_MASK
 0x00007F

	)

1315 
	#HT_SIG1_CBW
 0x000080

	)

1316 
	#HT_SIG1_HT_LENGTH
 0xFFFF00

	)

1319 
	#HT_SIG2_SMOOTHING
 0x000001

	)

1320 
	#HT_SIG2_NOT_SOUNDING
 0x000002

	)

1321 
	#HT_SIG2_RESERVED
 0x000004

	)

1322 
	#HT_SIG2_AGGREGATION
 0x000008

	)

1323 
	#HT_SIG2_STBC_MASK
 0x000030

	)

1324 
	#HT_SIG2_STBC_SHIFT
 4

	)

1325 
	#HT_SIG2_FEC_CODING
 0x000040

	)

1326 
	#HT_SIG2_SHORT_GI
 0x000080

	)

1327 
	#HT_SIG2_ESS_MASK
 0x000300

	)

1328 
	#HT_SIG2_ESS_SHIFT
 8

	)

1329 
	#HT_SIG2_CRC
 0x03FC00

	)

1330 
	#HT_SIG2_TAIL
 0x1C0000

	)

1333 
	#APHY_SLOT_TIME
 9

	)

1334 
	#APHY_SIFS_TIME
 16

	)

1335 
	#APHY_DIFS_TIME
 (
APHY_SIFS_TIME
 + (2 * 
APHY_SLOT_TIME
))

	)

1336 
	#APHY_PREAMBLE_TIME
 16

	)

1337 
	#APHY_SIGNAL_TIME
 4

	)

1338 
	#APHY_SYMBOL_TIME
 4

	)

1339 
	#APHY_SERVICE_NBITS
 16

	)

1340 
	#APHY_TAIL_NBITS
 6

	)

1341 
	#APHY_CWMIN
 15

	)

1344 
	#BPHY_SLOT_TIME
 20

	)

1345 
	#BPHY_SIFS_TIME
 10

	)

1346 
	#BPHY_DIFS_TIME
 50

	)

1347 
	#BPHY_PLCP_TIME
 192

	)

1348 
	#BPHY_PLCP_SHORT_TIME
 96

	)

1349 
	#BPHY_CWMIN
 31

	)

1352 
	#DOT11_OFDM_SIGNAL_EXTENSION
 6

	)

1354 
	#PHY_CWMAX
 1023

	)

1356 
	#DOT11_MAXNUMFRAGS
 16

	)

1359 
	sd11˙t
 {

1360 
uöt32
 
	mtx‰ag
;

1361 
uöt32
 
	mtxmu…i
;

1362 
uöt32
 
	mtxÁû
;

1363 
uöt32
 
	mtxªåy
;

1364 
uöt32
 
	mtxªåõ
;

1365 
uöt32
 
	mrxdup
;

1366 
uöt32
 
	mtxπs
;

1367 
uöt32
 
	mtxno˘s
;

1368 
uöt32
 
	mtxnﬂck
;

1369 
uöt32
 
	mrx‰ag
;

1370 
uöt32
 
	mrxmu…i
;

1371 
uöt32
 
	mrx¸c
;

1372 
uöt32
 
	mtx‰m¢t
;

1373 
uöt32
 
	mrxundec
;

1374 } 
	td11˙t_t
;

1377 
	#BRCM_PROP_OUI
 "\x00\x90\x4C"

	)

1381 
	#BRCM_OUI
 "\x00\x10\x18"

	)

1384 
BWL_PRE_PACKED_STRUCT
 
	sbrcm_õ
 {

1385 
uöt8
 
	mid
;

1386 
uöt8
 
	mÀn
;

1387 
uöt8
 
	moui
[3];

1388 
uöt8
 
	mvî
;

1389 
uöt8
 
	massoc
;

1390 
uöt8
 
	mÊags
;

1391 
uöt8
 
	mÊags1
;

1392 
uöt16
 
	mamsdu_mtu_¥ef
;

1393 } 
	gBWL_POST_PACKED_STRUCT
;

1394 
brcm_õ
 
	tbrcm_õ_t
;

1395 
	#BRCM_IE_LEN
 11

	)

1396 
	#BRCM_IE_VER
 2

	)

1397 
	#BRCM_IE_LEGACY_AES_VER
 1

	)

1400 #ifde‡
WLAFTERBURNER


1401 
	#BRF_ABCAP
 0x1

	)

1402 
	#BRF_ABRQRD
 0x2

	)

1403 
	#BRF_ABCOUNTER_MASK
 0xf0

	)

1404 
	#BRF_ABCOUNTER_SHIFT
 4

	)

1406 
	#BRF_LZWDS
 0x4

	)

1407 
	#BRF_BLOCKACK
 0x8

	)

1410 
	#BRF1_AMSDU
 0x1

	)

1411 
	#BRF1_WMEPS
 0x4

	)

1412 
	#BRF1_PSOFIX
 0x8

	)

1413 
	#BRF1_RX_LARGE_AGG
 0x10

	)

1414 
	#BRF1_SOFTAP
 0x40

	)

1416 #ifde‡
WLAFTERBURNER


1417 
	#AB_WDS_TIMEOUT_MAX
 15

	)

1418 
	#AB_WDS_TIMEOUT_MIN
 1

	)

1421 
	#AB_GUARDCOUNT
 10

	)

1424 
BWL_PRE_PACKED_STRUCT
 
	svndr_õ
 {

1425 
uch¨
 
	mid
;

1426 
uch¨
 
	mÀn
;

1427 
uch¨
 
	moui
 [3];

1428 
uch¨
 
	md©a
 [1];

1429 } 
	gBWL_POST_PACKED_STRUCT
;

1430 
vndr_õ
 
	tvndr_õ_t
;

1432 
	#VNDR_IE_HDR_LEN
 2

	)

1433 
	#VNDR_IE_MIN_LEN
 3

	)

1434 
	#VNDR_IE_MAX_LEN
 256

	)

1437 
	#MCSSET_LEN
 16

	)

1438 
	#MAX_MCS_NUM
 (128)

	)

1440 
BWL_PRE_PACKED_STRUCT
 
	sht_ˇp_õ
 {

1441 
uöt16
 
	mˇp
;

1442 
uöt8
 
	m∑øms
;

1443 
uöt8
 
	msuµ_mcs
[
MCSSET_LEN
];

1444 
uöt16
 
	mext_htˇp
;

1445 
uöt32
 
	mtxbf_ˇp
;

1446 
uöt8
 
	mas_ˇp
;

1447 } 
	gBWL_POST_PACKED_STRUCT
;

1448 
ht_ˇp_õ
 
	tht_ˇp_õ_t
;

1452 
BWL_PRE_PACKED_STRUCT
 
	sht_¥›_ˇp_õ
 {

1453 
uöt8
 
	mid
;

1454 
uöt8
 
	mÀn
;

1455 
uöt8
 
	moui
[3];

1456 
uöt8
 
	mty≥
;

1457 
ht_ˇp_õ_t
 
	mˇp_õ
;

1458 } 
	gBWL_POST_PACKED_STRUCT
;

1459 
ht_¥›_ˇp_õ
 
	tht_¥›_ˇp_õ_t
;

1461 
	#HT_PROP_IE_OVERHEAD
 4

	)

1462 
	#HT_CAP_IE_LEN
 26

	)

1463 
	#HT_CAP_IE_TYPE
 51

	)

1465 
	#HT_CAP_LDPC_CODING
 0x0001

	)

1466 
	#HT_CAP_40MHZ
 0x0002

	)

1467 
	#HT_CAP_MIMO_PS_MASK
 0x000C

	)

1468 
	#HT_CAP_MIMO_PS_SHIFT
 0x0002

	)

1469 
	#HT_CAP_MIMO_PS_OFF
 0x0003

	)

1470 
	#HT_CAP_MIMO_PS_RTS
 0x0001

	)

1471 
	#HT_CAP_MIMO_PS_ON
 0x0000

	)

1472 
	#HT_CAP_GF
 0x0010

	)

1473 
	#HT_CAP_SHORT_GI_20
 0x0020

	)

1474 
	#HT_CAP_SHORT_GI_40
 0x0040

	)

1475 
	#HT_CAP_TX_STBC
 0x0080

	)

1476 
	#HT_CAP_RX_STBC_MASK
 0x0300

	)

1477 
	#HT_CAP_RX_STBC_SHIFT
 8

	)

1478 
	#HT_CAP_DELAYED_BA
 0x0400

	)

1479 
	#HT_CAP_MAX_AMSDU
 0x0800

	)

1480 
	#HT_CAP_DSSS_CCK
 0x1000

	)

1481 
	#HT_CAP_PSMP
 0x2000

	)

1482 
	#HT_CAP_40MHZ_INTOLERANT
 0x4000

	)

1483 
	#HT_CAP_LSIG_TXOP
 0x8000

	)

1485 
	#HT_CAP_RX_STBC_NO
 0x0

	)

1486 
	#HT_CAP_RX_STBC_ONE_STREAM
 0x1

	)

1487 
	#HT_CAP_RX_STBC_TWO_STREAM
 0x2

	)

1488 
	#HT_CAP_RX_STBC_THREE_STREAM
 0x3

	)

1490 
	#HT_MAX_AMSDU
 7935

	)

1491 
	#HT_MIN_AMSDU
 3835

	)

1493 
	#HT_PARAMS_RX_FACTOR_MASK
 0x03

	)

1494 
	#HT_PARAMS_DENSITY_MASK
 0x1C

	)

1495 
	#HT_PARAMS_DENSITY_SHIFT
 2

	)

1498 
	#AMPDU_MAX_MPDU_DENSITY
 7

	)

1499 
	#AMPDU_RX_FACTOR_8K
 0

	)

1500 
	#AMPDU_RX_FACTOR_16K
 1

	)

1501 
	#AMPDU_RX_FACTOR_32K
 2

	)

1502 
	#AMPDU_RX_FACTOR_64K
 3

	)

1503 
	#AMPDU_RX_FACTOR_BASE
 8*1024

	)

1505 
	#AMPDU_DELIMITER_LEN
 4

	)

1506 
	#AMPDU_DELIMITER_LEN_MAX
 63

	)

1508 
BWL_PRE_PACKED_STRUCT
 
	sht_add_õ
 {

1509 
uöt8
 
	m˘l_ch
;

1510 
uöt8
 
	mbyã1
;

1511 
uöt16
 
	m›mode
;

1512 
uöt16
 
	mmisc_bôs
;

1513 
uöt8
 
	mbasic_mcs
[
MCSSET_LEN
];

1514 } 
	gBWL_POST_PACKED_STRUCT
;

1515 
ht_add_õ
 
	tht_add_õ_t
;

1519 
BWL_PRE_PACKED_STRUCT
 
	sht_¥›_add_õ
 {

1520 
uöt8
 
	mid
;

1521 
uöt8
 
	mÀn
;

1522 
uöt8
 
	moui
[3];

1523 
uöt8
 
	mty≥
;

1524 
ht_add_õ_t
 
	madd_õ
;

1525 } 
	gBWL_POST_PACKED_STRUCT
;

1526 
ht_¥›_add_õ
 
	tht_¥›_add_õ_t
;

1528 
	#HT_ADD_IE_LEN
 22

	)

1529 
	#HT_ADD_IE_TYPE
 52

	)

1532 
	#HT_BW_ANY
 0x04

	)

1533 
	#HT_RIFS_PERMITTED
 0x08

	)

1536 
	#HT_OPMODE_MASK
 0x0003

	)

1537 
	#HT_OPMODE_SHIFT
 0

	)

1538 
	#HT_OPMODE_PURE
 0x0000

	)

1539 
	#HT_OPMODE_OPTIONAL
 0x0001

	)

1540 
	#HT_OPMODE_HT20IN40
 0x0002

	)

1541 
	#HT_OPMODE_MIXED
 0x0003

	)

1542 
	#HT_OPMODE_NONGF
 0x0004

	)

1543 
	#DOT11N_TXBURST
 0x0008

	)

1544 
	#DOT11N_OBSS_NONHT
 0x0010

	)

1547 
	#HT_BASIC_STBC_MCS
 0x007f

	)

1548 
	#HT_DUAL_STBC_PROT
 0x0080

	)

1549 
	#HT_SECOND_BCN
 0x0100

	)

1550 
	#HT_LSIG_TXOP
 0x0200

	)

1551 
	#HT_PCO_ACTIVE
 0x0400

	)

1552 
	#HT_PCO_PHASE
 0x0800

	)

1555 
	#DOT11N_2G_TXBURST_LIMIT
 6160

	)

1556 
	#DOT11N_5G_TXBURST_LIMIT
 3080

	)

1559 
	#GET_HT_OPMODE
(
add_õ
Ë((
	`…oh16_ua
(&add_õ->
›mode
Ë& 
HT_OPMODE_MASK
) \

1560 >> 
HT_OPMODE_SHIFT
)

	)

1561 
	#HT_MIXEDMODE_PRESENT
(
add_õ
Ë((
	`…oh16_ua
(&add_õ->
›mode
Ë& 
HT_OPMODE_MASK
) \

1562 =
HT_OPMODE_MIXED
)

	)

1563 
	#HT_HT20_PRESENT
(
add_õ
Ë((
	`…oh16_ua
(&add_õ->
›mode
Ë& 
HT_OPMODE_MASK
) \

1564 =
HT_OPMODE_HT20IN40
)

	)

1565 
	#HT_OPTIONAL_PRESENT
(
add_õ
Ë((
	`…oh16_ua
(&add_õ->
›mode
Ë& 
HT_OPMODE_MASK
) \

1566 =
HT_OPMODE_OPTIONAL
)

	)

1567 
	#HT_USE_PROTECTION
(
add_õ
Ë(
	`HT_HT20_PRESENT
((add_ie)) || \

1568 
	`HT_MIXEDMODE_PRESENT
((
add_õ
)))

	)

1569 
	#HT_NONGF_PRESENT
(
add_õ
Ë((
	`…oh16_ua
(&add_õ->
›mode
Ë& 
HT_OPMODE_NONGF
) \

1570 =
HT_OPMODE_NONGF
)

	)

1571 
	#DOT11N_TXBURST_PRESENT
(
add_õ
Ë((
	`…oh16_ua
(&add_õ->
›mode
Ë& 
DOT11N_TXBURST
) \

1572 =
DOT11N_TXBURST
)

	)

1573 
	#DOT11N_OBSS_NONHT_PRESENT
(
add_õ
Ë((
	`…oh16_ua
(&add_õ->
›mode
Ë& 
DOT11N_OBSS_NONHT
) \

1574 =
DOT11N_OBSS_NONHT
)

	)

1576 
BWL_PRE_PACKED_STRUCT
 
	sobss_∑øms
 {

1577 
uöt16
 
	m∑ssive_dwñl
;

1578 
uöt16
 
	ma˘ive_dwñl
;

1579 
uöt16
 
	mbss_widthsˇn_öãrvÆ
;

1580 
uöt16
 
	m∑ssive_tŸÆ
;

1581 
uöt16
 
	ma˘ive_tŸÆ
;

1582 
uöt16
 
	mch™width_å™sôi⁄_dly
;

1583 
uöt16
 
	ma˘ivôy_thªshﬁd
;

1584 } 
	gBWL_POST_PACKED_STRUCT
;

1585 
obss_∑øms
 
	tobss_∑øms_t
;

1587 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_obss_õ
 {

1588 
uöt8
 
	mid
;

1589 
uöt8
 
	mÀn
;

1590 
obss_∑øms_t
 
	mobss_∑øms
;

1591 } 
	gBWL_POST_PACKED_STRUCT
;

1592 
dŸ11_obss_õ
 
	tdŸ11_obss_õ_t
;

1593 
	#DOT11_OBSS_SCAN_IE_LEN
 (
obss_∑øms_t
)

	)

1596 
	#HT_CTRL_LA_TRQ
 0x00000002

	)

1597 
	#HT_CTRL_LA_MAI
 0x0000003C

	)

1598 
	#HT_CTRL_LA_MAI_SHIFT
 2

	)

1599 
	#HT_CTRL_LA_MAI_MRQ
 0x00000004

	)

1600 
	#HT_CTRL_LA_MAI_MSI
 0x00000038

	)

1601 
	#HT_CTRL_LA_MFSI
 0x000001C0

	)

1602 
	#HT_CTRL_LA_MFSI_SHIFT
 6

	)

1603 
	#HT_CTRL_LA_MFB_ASELC
 0x0000FE00

	)

1604 
	#HT_CTRL_LA_MFB_ASELC_SH
 9

	)

1605 
	#HT_CTRL_LA_ASELC_CMD
 0x00000C00

	)

1606 
	#HT_CTRL_LA_ASELC_DATA
 0x0000F000

	)

1607 
	#HT_CTRL_CAL_POS
 0x00030000

	)

1608 
	#HT_CTRL_CAL_SEQ
 0x000C0000

	)

1609 
	#HT_CTRL_CSI_STEERING
 0x00C00000

	)

1610 
	#HT_CTRL_CSI_STEER_SHIFT
 22

	)

1611 
	#HT_CTRL_CSI_STEER_NFB
 0

	)

1612 
	#HT_CTRL_CSI_STEER_CSI
 1

	)

1613 
	#HT_CTRL_CSI_STEER_NCOM
 2

	)

1614 
	#HT_CTRL_CSI_STEER_COM
 3

	)

1615 
	#HT_CTRL_NDP_ANNOUNCE
 0x01000000

	)

1616 
	#HT_CTRL_AC_CONSTRAINT
 0x40000000

	)

1617 
	#HT_CTRL_RDG_MOREPPDU
 0x80000000

	)

1619 
	#HT_OPMODE_OPTIONAL
 0x0001

	)

1620 
	#HT_OPMODE_HT20IN40
 0x0002

	)

1621 
	#HT_OPMODE_MIXED
 0x0003

	)

1622 
	#HT_OPMODE_NONGF
 0x0004

	)

1623 
	#DOT11N_TXBURST
 0x0008

	)

1624 
	#DOT11N_OBSS_NONHT
 0x0010

	)

1628 
	#WPA_OUI
 "\x00\x50\xF2"

	)

1629 
	#WPA_OUI_LEN
 3

	)

1630 
	#WPA_OUI_TYPE
 1

	)

1631 
	#WPA_VERSION
 1

	)

1632 
	#WPA2_OUI
 "\x00\x0F\xAC"

	)

1633 
	#WPA2_OUI_LEN
 3

	)

1634 
	#WPA2_VERSION
 1

	)

1635 
	#WPA2_VERSION_LEN
 2

	)

1638 
	#WPS_OUI
 "\x00\x50\xF2"

	)

1639 
	#WPS_OUI_LEN
 3

	)

1640 
	#WPS_OUI_TYPE
 4

	)

1643 
	#WFA_OUI
 "\x50\x6F\x9A"

	)

1644 
	#WFA_OUI_LEN
 3

	)

1646 
	#WFA_OUI_TYPE_WPA
 1

	)

1647 
	#WFA_OUI_TYPE_WPS
 4

	)

1648 
	#WFA_OUI_TYPE_TPC
 8

	)

1649 
	#WFA_OUI_TYPE_P2P
 9

	)

1652 
	#RSN_AKM_NONE
 0

	)

1653 
	#RSN_AKM_UNSPECIFIED
 1

	)

1654 
	#RSN_AKM_PSK
 2

	)

1655 
	#RSN_AKM_FBT_1X
 3

	)

1656 
	#RSN_AKM_FBT_PSK
 4

	)

1659 
	#DOT11_MAX_DEFAULT_KEYS
 4

	)

1660 
	#DOT11_MAX_KEY_SIZE
 32

	)

1661 
	#DOT11_MAX_IV_SIZE
 16

	)

1662 
	#DOT11_EXT_IV_FLAG
 (1<<5)

	)

1663 
	#DOT11_WPA_KEY_RSC_LEN
 8

	)

1665 
	#WEP1_KEY_SIZE
 5

	)

1666 
	#WEP1_KEY_HEX_SIZE
 10

	)

1667 
	#WEP128_KEY_SIZE
 13

	)

1668 
	#WEP128_KEY_HEX_SIZE
 26

	)

1669 
	#TKIP_MIC_SIZE
 8

	)

1670 
	#TKIP_EOM_SIZE
 7

	)

1671 
	#TKIP_EOM_FLAG
 0x5a

	)

1672 
	#TKIP_KEY_SIZE
 32

	)

1673 
	#TKIP_MIC_AUTH_TX
 16

	)

1674 
	#TKIP_MIC_AUTH_RX
 24

	)

1675 
	#TKIP_MIC_SUP_RX
 
TKIP_MIC_AUTH_TX


	)

1676 
	#TKIP_MIC_SUP_TX
 
TKIP_MIC_AUTH_RX


	)

1677 
	#AES_KEY_SIZE
 16

	)

1678 
	#AES_MIC_SIZE
 8

	)

1681 
	#WCN_OUI
 "\x00\x50\xf2"

	)

1682 
	#WCN_TYPE
 4

	)

1688 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_mdid_õ
 {

1689 
uöt8
 
	mid
;

1690 
uöt8
 
	mÀn
;

1691 
uöt16
 
	mmdid
;

1692 
uöt8
 
	mˇp
;

1693 } 
	gBWL_POST_PACKED_STRUCT
;

1694 
dŸ11_mdid_õ
 
	tdŸ11_mdid_õ_t
;

1696 
	#FBT_MDID_CAP_OVERDS
 0x01

	)

1697 
	#FBT_MDID_CAP_RRP
 0x02

	)

1700 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_·_õ
 {

1701 
uöt8
 
	mid
;

1702 
uöt8
 
	mÀn
;

1703 
uöt16
 
	mmic_c⁄åﬁ
;

1704 
uöt8
 
	mmic
[16];

1705 
uöt8
 
	m™⁄˚
[32];

1706 
uöt8
 
	m¢⁄˚
[32];

1707 } 
	gBWL_POST_PACKED_STRUCT
;

1708 
dŸ11_·_õ
 
	tdŸ11_·_õ_t
;

1711 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_gtk_õ
 {

1712 
uöt8
 
	mid
;

1713 
uöt8
 
	mÀn
;

1714 
uöt16
 
	mkey_öfo
;

1715 
uöt8
 
	mkey_Àn
;

1716 
uöt8
 
	mrsc
[8];

1717 
uöt8
 
	md©a
[1];

1718 } 
	gBWL_POST_PACKED_STRUCT
;

1719 
dŸ11_gtk_õ
 
	tdŸ11_gtk_õ_t
;

1723 
	~<∑cked_£˘i⁄_íd.h
>

	@dhdutil/include/proto/802.1d.h

22 #i‚de‡
_802_1_D_


23 
	#_802_1_D_


	)

26 
	#PRIO_8021D_NONE
 2

	)

27 
	#PRIO_8021D_BK
 1

	)

28 
	#PRIO_8021D_BE
 0

	)

29 
	#PRIO_8021D_EE
 3

	)

30 
	#PRIO_8021D_CL
 4

	)

31 
	#PRIO_8021D_VI
 5

	)

32 
	#PRIO_8021D_VO
 6

	)

33 
	#PRIO_8021D_NC
 7

	)

34 
	#MAXPRIO
 7

	)

35 
	#NUMPRIO
 (
MAXPRIO
 + 1)

	)

37 
	#ALLPRIO
 -1

	)

40 
	#PRIO2PREC
(
¥io
) \

41 (((
¥io
Ë=
PRIO_8021D_NONE
 || (¥ioË=
PRIO_8021D_BE
Ë? (’rio^2)Ë: (¥io))

	)

	@dhdutil/include/proto/bcmeth.h

24 #i‚de‡
_BCMETH_H_


25 
	#_BCMETH_H_


	)

27 #i‚de‡
_TYPEDEFS_H_


28 
	~<ty≥defs.h
>

32 
	~<∑cked_£˘i⁄_°¨t.h
>

40 
	#BCMILCP_SUBTYPE_RATE
 1

	)

41 
	#BCMILCP_SUBTYPE_LINK
 2

	)

42 
	#BCMILCP_SUBTYPE_CSA
 3

	)

43 
	#BCMILCP_SUBTYPE_LARQ
 4

	)

44 
	#BCMILCP_SUBTYPE_VENDOR
 5

	)

45 
	#BCMILCP_SUBTYPE_FLH
 17

	)

47 
	#BCMILCP_SUBTYPE_VENDOR_LONG
 32769

	)

48 
	#BCMILCP_SUBTYPE_CERT
 32770

	)

49 
	#BCMILCP_SUBTYPE_SES
 32771

	)

52 
	#BCMILCP_BCM_SUBTYPE_RESERVED
 0

	)

53 
	#BCMILCP_BCM_SUBTYPE_EVENT
 1

	)

54 
	#BCMILCP_BCM_SUBTYPE_SES
 2

	)

57 
	#BCMILCP_BCM_SUBTYPE_DPT
 4

	)

59 
	#BCMILCP_BCM_SUBTYPEHDR_MINLENGTH
 8

	)

60 
	#BCMILCP_BCM_SUBTYPEHDR_VERSION
 0

	)

63 
BWL_PRE_PACKED_STRUCT
 
	sbcmëh_hdr


65 
uöt16
 
	msubty≥
;

66 
uöt16
 
	mÀngth
;

67 
uöt8
 
	mvîsi⁄
;

68 
uöt8
 
	moui
[3];

70 
uöt16
 
	mu§_subty≥
;

71 } 
	tBWL_POST_PACKED_STRUCT
 
	tbcmëh_hdr_t
;

75 
	~<∑cked_£˘i⁄_íd.h
>

	@dhdutil/include/proto/bcmevent.h

27 #i‚de‡
_BCMEVENT_H_


28 
	#_BCMEVENT_H_


	)

30 #i‚de‡
_TYPEDEFS_H_


31 
	~<ty≥defs.h
>

35 
	~<∑cked_£˘i⁄_°¨t.h
>

37 
	#BCM_EVENT_MSG_VERSION
 2

	)

38 
	#BCM_MSG_IFNAME_MAX
 16

	)

41 
	#WLC_EVENT_MSG_LINK
 0x01

	)

42 
	#WLC_EVENT_MSG_FLUSHTXQ
 0x02

	)

43 
	#WLC_EVENT_MSG_GROUP
 0x04

	)

44 
	#WLC_EVENT_MSG_UNKBSS
 0x08

	)

45 
	#WLC_EVENT_MSG_UNKIF
 0x10

	)

50 
BWL_PRE_PACKED_STRUCT
 struct

52 
uöt16
 
	mvîsi⁄
;

53 
uöt16
 
	mÊags
;

54 
uöt32
 
	mevít_ty≥
;

55 
uöt32
 
	m°©us
;

56 
uöt32
 
	mªas⁄
;

57 
uöt32
 
	mauth_ty≥
;

58 
uöt32
 
	md©Æí
;

59 
ëhî_addr
 
	maddr
;

60 
	mi‚ame
[
BCM_MSG_IFNAME_MAX
];

61 } 
	tBWL_POST_PACKED_STRUCT
 
	twl_evít_msg_v1_t
;

64 
BWL_PRE_PACKED_STRUCT
 struct

66 
uöt16
 
	mvîsi⁄
;

67 
uöt16
 
	mÊags
;

68 
uöt32
 
	mevít_ty≥
;

69 
uöt32
 
	m°©us
;

70 
uöt32
 
	mªas⁄
;

71 
uöt32
 
	mauth_ty≥
;

72 
uöt32
 
	md©Æí
;

73 
ëhî_addr
 
	maddr
;

74 
	mi‚ame
[
BCM_MSG_IFNAME_MAX
];

75 
uöt8
 
	mifidx
;

76 
uöt8
 
	mbsscfgidx
;

77 } 
	tBWL_POST_PACKED_STRUCT
 
	twl_evít_msg_t
;

80 
BWL_PRE_PACKED_STRUCT
 
	sbcm_evít
 {

81 
ëhî_hódî
 
	mëh
;

82 
bcmëh_hdr_t
 
	mbcm_hdr
;

83 
wl_evít_msg_t
 
	mevít
;

85 } 
	tBWL_POST_PACKED_STRUCT
 
	tbcm_evít_t
;

87 
	#BCM_MSG_LEN
 ((
bcm_evít_t
Ë- (
bcmëh_hdr_t
Ë- (
ëhî_hódî
))

	)

90 
	#WLC_E_SET_SSID
 0

	)

91 
	#WLC_E_JOIN
 1

	)

92 
	#WLC_E_START
 2

	)

93 
	#WLC_E_AUTH
 3

	)

94 
	#WLC_E_AUTH_IND
 4

	)

95 
	#WLC_E_DEAUTH
 5

	)

96 
	#WLC_E_DEAUTH_IND
 6

	)

97 
	#WLC_E_ASSOC
 7

	)

98 
	#WLC_E_ASSOC_IND
 8

	)

99 
	#WLC_E_REASSOC
 9

	)

100 
	#WLC_E_REASSOC_IND
 10

	)

101 
	#WLC_E_DISASSOC
 11

	)

102 
	#WLC_E_DISASSOC_IND
 12

	)

103 
	#WLC_E_QUIET_START
 13

	)

104 
	#WLC_E_QUIET_END
 14

	)

105 
	#WLC_E_BEACON_RX
 15

	)

106 
	#WLC_E_LINK
 16

	)

107 
	#WLC_E_MIC_ERROR
 17

	)

108 
	#WLC_E_NDIS_LINK
 18

	)

109 
	#WLC_E_ROAM
 19

	)

110 
	#WLC_E_TXFAIL
 20

	)

111 
	#WLC_E_PMKID_CACHE
 21

	)

112 
	#WLC_E_RETROGRADE_TSF
 22

	)

113 
	#WLC_E_PRUNE
 23

	)

114 
	#WLC_E_AUTOAUTH
 24

	)

115 
	#WLC_E_EAPOL_MSG
 25

	)

116 
	#WLC_E_SCAN_COMPLETE
 26

	)

117 
	#WLC_E_ADDTS_IND
 27

	)

118 
	#WLC_E_DELTS_IND
 28

	)

119 
	#WLC_E_BCNSENT_IND
 29

	)

120 
	#WLC_E_BCNRX_MSG
 30

	)

121 
	#WLC_E_BCNLOST_MSG
 31

	)

122 
	#WLC_E_ROAM_PREP
 32

	)

123 
	#WLC_E_PFN_NET_FOUND
 33

	)

124 
	#WLC_E_PFN_NET_LOST
 34

	)

125 
	#WLC_E_RESET_COMPLETE
 35

	)

126 
	#WLC_E_JOIN_START
 36

	)

127 
	#WLC_E_ROAM_START
 37

	)

128 
	#WLC_E_ASSOC_START
 38

	)

129 
	#WLC_E_IBSS_ASSOC
 39

	)

130 
	#WLC_E_RADIO
 40

	)

131 
	#WLC_E_PSM_WATCHDOG
 41

	)

132 
	#WLC_E_PROBREQ_MSG
 44

	)

133 
	#WLC_E_SCAN_CONFIRM_IND
 45

	)

134 
	#WLC_E_PSK_SUP
 46

	)

135 
	#WLC_E_COUNTRY_CODE_CHANGED
 47

	)

136 
	#WLC_E_EXCEEDED_MEDIUM_TIME
 48

	)

137 
	#WLC_E_ICV_ERROR
 49

	)

138 
	#WLC_E_UNICAST_DECODE_ERROR
 50

	)

139 
	#WLC_E_MULTICAST_DECODE_ERROR
 51

	)

140 
	#WLC_E_TRACE
 52

	)

141 
	#WLC_E_BTA_HCI_EVENT
 53

	)

142 
	#WLC_E_IF
 54

	)

143 #ifde‡
WLP2P


144 
	#WLC_E_P2P_DISC_LISTEN_COMPLETE
 55

	)

146 
	#WLC_E_RSSI
 56

	)

147 
	#WLC_E_PFN_SCAN_COMPLETE
 57

	)

148 
	#WLC_E_EXTLOG_MSG
 58

	)

149 
	#WLC_E_ACTION_FRAME
 59

	)

150 
	#WLC_E_ACTION_FRAME_COMPLETE
 60

	)

151 
	#WLC_E_PRE_ASSOC_IND
 61

	)

152 
	#WLC_E_PRE_REASSOC_IND
 62

	)

153 
	#WLC_E_CHANNEL_ADOPTED
 63

	)

154 
	#WLC_E_AP_STARTED
 64

	)

155 
	#WLC_E_DFS_AP_STOP
 65

	)

156 
	#WLC_E_DFS_AP_RESUME
 66

	)

157 
	#WLC_E_WAI_STA_EVENT
 67

	)

158 
	#WLC_E_WAI_MSG
 68

	)

159 
	#WLC_E_ESCAN_RESULT
 69

	)

160 
	#WLC_E_ACTION_FRAME_OFF_CHAN_COMPLETE
 70

	)

161 #i‡
deföed
(
WLP2P
)

162 
	#WLC_E_PROBRESP_MSG
 71

	)

163 
	#WLC_E_P2P_PROBREQ_MSG
 72

	)

165 
	#WLC_E_DCS_REQUEST
 73

	)

167 
	#WLC_E_FIFO_CREDIT_MAP
 74

	)

169 
	#WLC_E_ACTION_FRAME_RX
 75

	)

170 
	#WLC_E_WAKE_EVENT
 76

	)

171 
	#WLC_E_RM_COMPLETE
 77

	)

172 
	#WLC_E_HTSFSYNC
 78

	)

173 
	#WLC_E_OVERLAY_REQ
 79

	)

174 
	#WLC_E_CSA_COMPLETE_IND
 80

	)

175 
	#WLC_E_EXCESS_PM_WAKE_EVENT
 81

	)

176 
	#WLC_E_PFN_SCAN_NONE
 82

	)

177 
	#WLC_E_PFN_SCAN_ALLGONE
 83

	)

178 
	#WLC_E_LAST
 84

	)

182 
uöt
 
	mevít
;

183 c⁄° *
	m«me
;

184 } 
	tbcmevít_«me_t
;

186 c⁄° 
bcmevít_«me_t
 
bcmevít_«mes
[];

187 c⁄° 
bcmevít_«mes_size
;

190 
	#WLC_E_STATUS_SUCCESS
 0

	)

191 
	#WLC_E_STATUS_FAIL
 1

	)

192 
	#WLC_E_STATUS_TIMEOUT
 2

	)

193 
	#WLC_E_STATUS_NO_NETWORKS
 3

	)

194 
	#WLC_E_STATUS_ABORT
 4

	)

195 
	#WLC_E_STATUS_NO_ACK
 5

	)

196 
	#WLC_E_STATUS_UNSOLICITED
 6

	)

197 
	#WLC_E_STATUS_ATTEMPT
 7

	)

198 
	#WLC_E_STATUS_PARTIAL
 8

	)

199 
	#WLC_E_STATUS_NEWSCAN
 9

	)

200 
	#WLC_E_STATUS_NEWASSOC
 10

	)

201 
	#WLC_E_STATUS_11HQUIET
 11

	)

202 
	#WLC_E_STATUS_SUPPRESS
 12

	)

203 
	#WLC_E_STATUS_NOCHANS
 13

	)

204 
	#WLC_E_STATUS_CS_ABORT
 15

	)

205 
	#WLC_E_STATUS_ERROR
 16

	)

208 
	#WLC_E_REASON_INITIAL_ASSOC
 0

	)

209 
	#WLC_E_REASON_LOW_RSSI
 1

	)

210 
	#WLC_E_REASON_DEAUTH
 2

	)

211 
	#WLC_E_REASON_DISASSOC
 3

	)

212 
	#WLC_E_REASON_BCNS_LOST
 4

	)

213 
	#WLC_E_REASON_MINTXRATE
 9

	)

214 
	#WLC_E_REASON_TXFAIL
 10

	)

217 
	#WLC_E_REASON_FAST_ROAM_FAILED
 5

	)

218 
	#WLC_E_REASON_DIRECTED_ROAM
 6

	)

219 
	#WLC_E_REASON_TSPEC_REJECTED
 7

	)

220 
	#WLC_E_REASON_BETTER_AP
 8

	)

223 
	#WLC_E_PRUNE_ENCR_MISMATCH
 1

	)

224 
	#WLC_E_PRUNE_BCAST_BSSID
 2

	)

225 
	#WLC_E_PRUNE_MAC_DENY
 3

	)

226 
	#WLC_E_PRUNE_MAC_NA
 4

	)

227 
	#WLC_E_PRUNE_REG_PASSV
 5

	)

228 
	#WLC_E_PRUNE_SPCT_MGMT
 6

	)

229 
	#WLC_E_PRUNE_RADAR
 7

	)

230 
	#WLC_E_RSN_MISMATCH
 8

	)

231 
	#WLC_E_PRUNE_NO_COMMON_RATES
 9

	)

232 
	#WLC_E_PRUNE_BASIC_RATES
 10

	)

233 
	#WLC_E_PRUNE_CIPHER_NA
 12

	)

234 
	#WLC_E_PRUNE_KNOWN_STA
 13

	)

235 
	#WLC_E_PRUNE_WDS_PEER
 15

	)

236 
	#WLC_E_PRUNE_QBSS_LOAD
 16

	)

237 
	#WLC_E_PRUNE_HOME_AP
 17

	)

240 
	#WLC_E_SUP_OTHER
 0

	)

241 
	#WLC_E_SUP_DECRYPT_KEY_DATA
 1

	)

242 
	#WLC_E_SUP_BAD_UCAST_WEP128
 2

	)

243 
	#WLC_E_SUP_BAD_UCAST_WEP40
 3

	)

244 
	#WLC_E_SUP_UNSUP_KEY_LEN
 4

	)

245 
	#WLC_E_SUP_PW_KEY_CIPHER
 5

	)

246 
	#WLC_E_SUP_MSG3_TOO_MANY_IE
 6

	)

247 
	#WLC_E_SUP_MSG3_IE_MISMATCH
 7

	)

248 
	#WLC_E_SUP_NO_INSTALL_FLAG
 8

	)

249 
	#WLC_E_SUP_MSG3_NO_GTK
 9

	)

250 
	#WLC_E_SUP_GRP_KEY_CIPHER
 10

	)

251 
	#WLC_E_SUP_GRP_MSG1_NO_GTK
 11

	)

252 
	#WLC_E_SUP_GTK_DECRYPT_FAIL
 12

	)

253 
	#WLC_E_SUP_SEND_FAIL
 13

	)

254 
	#WLC_E_SUP_DEAUTH
 14

	)

255 
	#WLC_E_SUP_WPA_PSK_TMO
 15

	)

259 
BWL_PRE_PACKED_STRUCT
 
	swl_evít_rx_‰ame_d©a
 {

260 
uöt16
 
	mvîsi⁄
;

261 
uöt16
 
	mch™√l
;

262 
öt32
 
	mrssi
;

263 
uöt32
 
	mma˘ime
;

264 
uöt32
 
	møã
;

265 } 
	tBWL_POST_PACKED_STRUCT
 
	twl_evít_rx_‰ame_d©a_t
;

267 
	#BCM_RX_FRAME_DATA_VERSION
 1

	)

270 
	swl_evít_d©a_if
 {

271 
uöt8
 
	mifidx
;

272 
uöt8
 
	m›code
;

273 
uöt8
 
	mª£rved
;

274 
uöt8
 
	mbssidx
;

275 
uöt8
 
	mrﬁe
;

276 } 
	twl_evít_d©a_if_t
;

279 
	#WLC_E_IF_ADD
 1

	)

280 
	#WLC_E_IF_DEL
 2

	)

281 
	#WLC_E_IF_CHANGE
 3

	)

284 
	#WLC_E_IF_ROLE_STA
 0

	)

285 
	#WLC_E_IF_ROLE_AP
 1

	)

286 
	#WLC_E_IF_ROLE_WDS
 2

	)

287 
	#WLC_E_IF_ROLE_P2P_GO
 3

	)

288 
	#WLC_E_IF_ROLE_P2P_CLIENT
 4

	)

289 
	#WLC_E_IF_ROLE_BTA_CREATOR
 5

	)

290 
	#WLC_E_IF_ROLE_BTA_ACCEPTOR
 6

	)

293 
	#WLC_E_LINK_BCN_LOSS
 1

	)

294 
	#WLC_E_LINK_DISASSOC
 2

	)

295 
	#WLC_E_LINK_ASSOC_REC
 3

	)

296 
	#WLC_E_LINK_BSSCFG_DIS
 4

	)

299 
	#WLC_E_OVL_DOWNLOAD
 0

	)

300 
	#WLC_E_OVL_UPDATE_IND
 1

	)

303 
	~<∑cked_£˘i⁄_íd.h
>

	@dhdutil/include/proto/bcmip.h

22 #i‚de‡
_bcmù_h_


23 
	#_bcmù_h_


	)

25 #i‚de‡
_TYPEDEFS_H_


26 
	~<ty≥defs.h
>

30 
	~<∑cked_£˘i⁄_°¨t.h
>

34 
	#IP_VER_OFFSET
 0x0

	)

35 
	#IP_VER_MASK
 0xf0

	)

36 
	#IP_VER_SHIFT
 4

	)

37 
	#IP_VER_4
 4

	)

38 
	#IP_VER_6
 6

	)

40 
	#IP_VER
(
ù_body
) \

41 ((((
uöt8
 *)(
ù_body
))[
IP_VER_OFFSET
] & 
IP_VER_MASK
Ë>> 
IP_VER_SHIFT
)

	)

43 
	#IP_PROT_ICMP
 0x1

	)

44 
	#IP_PROT_TCP
 0x6

	)

45 
	#IP_PROT_UDP
 0x11

	)

48 
	#IPV4_VER_HL_OFFSET
 0

	)

49 
	#IPV4_TOS_OFFSET
 1

	)

50 
	#IPV4_PKTLEN_OFFSET
 2

	)

51 
	#IPV4_PKTFLAG_OFFSET
 6

	)

52 
	#IPV4_PROT_OFFSET
 9

	)

53 
	#IPV4_CHKSUM_OFFSET
 10

	)

54 
	#IPV4_SRC_IP_OFFSET
 12

	)

55 
	#IPV4_DEST_IP_OFFSET
 16

	)

56 
	#IPV4_OPTIONS_OFFSET
 20

	)

59 
	#IPV4_VER_MASK
 0xf0

	)

60 
	#IPV4_VER_SHIFT
 4

	)

62 
	#IPV4_HLEN_MASK
 0x0f

	)

63 
	#IPV4_HLEN
(
ùv4_body
Ë(4 * (((
uöt8
 *)(ùv4_body))[
IPV4_VER_HL_OFFSET
] & 
IPV4_HLEN_MASK
))

	)

65 
	#IPV4_ADDR_LEN
 4

	)

67 
	#IPV4_ADDR_NULL
(
a
Ë((((
uöt8
 *)(a))[0] | ((uint8 *)(a))[1] | \

68 ((
uöt8
 *)(
a
))[2] | ((uöt8 *)◊))[3]Ë=0)

	)

70 
	#IPV4_ADDR_BCAST
(
a
Ë((((
uöt8
 *)(a))[0] & ((uint8 *)(a))[1] & \

71 ((
uöt8
 *)(
a
))[2] & ((uöt8 *)◊))[3]Ë=0xff)

	)

73 
	#IPV4_TOS_DSCP_MASK
 0xfc

	)

74 
	#IPV4_TOS_DSCP_SHIFT
 2

	)

76 
	#IPV4_TOS
(
ùv4_body
Ë(((
uöt8
 *)(ùv4_body))[
IPV4_TOS_OFFSET
])

	)

78 
	#IPV4_TOS_PREC_MASK
 0xe0

	)

79 
	#IPV4_TOS_PREC_SHIFT
 5

	)

81 
	#IPV4_TOS_LOWDELAY
 0x10

	)

82 
	#IPV4_TOS_THROUGHPUT
 0x8

	)

83 
	#IPV4_TOS_RELIABILITY
 0x4

	)

85 
	#IPV4_PROT
(
ùv4_body
Ë(((
uöt8
 *)(ùv4_body))[
IPV4_PROT_OFFSET
])

	)

87 
	#IPV4_FRAG_RESV
 0x8000

	)

88 
	#IPV4_FRAG_DONT
 0x4000

	)

89 
	#IPV4_FRAG_MORE
 0x2000

	)

90 
	#IPV4_FRAG_OFFSET_MASK
 0x1fff

	)

92 
	#IPV4_ADDR_STR_LEN
 16

	)

95 
BWL_PRE_PACKED_STRUCT
 
	sùv4_addr
 {

96 
uöt8
 
	maddr
[
IPV4_ADDR_LEN
];

97 } 
	gBWL_POST_PACKED_STRUCT
;

99 
BWL_PRE_PACKED_STRUCT
 
	sùv4_hdr
 {

100 
uöt8
 
	mvîsi⁄_ihl
;

101 
uöt8
 
	mtos
;

102 
uöt16
 
	mtŸ_Àn
;

103 
uöt16
 
	mid
;

104 
uöt16
 
	m‰ag
;

105 
uöt8
 
	mâl
;

106 
uöt8
 
	m¥Ÿ
;

107 
uöt16
 
	mhdr_chksum
;

108 
uöt8
 
	m§c_ù
[
IPV4_ADDR_LEN
];

109 
uöt8
 
	md°_ù
[
IPV4_ADDR_LEN
];

110 } 
	gBWL_POST_PACKED_STRUCT
;

113 
	#IPV6_PAYLOAD_LEN_OFFSET
 4

	)

114 
	#IPV6_NEXT_HDR_OFFSET
 6

	)

115 
	#IPV6_HOP_LIMIT_OFFSET
 7

	)

116 
	#IPV6_SRC_IP_OFFSET
 8

	)

117 
	#IPV6_DEST_IP_OFFSET
 24

	)

120 
	#IPV6_TRAFFIC_CLASS
(
ùv6_body
) \

121 (((((
uöt8
 *)(
ùv6_body
))[0] & 0x0f) << 4) | \

122 ((((
uöt8
 *)(
ùv6_body
))[1] & 0xf0Ë>> 4))

	)

124 
	#IPV6_FLOW_LABEL
(
ùv6_body
) \

125 (((((
uöt8
 *)(
ùv6_body
))[1] & 0x0f) << 16) | \

126 (((
uöt8
 *)(
ùv6_body
))[2] << 8) | \

127 (((
uöt8
 *)(
ùv6_body
))[3]))

	)

129 
	#IPV6_PAYLOAD_LEN
(
ùv6_body
) \

130 ((((
uöt8
 *)(
ùv6_body
))[
IPV6_PAYLOAD_LEN_OFFSET
 + 0] << 8) | \

131 ((
uöt8
 *)(
ùv6_body
))[
IPV6_PAYLOAD_LEN_OFFSET
 + 1])

	)

133 
	#IPV6_NEXT_HDR
(
ùv6_body
) \

134 (((
uöt8
 *)(
ùv6_body
))[
IPV6_NEXT_HDR_OFFSET
])

	)

136 
	#IPV6_PROT
(
ùv6_body
Ë
	`IPV6_NEXT_HDR
(ùv6_body)

	)

138 
	#IPV6_ADDR_LEN
 16

	)

141 
	#IP_TOS46
(
ù_body
) \

142 (
	`IP_VER
(
ù_body
Ë=
IP_VER_4
 ? 
	`IPV4_TOS
(ip_body) : \

143 
	`IP_VER
(
ù_body
Ë=
IP_VER_6
 ? 
	`IPV6_TRAFFIC_CLASS
(ù_bodyË: 0)

	)

146 
	~<∑cked_£˘i⁄_íd.h
>

	@dhdutil/include/proto/bt_amp_hci.h

21 #i‚de‡
_bt_amp_hci_h


22 
	#_bt_amp_hci_h


	)

25 
	~<∑cked_£˘i⁄_°¨t.h
>

29 
BWL_PRE_PACKED_STRUCT
 
	samp_hci_cmd
 {

30 
uöt16
 
	m›code
;

31 
uöt8
 
	m∂í
;

32 
uöt8
 
	m∑rms
[1];

33 } 
	tBWL_POST_PACKED_STRUCT
 
	tamp_hci_cmd_t
;

35 
	#HCI_CMD_PREAMBLE_SIZE
 
	`OFFSETOF
(
amp_hci_cmd_t
, 
∑rms
)

	)

36 
	#HCI_CMD_DATA_SIZE
 255

	)

39 
	#HCI_CMD_OPCODE
(
ogf
, 
ocf
Ë((((ogfË& 0x3FË<< 10Ë| ((ocfË& 0x03FF))

	)

40 
	#HCI_CMD_OGF
(
›code
Ë((
uöt8
)(((›codeË>> 10Ë& 0x3F))

	)

41 
	#HCI_CMD_OCF
(
›code
Ë((›codeË& 0x03FF)

	)

44 
	#HCI_Ród_Faûed_C⁄è˘_Cou¡î
 
	`HCI_CMD_OPCODE
(0x05, 0x0001)

	)

45 
	#HCI_Re£t_Faûed_C⁄è˘_Cou¡î
 
	`HCI_CMD_OPCODE
(0x05, 0x0002)

	)

46 
	#HCI_Ród_Lök_QuÆôy
 
	`HCI_CMD_OPCODE
(0x05, 0x0003)

	)

47 
	#HCI_Ród_Loˇl_AMP_Info
 
	`HCI_CMD_OPCODE
(0x05, 0x0009)

	)

48 
	#HCI_Ród_Loˇl_AMP_ASSOC
 
	`HCI_CMD_OPCODE
(0x05, 0x000A)

	)

49 
	#HCI_Wrôe_RemŸe_AMP_ASSOC
 
	`HCI_CMD_OPCODE
(0x05, 0x000B)

	)

50 
	#HCI_Cª©e_Physiˇl_Lök
 
	`HCI_CMD_OPCODE
(0x01, 0x0035)

	)

51 
	#HCI_Ac˚±_Physiˇl_Lök_Reque°
 
	`HCI_CMD_OPCODE
(0x01, 0x0036)

	)

52 
	#HCI_Disc⁄√˘_Physiˇl_Lök
 
	`HCI_CMD_OPCODE
(0x01, 0x0037)

	)

53 
	#HCI_Cª©e_Logiˇl_Lök
 
	`HCI_CMD_OPCODE
(0x01, 0x0038)

	)

54 
	#HCI_Ac˚±_Logiˇl_Lök
 
	`HCI_CMD_OPCODE
(0x01, 0x0039)

	)

55 
	#HCI_Disc⁄√˘_Logiˇl_Lök
 
	`HCI_CMD_OPCODE
(0x01, 0x003A)

	)

56 
	#HCI_Logiˇl_Lök_C™˚l
 
	`HCI_CMD_OPCODE
(0x01, 0x003B)

	)

57 
	#HCI_Flow_S≥c_Modify
 
	`HCI_CMD_OPCODE
(0x01, 0x003C)

	)

58 
	#HCI_Wrôe_Flow_C⁄åﬁ_Mode
 
	`HCI_CMD_OPCODE
(0x01, 0x0067)

	)

59 
	#HCI_Ród_Be°_Eff‹t_Flush_Timeout
 
	`HCI_CMD_OPCODE
(0x01, 0x0069)

	)

60 
	#HCI_Wrôe_Be°_Eff‹t_Flush_Timeout
 
	`HCI_CMD_OPCODE
(0x01, 0x006A)

	)

61 
	#HCI_Sh‹t_R™ge_Mode
 
	`HCI_CMD_OPCODE
(0x01, 0x006B)

	)

62 
	#HCI_Re£t
 
	`HCI_CMD_OPCODE
(0x03, 0x0003)

	)

63 
	#HCI_Ród_C⁄√˘i⁄_Ac˚±_Timeout
 
	`HCI_CMD_OPCODE
(0x03, 0x0015)

	)

64 
	#HCI_Wrôe_C⁄√˘i⁄_Ac˚±_Timeout
 
	`HCI_CMD_OPCODE
(0x03, 0x0016)

	)

65 
	#HCI_Ród_Lök_Su≥rvisi⁄_Timeout
 
	`HCI_CMD_OPCODE
(0x03, 0x0036)

	)

66 
	#HCI_Wrôe_Lök_Su≥rvisi⁄_Timeout
 
	`HCI_CMD_OPCODE
(0x03, 0x0037)

	)

67 
	#HCI_Enh™˚d_Flush
 
	`HCI_CMD_OPCODE
(0x03, 0x005F)

	)

68 
	#HCI_Ród_Logiˇl_Lök_Ac˚±_Timeout
 
	`HCI_CMD_OPCODE
(0x03, 0x0061)

	)

69 
	#HCI_Wrôe_Logiˇl_Lök_Ac˚±_Timeout
 
	`HCI_CMD_OPCODE
(0x03, 0x0062)

	)

70 
	#HCI_Së_Evít_Mask_Page_2
 
	`HCI_CMD_OPCODE
(0x03, 0x0063)

	)

71 
	#HCI_Ród_Loˇti⁄_D©a_Comm™d
 
	`HCI_CMD_OPCODE
(0x03, 0x0064)

	)

72 
	#HCI_Wrôe_Loˇti⁄_D©a_Comm™d
 
	`HCI_CMD_OPCODE
(0x03, 0x0065)

	)

73 
	#HCI_Ród_Loˇl_Vîsi⁄_Info
 
	`HCI_CMD_OPCODE
(0x04, 0x0001)

	)

74 
	#HCI_Ród_Loˇl_Suµ‹ãd_Comm™ds
 
	`HCI_CMD_OPCODE
(0x04, 0x0002)

	)

75 
	#HCI_Ród_Buf„r_Size
 
	`HCI_CMD_OPCODE
(0x04, 0x0005)

	)

76 
	#HCI_Ród_D©a_Block_Size
 
	`HCI_CMD_OPCODE
(0x04, 0x000A)

	)

79 
BWL_PRE_PACKED_STRUCT
 
	sªad_loˇl_cmd_∑rms
 {

80 
uöt8
 
	m∂h
;

81 
uöt8
 
	moff£t
[2];

82 
uöt8
 
	mmax_ªmŸe
[2];

83 } 
	tBWL_POST_PACKED_STRUCT
 
	tªad_loˇl_cmd_∑rms_t
;

85 
BWL_PRE_PACKED_STRUCT
 
	swrôe_ªmŸe_cmd_∑rms
 {

86 
uöt8
 
	m∂h
;

87 
uöt8
 
	moff£t
[2];

88 
uöt8
 
	mÀn
[2];

89 
uöt8
 
	m‰ag
[1];

90 } 
	tBWL_POST_PACKED_STRUCT
 
	twrôe_ªmŸe_cmd_∑rms_t
;

92 
BWL_PRE_PACKED_STRUCT
 
	sphy_lök_cmd_∑rms
 {

93 
uöt8
 
	m∂h
;

94 
uöt8
 
	mkey_Àngth
;

95 
uöt8
 
	mkey_ty≥
;

96 
uöt8
 
	mkey
[1];

97 } 
	tBWL_POST_PACKED_STRUCT
 
	tphy_lök_cmd_∑rms_t
;

99 
BWL_PRE_PACKED_STRUCT
 
	sdis_phy_lök_cmd_∑rms
 {

100 
uöt8
 
	m∂h
;

101 
uöt8
 
	mªas⁄
;

102 } 
	tBWL_POST_PACKED_STRUCT
 
	tdis_phy_lök_cmd_∑rms_t
;

104 
BWL_PRE_PACKED_STRUCT
 
	slog_lök_cmd_∑rms
 {

105 
uöt8
 
	m∂h
;

106 
uöt8
 
	mtxÊow
[16];

107 
uöt8
 
	mrxÊow
[16];

108 } 
	tBWL_POST_PACKED_STRUCT
 
	tlog_lök_cmd_∑rms_t
;

110 
BWL_PRE_PACKED_STRUCT
 
	sext_Êow_•ec
 {

111 
uöt8
 
	mid
;

112 
uöt8
 
	m£rvi˚_ty≥
;

113 
uöt8
 
	mmax_sdu
[2];

114 
uöt8
 
	msdu_ü_time
[4];

115 
uöt8
 
	mac˚ss_œãncy
[4];

116 
uöt8
 
	mÊush_timeout
[4];

117 } 
	tBWL_POST_PACKED_STRUCT
 
	text_Êow_•ec_t
;

119 
BWL_PRE_PACKED_STRUCT
 
	slog_lök_ˇn˚l_cmd_∑rms
 {

120 
uöt8
 
	m∂h
;

121 
uöt8
 
	mtx_fs_ID
;

122 } 
	tBWL_POST_PACKED_STRUCT
 
	tlog_lök_ˇn˚l_cmd_∑rms_t
;

124 
BWL_PRE_PACKED_STRUCT
 
	sÊow_•ec_mod_cmd_∑rms
 {

125 
uöt8
 
	mŒh
[2];

126 
uöt8
 
	mtxÊow
[16];

127 
uöt8
 
	mrxÊow
[16];

128 } 
	tBWL_POST_PACKED_STRUCT
 
	tÊow_•ec_mod_cmd_∑rms_t
;

130 
BWL_PRE_PACKED_STRUCT
 
	s∂h_∑d
 {

131 
uöt8
 
	m∂h
;

132 
uöt8
 
	m∑d
;

133 } 
	tBWL_POST_PACKED_STRUCT
 
	t∂h_∑d_t
;

135 
BWL_PRE_PACKED_STRUCT
 
	uhci_h™dÀ
 {

136 
uöt16
 
	mbªdr
;

137 
∂h_∑d_t
 
	mamp
;

138 } 
	tBWL_POST_PACKED_STRUCT
 
	thci_h™dÀ_t
;

140 
BWL_PRE_PACKED_STRUCT
 
	sls_to_cmd_∑rms
 {

141 
hci_h™dÀ_t
 
	mh™dÀ
;

142 
uöt8
 
	mtimeout
[2];

143 } 
	tBWL_POST_PACKED_STRUCT
 
	tls_to_cmd_∑rms_t
;

145 
BWL_PRE_PACKED_STRUCT
 
	sbe·o_cmd_∑rms
 {

146 
uöt8
 
	mŒh
[2];

147 
uöt8
 
	mbe·o
[4];

148 } 
	tBWL_POST_PACKED_STRUCT
 
	tbe·o_cmd_∑rms_t
;

150 
BWL_PRE_PACKED_STRUCT
 
	s§m_cmd_∑rms
 {

151 
uöt8
 
	m∂h
;

152 
uöt8
 
	m§m
;

153 } 
	tBWL_POST_PACKED_STRUCT
 
	t§m_cmd_∑rms_t
;

155 
BWL_PRE_PACKED_STRUCT
 
	sld_cmd_∑rms
 {

156 
uöt8
 
	mld_aw¨e
;

157 
uöt8
 
	mld
[2];

158 
uöt8
 
	mld_›ts
;

159 
uöt8
 
	ml_›ts
;

160 } 
	tBWL_POST_PACKED_STRUCT
 
	tld_cmd_∑rms_t
;

162 
BWL_PRE_PACKED_STRUCT
 
	seÊush_cmd_∑rms
 {

163 
uöt8
 
	mŒh
[2];

164 
uöt8
 
	m∑ckë_ty≥
;

165 } 
	tBWL_POST_PACKED_STRUCT
 
	teÊush_cmd_∑rms_t
;

168 
	#EFS_SVCTYPE_NO_TRAFFIC
 0

	)

169 
	#EFS_SVCTYPE_BEST_EFFORT
 1

	)

170 
	#EFS_SVCTYPE_GUARANTEED
 2

	)

173 
BWL_PRE_PACKED_STRUCT
 
	samp_hci_evít
 {

174 
uöt8
 
	mecode
;

175 
uöt8
 
	m∂í
;

176 
uöt8
 
	m∑rms
[1];

177 } 
	tBWL_POST_PACKED_STRUCT
 
	tamp_hci_evít_t
;

179 
	#HCI_EVT_PREAMBLE_SIZE
 
	`OFFSETOF
(
amp_hci_evít_t
, 
∑rms
)

	)

182 
	#HCI_Comm™d_Com∂ëe
 0x0E

	)

183 
	#HCI_Comm™d_Sètus
 0x0F

	)

184 
	#HCI_Flush_Occuºed
 0x11

	)

185 
	#HCI_Enh™˚d_Flush_Com∂ëe
 0x39

	)

186 
	#HCI_Physiˇl_Lök_Com∂ëe
 0x40

	)

187 
	#HCI_Ch™√l_Sñe˘
 0x41

	)

188 
	#HCI_Disc⁄√˘_Physiˇl_Lök_Com∂ëe
 0x42

	)

189 
	#HCI_Logiˇl_Lök_Com∂ëe
 0x45

	)

190 
	#HCI_Disc⁄√˘_Logiˇl_Lök_Com∂ëe
 0x46

	)

191 
	#HCI_Flow_S≥c_Modify_Com∂ëe
 0x47

	)

192 
	#HCI_Numbî_of_Com∂ëed_D©a_Blocks
 0x48

	)

193 
	#HCI_Sh‹t_R™ge_Mode_Ch™ge_Com∂ëe
 0x4C

	)

194 
	#HCI_Sètus_Ch™ge_Evít
 0x4D

	)

195 
	#HCI_Víd‹_S≥cific
 0xFF

	)

198 
	#HCI_Physiˇl_Lök_Com∂ëe_Evít_Mask
 0x0001

	)

199 
	#HCI_Ch™√l_Sñe˘_Evít_Mask
 0x0002

	)

200 
	#HCI_Disc⁄√˘_Physiˇl_Lök_Com∂ëe_Evít_Mask
 0x0004

	)

201 
	#HCI_Logiˇl_Lök_Com∂ëe_Evít_Mask
 0x0020

	)

202 
	#HCI_Disc⁄√˘_Logiˇl_Lök_Com∂ëe_Evít_Mask
 0x0040

	)

203 
	#HCI_Flow_S≥c_Modify_Com∂ëe_Evít_Mask
 0x0080

	)

204 
	#HCI_Numbî_of_Com∂ëed_D©a_Blocks_Evít_Mask
 0x0100

	)

205 
	#HCI_Sh‹t_R™ge_Mode_Ch™ge_Com∂ëe_Evít_Mask
 0x1000

	)

206 
	#HCI_Sètus_Ch™ge_Evít_Mask
 0x2000

	)

207 
	#HCI_AŒ_Evít_Mask
 0x31e7

	)

210 
BWL_PRE_PACKED_STRUCT
 
	scmd_°©us_∑rms
 {

211 
uöt8
 
	m°©us
;

212 
uöt8
 
	mcmdpkts
;

213 
uöt16
 
	m›code
;

214 } 
	tBWL_POST_PACKED_STRUCT
 
	tcmd_°©us_∑rms_t
;

216 
BWL_PRE_PACKED_STRUCT
 
	scmd_com∂ëe_∑rms
 {

217 
uöt8
 
	mcmdpkts
;

218 
uöt16
 
	m›code
;

219 
uöt8
 
	m∑rms
[1];

220 } 
	tBWL_POST_PACKED_STRUCT
 
	tcmd_com∂ëe_∑rms_t
;

222 
BWL_PRE_PACKED_STRUCT
 
	sÊush_occuºed_evt_∑rms
 {

223 
uöt16
 
	mh™dÀ
;

224 } 
	tBWL_POST_PACKED_STRUCT
 
	tÊush_occuºed_evt_∑rms_t
;

226 
BWL_PRE_PACKED_STRUCT
 
	swrôe_ªmŸe_evt_∑rms
 {

227 
uöt8
 
	m°©us
;

228 
uöt8
 
	m∂h
;

229 } 
	tBWL_POST_PACKED_STRUCT
 
	twrôe_ªmŸe_evt_∑rms_t
;

231 
BWL_PRE_PACKED_STRUCT
 
	sªad_loˇl_evt_∑rms
 {

232 
uöt8
 
	m°©us
;

233 
uöt8
 
	m∂h
;

234 
uöt16
 
	mÀn
;

235 
uöt8
 
	m‰ag
[1];

236 } 
	tBWL_POST_PACKED_STRUCT
 
	tªad_loˇl_evt_∑rms_t
;

238 
BWL_PRE_PACKED_STRUCT
 
	sªad_loˇl_öfo_evt_∑rms
 {

239 
uöt8
 
	m°©us
;

240 
uöt8
 
	mAMP_°©us
;

241 
uöt32
 
	mb™dwidth
;

242 
uöt32
 
	mgb™dwidth
;

243 
uöt32
 
	mœãncy
;

244 
uöt32
 
	mPDU_size
;

245 
uöt8
 
	m˘æ_ty≥
;

246 
uöt16
 
	mPAL_ˇp
;

247 
uöt16
 
	mAMP_ASSOC_Àn
;

248 
uöt32
 
	mmax_Êush_timeout
;

249 
uöt32
 
	mbe_Êush_timeout
;

250 } 
	tBWL_POST_PACKED_STRUCT
 
	tªad_loˇl_öfo_evt_∑rms_t
;

252 
BWL_PRE_PACKED_STRUCT
 
	slog_lök_evt_∑rms
 {

253 
uöt8
 
	m°©us
;

254 
uöt16
 
	mŒh
;

255 
uöt8
 
	m∂h
;

256 
uöt8
 
	mtx_fs_ID
;

257 } 
	tBWL_POST_PACKED_STRUCT
 
	tlog_lök_evt_∑rms_t
;

259 
BWL_PRE_PACKED_STRUCT
 
	sdisc_log_lök_evt_∑rms
 {

260 
uöt8
 
	m°©us
;

261 
uöt16
 
	mŒh
;

262 
uöt8
 
	mªas⁄
;

263 } 
	tBWL_POST_PACKED_STRUCT
 
	tdisc_log_lök_evt_∑rms_t
;

265 
BWL_PRE_PACKED_STRUCT
 
	slog_lök_ˇn˚l_evt_∑rms
 {

266 
uöt8
 
	m°©us
;

267 
uöt8
 
	m∂h
;

268 
uöt8
 
	mtx_fs_ID
;

269 } 
	tBWL_POST_PACKED_STRUCT
 
	tlog_lök_ˇn˚l_evt_∑rms_t
;

271 
BWL_PRE_PACKED_STRUCT
 
	sÊow_•ec_mod_evt_∑rms
 {

272 
uöt8
 
	m°©us
;

273 
uöt16
 
	mŒh
;

274 } 
	tBWL_POST_PACKED_STRUCT
 
	tÊow_•ec_mod_evt_∑rms_t
;

276 
BWL_PRE_PACKED_STRUCT
 
	sphy_lök_evt_∑rms
 {

277 
uöt8
 
	m°©us
;

278 
uöt8
 
	m∂h
;

279 } 
	tBWL_POST_PACKED_STRUCT
 
	tphy_lök_evt_∑rms_t
;

281 
BWL_PRE_PACKED_STRUCT
 
	sdis_phy_lök_evt_∑rms
 {

282 
uöt8
 
	m°©us
;

283 
uöt8
 
	m∂h
;

284 
uöt8
 
	mªas⁄
;

285 } 
	tBWL_POST_PACKED_STRUCT
 
	tdis_phy_lök_evt_∑rms_t
;

287 
BWL_PRE_PACKED_STRUCT
 
	sªad_ls_to_evt_∑rms
 {

288 
uöt8
 
	m°©us
;

289 
hci_h™dÀ_t
 
	mh™dÀ
;

290 
uöt16
 
	mtimeout
;

291 } 
	tBWL_POST_PACKED_STRUCT
 
	tªad_ls_to_evt_∑rms_t
;

293 
BWL_PRE_PACKED_STRUCT
 
	sªad_Œa_ˇ_to_evt_∑rms
 {

294 
uöt8
 
	m°©us
;

295 
uöt16
 
	mtimeout
;

296 } 
	tBWL_POST_PACKED_STRUCT
 
	tªad_Œa_ˇ_to_evt_∑rms_t
;

298 
BWL_PRE_PACKED_STRUCT
 
	sªad_d©a_block_size_evt_∑rms
 {

299 
uöt8
 
	m°©us
;

300 
uöt16
 
	mACL_pkt_Àn
;

301 
uöt16
 
	md©a_block_Àn
;

302 
uöt16
 
	md©a_block_num
;

303 } 
	tBWL_POST_PACKED_STRUCT
 
	tªad_d©a_block_size_evt_∑rms_t
;

305 
BWL_PRE_PACKED_STRUCT
 
	sd©a_blocks
 {

306 
uöt16
 
	mh™dÀ
;

307 
uöt16
 
	mpkts
;

308 
uöt16
 
	mblocks
;

309 } 
	tBWL_POST_PACKED_STRUCT
 
	td©a_blocks_t
;

311 
BWL_PRE_PACKED_STRUCT
 
	snum_com∂ëed_d©a_blocks_evt_∑rms
 {

312 
uöt16
 
	mnum_blocks
;

313 
uöt8
 
	mnum_h™dÀs
;

314 
d©a_blocks_t
 
	mcom∂ëed
[1];

315 } 
	tBWL_POST_PACKED_STRUCT
 
	tnum_com∂ëed_d©a_blocks_evt_∑rms_t
;

317 
BWL_PRE_PACKED_STRUCT
 
	sbe·o_evt_∑rms
 {

318 
uöt8
 
	m°©us
;

319 
uöt32
 
	mbe·o
;

320 } 
	tBWL_POST_PACKED_STRUCT
 
	tbe·o_evt_∑rms_t
;

322 
BWL_PRE_PACKED_STRUCT
 
	s§m_evt_∑rms
 {

323 
uöt8
 
	m°©us
;

324 
uöt8
 
	m∂h
;

325 
uöt8
 
	m§m
;

326 } 
	tBWL_POST_PACKED_STRUCT
 
	t§m_evt_∑rms_t
;

328 
BWL_PRE_PACKED_STRUCT
 
	sc⁄è˘_cou¡î_evt_∑rms
 {

329 
uöt8
 
	m°©us
;

330 
uöt8
 
	mŒh
[2];

331 
uöt16
 
	mcou¡î
;

332 } 
	tBWL_POST_PACKED_STRUCT
 
	tc⁄è˘_cou¡î_evt_∑rms_t
;

334 
BWL_PRE_PACKED_STRUCT
 
	sc⁄è˘_cou¡î_ª£t_evt_∑rms
 {

335 
uöt8
 
	m°©us
;

336 
uöt8
 
	mŒh
[2];

337 } 
	tBWL_POST_PACKED_STRUCT
 
	tc⁄è˘_cou¡î_ª£t_evt_∑rms_t
;

339 
BWL_PRE_PACKED_STRUCT
 
	sªad_lökq_evt_∑rms
 {

340 
uöt8
 
	m°©us
;

341 
hci_h™dÀ_t
 
	mh™dÀ
;

342 
uöt8
 
	mlök_quÆôy
;

343 } 
	tBWL_POST_PACKED_STRUCT
 
	tªad_lökq_evt_∑rms_t
;

345 
BWL_PRE_PACKED_STRUCT
 
	sld_evt_∑rms
 {

346 
uöt8
 
	m°©us
;

347 
uöt8
 
	mld_aw¨e
;

348 
uöt8
 
	mld
[2];

349 
uöt8
 
	mld_›ts
;

350 
uöt8
 
	ml_›ts
;

351 } 
	tBWL_POST_PACKED_STRUCT
 
	tld_evt_∑rms_t
;

353 
BWL_PRE_PACKED_STRUCT
 
	seÊush_com∂ëe_evt_∑rms
 {

354 
uöt16
 
	mh™dÀ
;

355 } 
	tBWL_POST_PACKED_STRUCT
 
	teÊush_com∂ëe_evt_∑rms_t
;

357 
BWL_PRE_PACKED_STRUCT
 
	svíd‹_•ecific_evt_∑rms
 {

358 
uöt8
 
	mÀn
;

359 
uöt8
 
	m∑rms
[1];

360 } 
	tBWL_POST_PACKED_STRUCT
 
	tvíd‹_•ecific_evt_∑rms_t
;

362 
BWL_PRE_PACKED_STRUCT
 
	sloˇl_vîsi⁄_öfo_evt_∑rms
 {

363 
uöt8
 
	m°©us
;

364 
uöt8
 
	mhci_vîsi⁄
;

365 
uöt16
 
	mhci_ªvisi⁄
;

366 
uöt8
 
	m∑l_vîsi⁄
;

367 
uöt16
 
	mmfg_«me
;

368 
uöt16
 
	m∑l_subvîsi⁄
;

369 } 
	tBWL_POST_PACKED_STRUCT
 
	tloˇl_vîsi⁄_öfo_evt_∑rms_t
;

371 
	#MAX_SUPPORTED_CMD_BYTE
 64

	)

372 
BWL_PRE_PACKED_STRUCT
 
	sloˇl_suµ‹ãd_cmd_evt_∑rms
 {

373 
uöt8
 
	m°©us
;

374 
uöt8
 
	mcmd
[
MAX_SUPPORTED_CMD_BYTE
];

375 } 
	tBWL_POST_PACKED_STRUCT
 
	tloˇl_suµ‹ãd_cmd_evt_∑rms_t
;

377 
BWL_PRE_PACKED_STRUCT
 
	s°©us_ch™ge_evt_∑rms
 {

378 
uöt8
 
	m°©us
;

379 
uöt8
 
	mamp_°©us
;

380 } 
	tBWL_POST_PACKED_STRUCT
 
	t°©us_ch™ge_evt_∑rms_t
;

383 
	#HCI_SUCCESS
 0x00

	)

384 
	#HCI_ERR_ILLEGAL_COMMAND
 0x01

	)

385 
	#HCI_ERR_NO_CONNECTION
 0x02

	)

386 
	#HCI_ERR_MEMORY_FULL
 0x07

	)

387 
	#HCI_ERR_CONNECTION_TIMEOUT
 0x08

	)

388 
	#HCI_ERR_MAX_NUM_OF_CONNECTIONS
 0x09

	)

389 
	#HCI_ERR_CONNECTION_EXISTS
 0x0B

	)

390 
	#HCI_ERR_CONNECTION_DISALLOWED
 0x0C

	)

391 
	#HCI_ERR_CONNECTION_ACCEPT_TIMEOUT
 0x10

	)

392 
	#HCI_ERR_UNSUPPORTED_VALUE
 0x11

	)

393 
	#HCI_ERR_ILLEGAL_PARAMETER_FMT
 0x12

	)

394 
	#HCI_ERR_CONN_TERM_BY_LOCAL_HOST
 0x16

	)

395 
	#HCI_ERR_UNSPECIFIED
 0x1F

	)

396 
	#HCI_ERR_UNIT_KEY_USED
 0x26

	)

397 
	#HCI_ERR_QOS_REJECTED
 0x2D

	)

398 
	#HCI_ERR_PARAM_OUT_OF_RANGE
 0x30

	)

399 
	#HCI_ERR_NO_SUITABLE_CHANNEL
 0x39

	)

400 
	#HCI_ERR_CHANNEL_MOVE
 0xFF

	)

403 
BWL_PRE_PACKED_STRUCT
 
	samp_hci_ACL_d©a
 {

404 
uöt16
 
	mh™dÀ
;

405 
uöt16
 
	mdÀn
;

406 
uöt8
 
	md©a
[1];

407 } 
	tBWL_POST_PACKED_STRUCT
 
	tamp_hci_ACL_d©a_t
;

409 
	#HCI_ACL_DATA_PREAMBLE_SIZE
 
	`OFFSETOF
(
amp_hci_ACL_d©a_t
, 
d©a
)

	)

411 
	#HCI_ACL_DATA_BC_FLAGS
 (0x0 << 14)

	)

412 
	#HCI_ACL_DATA_PB_FLAGS
 (0x3 << 12)

	)

414 
	#HCI_ACL_DATA_HANDLE
(
h™dÀ
Ë((h™dÀË& 0x0fff)

	)

415 
	#HCI_ACL_DATA_FLAGS
(
h™dÀ
Ë((h™dÀË>> 12)

	)

418 
BWL_PRE_PACKED_STRUCT
 
	samp_hci_a˘ivôy_ªp‹t
 {

419 
uöt8
 
	mScheduÀKnown
;

420 
uöt8
 
	mNumRï‹ts
;

421 
uöt8
 
	md©a
[1];

422 } 
	tBWL_POST_PACKED_STRUCT
 
	tamp_hci_a˘ivôy_ªp‹t_t
;

424 
BWL_PRE_PACKED_STRUCT
 
	samp_hci_a˘ivôy_ªp‹t_åùÀ
 {

425 
uöt32
 
	mSèπTime
;

426 
uöt32
 
	mDuøti⁄
;

427 
uöt32
 
	mPîiodicôy
;

428 } 
	tBWL_POST_PACKED_STRUCT
 
	tamp_hci_a˘ivôy_ªp‹t_åùÀ_t
;

430 
	#HCI_AR_SCHEDULE_KNOWN
 0x01

	)

434 
	~<∑cked_£˘i⁄_íd.h
>

	@dhdutil/include/proto/ethernet.h

22 #i‚de‡
_NET_ETHERNET_H_


23 
	#_NET_ETHERNET_H_


	)

25 #i‚de‡
_TYPEDEFS_H_


26 
	~"ty≥defs.h
"

30 
	~<∑cked_£˘i⁄_°¨t.h
>

34 
	#ETHER_ADDR_LEN
 6

	)

37 
	#ETHER_TYPE_LEN
 2

	)

40 
	#ETHER_CRC_LEN
 4

	)

43 
	#ETHER_HDR_LEN
 (
ETHER_ADDR_LEN
 * 2 + 
ETHER_TYPE_LEN
)

	)

46 
	#ETHER_MIN_LEN
 64

	)

49 
	#ETHER_MIN_DATA
 46

	)

52 
	#ETHER_MAX_LEN
 1518

	)

55 
	#ETHER_MAX_DATA
 1500

	)

58 
	#ETHER_TYPE_MIN
 0x0600

	)

59 
	#ETHER_TYPE_IP
 0x0800

	)

60 
	#ETHER_TYPE_ARP
 0x0806

	)

61 
	#ETHER_TYPE_8021Q
 0x8100

	)

62 
	#ETHER_TYPE_BRCM
 0x886c

	)

63 
	#ETHER_TYPE_802_1X
 0x888e

	)

64 
	#ETHER_TYPE_802_1X_PREAUTH
 0x88c7

	)

65 
	#ETHER_TYPE_WAI
 0x88b4

	)

69 
	#ETHER_BRCM_SUBTYPE_LEN
 4

	)

70 
	#ETHER_BRCM_CRAM
 1

	)

73 
	#ETHER_DEST_OFFSET
 (0 * 
ETHER_ADDR_LEN
)

	)

74 
	#ETHER_SRC_OFFSET
 (1 * 
ETHER_ADDR_LEN
)

	)

75 
	#ETHER_TYPE_OFFSET
 (2 * 
ETHER_ADDR_LEN
)

	)

78 
	#ETHER_IS_VALID_LEN
(
foo
) \

79 ((
foo
Ë>
ETHER_MIN_LEN
 && (fooË<
ETHER_MAX_LEN
)

	)

81 
	#ETHER_FILL_MCAST_ADDR_FROM_IP
(
ó
, 
mgΩ_ù
) { \

82 ((
uöt8
 *)
ó
)[0] = 0x01; \

83 ((
uöt8
 *)
ó
)[1] = 0x00; \

84 ((
uöt8
 *)
ó
)[2] = 0x5e; \

85 ((
uöt8
 *)
ó
)[3] = ((
mgΩ_ù
) >> 16) & 0x7f; \

86 ((
uöt8
 *)
ó
)[4] = ((
mgΩ_ù
) >> 8) & 0xff; \

87 ((
uöt8
 *)
ó
)[5] = ((
mgΩ_ù
) >> 0) & 0xff; \

88 }

	)

90 #i‚de‡
__INCif_ëhîh


92 
BWL_PRE_PACKED_STRUCT
 
	sëhî_hódî
 {

93 
uöt8
 
	mëhî_dho°
[
ETHER_ADDR_LEN
];

94 
uöt8
 
	mëhî_sho°
[
ETHER_ADDR_LEN
];

95 
uöt16
 
	mëhî_ty≥
;

96 } 
	gBWL_POST_PACKED_STRUCT
;

99 
BWL_PRE_PACKED_STRUCT
 
	sëhî_addr
 {

100 
uöt8
 
	mo˘ë
[
ETHER_ADDR_LEN
];

101 } 
	gBWL_POST_PACKED_STRUCT
;

105 
	#ETHER_SET_LOCALADDR
(
ó
Ë(((
uöt8
 *)”a))[0] = (((uöt8 *)”a))[0] | 2))

	)

106 
	#ETHER_IS_LOCALADDR
(
ó
Ë(((
uöt8
 *)”a))[0] & 2)

	)

107 
	#ETHER_CLR_LOCALADDR
(
ó
Ë(((
uöt8
 *)”a))[0] = (((uöt8 *)”a))[0] & 0xd))

	)

108 
	#ETHER_TOGGLE_LOCALADDR
(
ó
Ë(((
uöt8
 *)”a))[0] = (((uöt8 *)”a))[0] ^ 2))

	)

111 
	#ETHER_SET_UNICAST
(
ó
Ë(((
uöt8
 *)”a))[0] = (((uöt8 *)”a))[0] & ~1))

	)

114 
	#ETHER_ISMULTI
(
ó
Ë(((c⁄° 
uöt8
 *)”a))[0] & 1)

	)

118 
	#ëhî_cmp
(
a
, 
b
) (!(((*)a)[0] == ((*)b)[0]) | \

119 !(((*)
a
)[1] =((*)
b
)[1]) | \

120 !(((*)
a
)[2] =((*)
b
)[2]))

	)

123 
	#ëhî_c›y
(
s
, 
d
) { \

124 ((*)
d
)[0] = ((*)
s
)[0]; \

125 ((*)
d
)[1] = ((*)
s
)[1]; \

126 ((*)
d
)[2] = ((*)
s
)[2]; }

	)

129 c⁄° 
ëhî_addr
 
	gëhî_bˇ°
 = {{255, 255, 255, 255, 255, 255}};

130 c⁄° 
ëhî_addr
 
	gëhî_nuŒ
 = {{0, 0, 0, 0, 0, 0}};

132 
	#ETHER_ISBCAST
(
ó
Ë((((
uöt8
 *)(ea))[0] & \

133 ((
uöt8
 *)(
ó
))[1] & \

134 ((
uöt8
 *)(
ó
))[2] & \

135 ((
uöt8
 *)(
ó
))[3] & \

136 ((
uöt8
 *)(
ó
))[4] & \

137 ((
uöt8
 *)(
ó
))[5]Ë=0xff)

	)

138 
	#ETHER_ISNULLADDR
(
ó
Ë((((
uöt8
 *)(ea))[0] | \

139 ((
uöt8
 *)(
ó
))[1] | \

140 ((
uöt8
 *)(
ó
))[2] | \

141 ((
uöt8
 *)(
ó
))[3] | \

142 ((
uöt8
 *)(
ó
))[4] | \

143 ((
uöt8
 *)(
ó
))[5]Ë=0)

	)

146 
	#ETHER_MOVE_HDR
(
d
, 
s
) \

148 
ëhî_hódî
 
t
; \

149 
t
 = *(
ëhî_hódî
 *)(
s
); \

150 *(
ëhî_hódî
 *)(
d
Ë
t
; \

151 } 0)

	)

154 
	~<∑cked_£˘i⁄_íd.h
>

	@dhdutil/include/proto/vlan.h

22 #i‚de‡
_vœn_h_


23 
	#_vœn_h_


	)

25 #i‚de‡
_TYPEDEFS_H_


26 
	~<ty≥defs.h
>

30 
	~<∑cked_£˘i⁄_°¨t.h
>

32 
	#VLAN_VID_MASK
 0xfff

	)

33 
	#VLAN_CFI_SHIFT
 12

	)

34 
	#VLAN_PRI_SHIFT
 13

	)

36 
	#VLAN_PRI_MASK
 7

	)

38 
	#VLAN_TAG_LEN
 4

	)

39 
	#VLAN_TAG_OFFSET
 (2 * 
ETHER_ADDR_LEN
)

	)

41 
	#VLAN_TPID
 0x8100

	)

43 
	sëhîvœn_hódî
 {

44 
uöt8
 
	mëhî_dho°
[
ETHER_ADDR_LEN
];

45 
uöt8
 
	mëhî_sho°
[
ETHER_ADDR_LEN
];

46 
uöt16
 
	mvœn_ty≥
;

47 
uöt16
 
	mvœn_èg
;

48 
uöt16
 
	mëhî_ty≥
;

51 
	#ETHERVLAN_HDR_LEN
 (
ETHER_HDR_LEN
 + 
VLAN_TAG_LEN
)

	)

55 
	~<∑cked_£˘i⁄_íd.h
>

57 
	#ETHERVLAN_MOVE_HDR
(
d
, 
s
) \

59 
ëhîvœn_hódî
 
t
; \

60 
t
 = *(
ëhîvœn_hódî
 *)(
s
); \

61 *(
ëhîvœn_hódî
 *)(
d
Ë
t
; \

62 } 0)

	)

	@dhdutil/include/proto/wpa.h

22 #i‚de‡
_¥Ÿo_w∑_h_


23 
	#_¥Ÿo_w∑_h_


	)

25 
	~<ty≥defs.h
>

26 
	~<¥Ÿo/ëhî√t.h
>

30 
	~<∑cked_£˘i⁄_°¨t.h
>

35 
	#DOT11_RC_INVALID_WPA_IE
 13

	)

36 
	#DOT11_RC_MIC_FAILURE
 14

	)

37 
	#DOT11_RC_4WH_TIMEOUT
 15

	)

38 
	#DOT11_RC_GTK_UPDATE_TIMEOUT
 16

	)

39 
	#DOT11_RC_WPA_IE_MISMATCH
 17

	)

40 
	#DOT11_RC_INVALID_MC_CIPHER
 18

	)

41 
	#DOT11_RC_INVALID_UC_CIPHER
 19

	)

42 
	#DOT11_RC_INVALID_AKMP
 20

	)

43 
	#DOT11_RC_BAD_WPA_VERSION
 21

	)

44 
	#DOT11_RC_INVALID_WPA_CAP
 22

	)

45 
	#DOT11_RC_8021X_AUTH_FAIL
 23

	)

47 
	#WPA2_PMKID_LEN
 16

	)

50 
BWL_PRE_PACKED_STRUCT
 struct

52 
uöt8
 
	mèg
;

53 
uöt8
 
	mÀngth
;

54 
uöt8
 
	moui
[3];

55 
uöt8
 
	moui_ty≥
;

56 
BWL_PRE_PACKED_STRUCT
 struct {

57 
uöt8
 
	mlow
;

58 
uöt8
 
	mhigh
;

59 } 
BWL_POST_PACKED_STRUCT
 
	mvîsi⁄
;

60 } 
	tBWL_POST_PACKED_STRUCT
 
	tw∑_õ_fixed_t
;

61 
	#WPA_IE_OUITYPE_LEN
 4

	)

62 
	#WPA_IE_FIXED_LEN
 8

	)

63 
	#WPA_IE_TAG_FIXED_LEN
 6

	)

65 
BWL_PRE_PACKED_STRUCT
 struct {

66 
uöt8
 
	mèg
;

67 
uöt8
 
	mÀngth
;

68 
BWL_PRE_PACKED_STRUCT
 struct {

69 
uöt8
 
	mlow
;

70 
uöt8
 
	mhigh
;

71 } 
BWL_POST_PACKED_STRUCT
 
	mvîsi⁄
;

72 } 
	tBWL_POST_PACKED_STRUCT
 
	tw∑_r¢_õ_fixed_t
;

73 
	#WPA_RSN_IE_FIXED_LEN
 4

	)

74 
	#WPA_RSN_IE_TAG_FIXED_LEN
 2

	)

75 
uöt8
 
	tw∑_pmkid_t
[
WPA2_PMKID_LEN
];

78 
BWL_PRE_PACKED_STRUCT
 struct

80 
uöt8
 
	moui
[3];

81 
uöt8
 
	mty≥
;

82 } 
	tBWL_POST_PACKED_STRUCT
 
	tw∑_suôe_t
, 
	tw∑_suôe_mˇ°_t
;

83 
	#WPA_SUITE_LEN
 4

	)

86 
BWL_PRE_PACKED_STRUCT
 struct

88 
BWL_PRE_PACKED_STRUCT
 struct {

89 
uöt8
 
	mlow
;

90 
uöt8
 
	mhigh
;

91 } 
BWL_POST_PACKED_STRUCT
 
	mcou¡
;

92 
w∑_suôe_t
 
	mli°
[1];

93 } 
	tBWL_POST_PACKED_STRUCT
 
	tw∑_suôe_uˇ°_t
, 
	tw∑_suôe_auth_key_mgmt_t
;

94 
	#WPA_IE_SUITE_COUNT_LEN
 2

	)

95 
BWL_PRE_PACKED_STRUCT
 struct

97 
BWL_PRE_PACKED_STRUCT
 struct {

98 
uöt8
 
	mlow
;

99 
uöt8
 
	mhigh
;

100 } 
BWL_POST_PACKED_STRUCT
 
	mcou¡
;

101 
w∑_pmkid_t
 
	mli°
[1];

102 } 
	tBWL_POST_PACKED_STRUCT
 
	tw∑_pmkid_li°_t
;

105 
	#WPA_CIPHER_NONE
 0

	)

106 
	#WPA_CIPHER_WEP_40
 1

	)

107 
	#WPA_CIPHER_TKIP
 2

	)

108 
	#WPA_CIPHER_AES_OCB
 3

	)

109 
	#WPA_CIPHER_AES_CCM
 4

	)

110 
	#WPA_CIPHER_WEP_104
 5

	)

113 
	#IS_WPA_CIPHER
(
cùhî
Ë((cùhîË=
WPA_CIPHER_NONE
 || \

114 (
cùhî
Ë=
WPA_CIPHER_WEP_40
 || \

115 (
cùhî
Ë=
WPA_CIPHER_WEP_104
 || \

116 (
cùhî
Ë=
WPA_CIPHER_TKIP
 || \

117 (
cùhî
Ë=
WPA_CIPHER_AES_OCB
 || \

118 (
cùhî
Ë=
WPA_CIPHER_AES_CCM
)

	)

121 
	#WPA_TKIP_CM_DETECT
 60

	)

122 
	#WPA_TKIP_CM_BLOCK
 60

	)

125 
	#RSN_CAP_LEN
 2

	)

128 
	#RSN_CAP_PREAUTH
 0x0001

	)

129 
	#RSN_CAP_NOPAIRWISE
 0x0002

	)

130 
	#RSN_CAP_PTK_REPLAY_CNTR_MASK
 0x000C

	)

131 
	#RSN_CAP_PTK_REPLAY_CNTR_SHIFT
 2

	)

132 
	#RSN_CAP_GTK_REPLAY_CNTR_MASK
 0x0030

	)

133 
	#RSN_CAP_GTK_REPLAY_CNTR_SHIFT
 4

	)

134 
	#RSN_CAP_1_REPLAY_CNTR
 0

	)

135 
	#RSN_CAP_2_REPLAY_CNTRS
 1

	)

136 
	#RSN_CAP_4_REPLAY_CNTRS
 2

	)

137 
	#RSN_CAP_16_REPLAY_CNTRS
 3

	)

140 
	#WPA_CAP_4_REPLAY_CNTRS
 
RSN_CAP_4_REPLAY_CNTRS


	)

141 
	#WPA_CAP_16_REPLAY_CNTRS
 
RSN_CAP_16_REPLAY_CNTRS


	)

142 
	#WPA_CAP_REPLAY_CNTR_SHIFT
 
RSN_CAP_PTK_REPLAY_CNTR_SHIFT


	)

143 
	#WPA_CAP_REPLAY_CNTR_MASK
 
RSN_CAP_PTK_REPLAY_CNTR_MASK


	)

146 
	#WPA_CAP_LEN
 
RSN_CAP_LEN


	)

148 
	#WPA_CAP_WPA2_PREAUTH
 
RSN_CAP_PREAUTH


	)

152 
	~<∑cked_£˘i⁄_íd.h
>

	@dhdutil/include/sdiovar.h

22 #i‚de‡
_sdiov¨_h_


23 
	#_sdiov¨_h_


	)

25 
	~<ty≥defs.h
>

28 
	#BWL_DEFAULT_PACKING


	)

29 
	~<∑cked_£˘i⁄_°¨t.h
>

31 
	ssdªg
 {

32 
	mfunc
;

33 
	moff£t
;

34 
	mvÆue
;

35 } 
	tsdªg_t
;

38 
	#SDH_ERROR_VAL
 0x0001

	)

39 
	#SDH_TRACE_VAL
 0x0002

	)

40 
	#SDH_INFO_VAL
 0x0004

	)

41 
	#SDH_DEBUG_VAL
 0x0008

	)

42 
	#SDH_DATA_VAL
 0x0010

	)

43 
	#SDH_CTRL_VAL
 0x0020

	)

44 
	#SDH_LOG_VAL
 0x0040

	)

45 
	#SDH_DMA_VAL
 0x0080

	)

47 
	#NUM_PREV_TRANSACTIONS
 16

	)

50 
	~<∑cked_£˘i⁄_íd.h
>

	@dhdutil/include/trxhdr.h

21 #i‚def 
_TRX_HDR_H_


22 
	#_TRX_HDR_H_


	)

24 
	~<ty≥defs.h
>

26 
	#TRX_MAGIC
 0x30524448

	)

27 
	#TRX_VERSION
 1

	)

28 
	#TRX_MAX_LEN
 0x3B0000

	)

29 
	#TRX_NO_HEADER
 1

	)

30 
	#TRX_GZ_FILES
 0x2

	)

31 
	#TRX_OVERLAYS
 0x4

	)

32 
	#TRX_MAX_OFFSET
 3

	)

33 
	#TRX_UNCOMP_IMAGE
 0x20

	)

35 
	såx_hódî
 {

36 
uöt32
 
	mmagic
;

37 
uöt32
 
	mÀn
;

38 
uöt32
 
	m¸c32
;

39 
uöt32
 
	mÊag_vîsi⁄
;

40 
uöt32
 
	moff£ts
[
TRX_MAX_OFFSET
];

44 
åx_hódî
 
	tTRXHDR
, *
	tPTRXHDR
;

	@dhdutil/include/typedefs.h

20 #i‚de‡
_TYPEDEFS_H_


21 
	#_TYPEDEFS_H_


	)

23 #ifde‡
SITE_TYPEDEFS


27 
	~"sôe_ty≥defs.h
"

33 #ifde‡
__˝lu•lus


35 
	#TYPEDEF_BOOL


	)

36 #i‚de‡
FALSE


37 
	#FALSE
 
Ál£


	)

39 #i‚de‡
TRUE


40 
	#TRUE
 
åue


	)

48 #i‡
deföed
(
__x86_64__
)

49 
	#TYPEDEF_UINTPTR


	)

50 
	tuöçå
;

57 #i‡
deföed
(
_NEED_SIZE_T_
)

58 
	tsize_t
;

65 #i‡
deföed
(
__•¨c__
)

66 
	#TYPEDEF_ULONG


	)

71 #i‡!
deföed
(
LINUX_HYBRID
Ë|| deföed(
LINUX_PORT
)

72 
	#TYPEDEF_UINT


	)

73 #i‚de‡
TARGETENV_™droid


74 
	#TYPEDEF_USHORT


	)

75 
	#TYPEDEF_ULONG


	)

77 #ifde‡
__KERNEL__


78 
	~<löux/vîsi⁄.h
>

79 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 19))

80 
	#TYPEDEF_BOOL


	)

83 #i‡(
LINUX_VERSION_CODE
 =
KERNEL_VERSION
(2, 6, 18))

84 
	~<löux/compûî.h
>

85 #ifde‡
noölöe_f‹_°ack


86 
	#TYPEDEF_BOOL


	)

96 #i‡
deföed
(
__GNUC__
Ë&& deföed(
__STRICT_ANSI__
)

97 
	#TYPEDEF_INT64


	)

98 
	#TYPEDEF_UINT64


	)

102 #i‡
deföed
(
__ICL
)

104 
	#TYPEDEF_INT64


	)

106 #i‡
deföed
(
__STDC__
)

107 
	#TYPEDEF_UINT64


	)

112 #i‡!
deföed
(
__DJGPP__
)

115 #i‡
deföed
(
__KERNEL__
)

118 #i‡!
deföed
(
LINUX_HYBRID
Ë|| deföed(
LINUX_PORT
)

119 
	~<löux/ty≥s.h
>

125 
	~<sys/ty≥s.h
>

134 
	#USE_TYPEDEF_DEFAULTS


	)

141 #ifde‡
USE_TYPEDEF_DEFAULTS


142 #unde‡
USE_TYPEDEF_DEFAULTS


144 #i‚de‡
TYPEDEF_BOOL


145 
	tboﬁ
;

150 #i‚de‡
TYPEDEF_UCHAR


151 
	tuch¨
;

154 #i‚de‡
TYPEDEF_USHORT


155 
	tush‹t
;

158 #i‚de‡
TYPEDEF_UINT


159 
	tuöt
;

162 #i‚de‡
TYPEDEF_ULONG


163 
	tul⁄g
;

168 #i‚de‡
TYPEDEF_UINT8


169 
	tuöt8
;

172 #i‚de‡
TYPEDEF_UINT16


173 
	tuöt16
;

176 #i‚de‡
TYPEDEF_UINT32


177 
	tuöt32
;

180 #i‚de‡
TYPEDEF_UINT64


181 
	tuöt64
;

184 #i‚de‡
TYPEDEF_UINTPTR


185 
	tuöçå
;

188 #i‚de‡
TYPEDEF_INT8


189 sig√d 
	töt8
;

192 #i‚de‡
TYPEDEF_INT16


193 sig√d 
	töt16
;

196 #i‚de‡
TYPEDEF_INT32


197 sig√d 
	töt32
;

200 #i‚de‡
TYPEDEF_INT64


201 sig√d 
	töt64
;

206 #i‚de‡
TYPEDEF_FLOAT32


207 
	tÊﬂt32
;

210 #i‚de‡
TYPEDEF_FLOAT64


211 
	tÊﬂt64
;

216 #i‚de‡
TYPEDEF_FLOAT_T


218 #i‡
deföed
(
FLOAT32
)

219 
Êﬂt32
 
	tÊﬂt_t
;

221 
Êﬂt64
 
	tÊﬂt_t
;

228 #i‚de‡
FALSE


229 
	#FALSE
 0

	)

232 #i‚de‡
TRUE


233 
	#TRUE
 1

	)

236 #i‚de‡
NULL


237 
	#NULL
 0

	)

240 #i‚de‡
OFF


241 
	#OFF
 0

	)

244 #i‚de‡
ON


245 
	#ON
 1

	)

248 
	#AUTO
 (-1)

	)

252 #i‚de‡
PTRSZ


253 
	#PTRSZ
 (*)

	)

258 #i‡
deföed
(
__GNUC__
)

259 
	#BWL_COMPILER_GNU


	)

260 #ñi‡
deföed
(
__CC_ARM
) && __CC_ARM

261 
	#BWL_COMPILER_ARMCC


	)

267 #i‚de‡
INLINE


268 #i‡
deföed
(
BWL_COMPILER_MICROSOFT
)

269 
	#INLINE
 
__ölöe


	)

270 #ñi‡
deföed
(
BWL_COMPILER_GNU
)

271 
	#INLINE
 
__ölöe__


	)

272 #ñi‡
deföed
(
BWL_COMPILER_ARMCC
)

273 
	#INLINE
 
__ölöe


	)

275 
	#INLINE


	)

279 #unde‡
TYPEDEF_BOOL


280 #unde‡
TYPEDEF_UCHAR


281 #unde‡
TYPEDEF_USHORT


282 #unde‡
TYPEDEF_UINT


283 #unde‡
TYPEDEF_ULONG


284 #unde‡
TYPEDEF_UINT8


285 #unde‡
TYPEDEF_UINT16


286 #unde‡
TYPEDEF_UINT32


287 #unde‡
TYPEDEF_UINT64


288 #unde‡
TYPEDEF_UINTPTR


289 #unde‡
TYPEDEF_INT8


290 #unde‡
TYPEDEF_INT16


291 #unde‡
TYPEDEF_INT32


292 #unde‡
TYPEDEF_INT64


293 #unde‡
TYPEDEF_FLOAT32


294 #unde‡
TYPEDEF_FLOAT64


295 #unde‡
TYPEDEF_FLOAT_T


300 
	#UNUSED_PARAMETER
(
x
Ë()(x)

	)

303 
	~<bcmdefs.h
>

	@dhdutil/include/wlioctl.h

25 #i‚de‡
_wlio˘l_h_


26 
	#_wlio˘l_h_


	)

28 
	~<ty≥defs.h
>

29 
	~<¥Ÿo/ëhî√t.h
>

30 
	~<¥Ÿo/bcmëh.h
>

31 
	~<¥Ÿo/bcmevít.h
>

32 
	~<¥Ÿo/802.11.h
>

33 
	~<bcmwifi.h
>

35 
	~<bcmcdc.h
>

37 #i‚de‡
INTF_NAME_SIZ


38 
	#INTF_NAME_SIZ
 16

	)

42 
	sªmŸe_io˘l
 {

43 
cdc_io˘l_t
 
	mmsg
;

44 
uöt
 
	md©a_Àn
;

45 
	mötf_«me
[
INTF_NAME_SIZ
];

46 } 
	tªm_io˘l_t
;

47 
	#REMOTE_SIZE
 (
ªm_io˘l_t
)

	)

49 
	#ACTION_FRAME_SIZE
 1040

	)

51 
	swl_a˘i⁄_‰ame
 {

52 
ëhî_addr
 
	mda
;

53 
uöt16
 
	mÀn
;

54 
uöt32
 
	m∑ckëId
;

55 
uöt8
 
	md©a
[
ACTION_FRAME_SIZE
];

56 } 
	twl_a˘i⁄_‰ame_t
;

58 
	#WL_WIFI_ACTION_FRAME_SIZE
 (
wl_a˘i⁄_‰ame
)

	)

60 
	swl_af_∑øms
 {

61 
uöt32
 
	mch™√l
;

62 
öt32
 
	mdwñl_time
;

63 
ëhî_addr
 
	mBSSID
;

64 
wl_a˘i⁄_‰ame_t
 
	ma˘i⁄_‰ame
;

65 } 
	twl_af_∑øms_t
;

67 
	#WL_WIFI_AF_PARAMS_SIZE
 (
wl_af_∑øms
)

	)

70 
	#BWL_DEFAULT_PACKING


	)

71 
	~<∑cked_£˘i⁄_°¨t.h
>

77 
	#LEGACY2_WL_BSS_INFO_VERSION
 108

	)

80 
	swl_bss_öfo_108
 {

81 
uöt32
 
	mvîsi⁄
;

82 
uöt32
 
	mÀngth
;

83 
ëhî_addr
 
	mBSSID
;

84 
uöt16
 
	mbóc⁄_≥riod
;

85 
uöt16
 
	mˇ∑bûôy
;

86 
uöt8
 
	mSSID_Àn
;

87 
uöt8
 
	mSSID
[32];

89 
uöt
 
	mcou¡
;

90 
uöt8
 
	møãs
[16];

91 } 
	møã£t
;

92 
ch™•ec_t
 
	mch™•ec
;

93 
uöt16
 
	m©im_wödow
;

94 
uöt8
 
	mdtim_≥riod
;

95 
öt16
 
	mRSSI
;

96 
öt8
 
	mphy_noi£
;

98 
uöt8
 
	mn_ˇp
;

99 
uöt32
 
	mnbss_ˇp
;

100 
uöt8
 
	m˘l_ch
;

101 
uöt32
 
	mª£rved32
[1];

102 
uöt8
 
	mÊags
;

103 
uöt8
 
	mª£rved
[3];

104 
uöt8
 
	mbasic_mcs
[
MCSSET_LEN
];

106 
uöt16
 
	mõ_off£t
;

107 
uöt32
 
	mõ_Àngth
;

110 } 
	twl_bss_öfo_108_t
;

112 
	#WL_BSS_INFO_VERSION
 109

	)

115 
	swl_bss_öfo
 {

116 
uöt32
 
	mvîsi⁄
;

117 
uöt32
 
	mÀngth
;

118 
ëhî_addr
 
	mBSSID
;

119 
uöt16
 
	mbóc⁄_≥riod
;

120 
uöt16
 
	mˇ∑bûôy
;

121 
uöt8
 
	mSSID_Àn
;

122 
uöt8
 
	mSSID
[32];

124 
uöt
 
	mcou¡
;

125 
uöt8
 
	møãs
[16];

126 } 
	møã£t
;

127 
ch™•ec_t
 
	mch™•ec
;

128 
uöt16
 
	m©im_wödow
;

129 
uöt8
 
	mdtim_≥riod
;

130 
öt16
 
	mRSSI
;

131 
öt8
 
	mphy_noi£
;

133 
uöt8
 
	mn_ˇp
;

134 
uöt32
 
	mnbss_ˇp
;

135 
uöt8
 
	m˘l_ch
;

136 
uöt32
 
	mª£rved32
[1];

137 
uöt8
 
	mÊags
;

138 
uöt8
 
	mª£rved
[3];

139 
uöt8
 
	mbasic_mcs
[
MCSSET_LEN
];

141 
uöt16
 
	mõ_off£t
;

142 
uöt32
 
	mõ_Àngth
;

143 
öt16
 
	mSNR
;

146 } 
	twl_bss_öfo_t
;

148 
	swl_bsscfg
 {

149 
uöt32
 
	mw£c
;

150 
uöt32
 
	mWPA_auth
;

151 
uöt32
 
	mw£c_ödex
;

152 
uöt32
 
	massocüãd
;

153 
uöt32
 
	mBSS
;

154 
uöt32
 
	mphyã°_⁄
;

155 
ëhî_addr
 
	m¥ev_BSSID
;

156 
ëhî_addr
 
	mBSSID
;

157 } 
	twl_bsscfg_t
;

159 
	swl_bss_c⁄fig
 {

160 
uöt32
 
	m©im_wödow
;

161 
uöt32
 
	mbóc⁄_≥riod
;

162 
uöt32
 
	mch™•ec
;

163 } 
	twl_bss_c⁄fig_t
;

166 
	swlc_ssid
 {

167 
uöt32
 
	mSSID_Àn
;

168 
uch¨
 
	mSSID
[32];

169 } 
	twlc_ssid_t
;

172 
	#WL_BSSTYPE_INFRA
 1

	)

173 
	#WL_BSSTYPE_INDEP
 0

	)

174 
	#WL_BSSTYPE_ANY
 2

	)

177 
	#WL_SCANFLAGS_PASSIVE
 0x01

	)

178 
	#WL_SCANFLAGS_RESERVED
 0x02

	)

179 
	#WL_SCANFLAGS_PROHIBITED
 0x04

	)

181 
	swl_sˇn_∑øms
 {

182 
wlc_ssid_t
 
	mssid
;

183 
ëhî_addr
 
	mbssid
;

184 
öt8
 
	mbss_ty≥
;

185 
uöt8
 
	msˇn_ty≥
;

186 
öt32
 
	m≈robes
;

187 
öt32
 
	ma˘ive_time
;

188 
öt32
 
	m∑ssive_time
;

189 
öt32
 
	mhome_time
;

190 
öt32
 
	mch™√l_num
;

191 
uöt16
 
	mch™√l_li°
[1];

192 } 
	twl_sˇn_∑øms_t
;

195 
	#WL_SCAN_PARAMS_FIXED_SIZE
 64

	)

198 
	#WL_SCAN_PARAMS_COUNT_MASK
 0x0000ffff

	)

199 
	#WL_SCAN_PARAMS_NSSID_SHIFT
 16

	)

201 
	#WL_SCAN_ACTION_START
 1

	)

202 
	#WL_SCAN_ACTION_CONTINUE
 2

	)

203 
	#WL_SCAN_ACTION_ABORT
 3

	)

205 
	#ISCAN_REQ_VERSION
 1

	)

208 
	swl_isˇn_∑øms
 {

209 
uöt32
 
	mvîsi⁄
;

210 
uöt16
 
	ma˘i⁄
;

211 
uöt16
 
	msˇn_duøti⁄
;

212 
wl_sˇn_∑øms_t
 
	m∑øms
;

213 } 
	twl_isˇn_∑øms_t
;

216 
	#WL_ISCAN_PARAMS_FIXED_SIZE
 (
	`OFFSETOF
(
wl_isˇn_∑øms_t
, 
∑øms
Ë+ (
wlc_ssid_t
))

	)

218 
	swl_sˇn_ªsu…s
 {

219 
uöt32
 
	mbuÊí
;

220 
uöt32
 
	mvîsi⁄
;

221 
uöt32
 
	mcou¡
;

222 
wl_bss_öfo_t
 
	mbss_öfo
[1];

223 } 
	twl_sˇn_ªsu…s_t
;

226 
	#WL_SCAN_RESULTS_FIXED_SIZE
 ((
wl_sˇn_ªsu…s_t
Ë- (
wl_bss_öfo_t
))

	)

229 
	#WL_SCAN_RESULTS_SUCCESS
 0

	)

230 
	#WL_SCAN_RESULTS_PARTIAL
 1

	)

231 
	#WL_SCAN_RESULTS_PENDING
 2

	)

232 
	#WL_SCAN_RESULTS_ABORTED
 3

	)

233 
	#WL_SCAN_RESULTS_NO_MEM
 4

	)

236 
	#DNGL_RXCTXT_SIZE
 45

	)

238 #i‡
deföed
(
SIMPLE_ISCAN
)

239 
	#ISCAN_RETRY_CNT
 5

	)

240 
	#ISCAN_STATE_IDLE
 0

	)

241 
	#ISCAN_STATE_SCANING
 1

	)

242 
	#ISCAN_STATE_PENDING
 2

	)

245 
	#WLC_IW_ISCAN_MAXLEN
 2048

	)

246 
	sisˇn_buf
 {

247 
isˇn_buf
 * 
	m√xt
;

248 
	misˇn_buf
[
WLC_IW_ISCAN_MAXLEN
];

249 } 
	tisˇn_buf_t
;

252 
	#ESCAN_REQ_VERSION
 1

	)

254 
	swl_esˇn_∑øms
 {

255 
uöt32
 
	mvîsi⁄
;

256 
uöt16
 
	ma˘i⁄
;

257 
uöt16
 
	msync_id
;

258 
wl_sˇn_∑øms_t
 
	m∑øms
;

259 } 
	twl_esˇn_∑øms_t
;

261 
	#WL_ESCAN_PARAMS_FIXED_SIZE
 (
	`OFFSETOF
(
wl_esˇn_∑øms_t
, 
∑øms
Ë+ (
wlc_ssid_t
))

	)

263 
	swl_esˇn_ªsu…
 {

264 
uöt32
 
	mbuÊí
;

265 
uöt32
 
	mvîsi⁄
;

266 
uöt16
 
	msync_id
;

267 
uöt16
 
	mbss_cou¡
;

268 
wl_bss_öfo_t
 
	mbss_öfo
[1];

269 } 
	twl_esˇn_ªsu…_t
;

271 
	#WL_ESCAN_RESULTS_FIXED_SIZE
 ((
wl_esˇn_ªsu…_t
Ë- (
wl_bss_öfo_t
))

	)

274 
	swl_isˇn_ªsu…s
 {

275 
uöt32
 
	m°©us
;

276 
wl_sˇn_ªsu…s_t
 
	mªsu…s
;

277 } 
	twl_isˇn_ªsu…s_t
;

280 
	#WL_ISCAN_RESULTS_FIXED_SIZE
 \

281 (
WL_SCAN_RESULTS_FIXED_SIZE
 + 
	`OFFSETOF
(
wl_isˇn_ªsu…s_t
, 
ªsu…s
))

	)

283 
	swl_¥obe_∑øms
 {

284 
wlc_ssid_t
 
	mssid
;

285 
ëhî_addr
 
	mbssid
;

286 
ëhî_addr
 
	mmac
;

287 } 
	twl_¥obe_∑øms_t
;

289 
	#WL_NUMRATES
 16

	)

290 
	swl_øã£t
 {

291 
uöt32
 
	mcou¡
;

292 
uöt8
 
	møãs
[
WL_NUMRATES
];

293 } 
	twl_øã£t_t
;

295 
	swl_øã£t_¨gs
 {

296 
uöt32
 
	mcou¡
;

297 
uöt8
 
	møãs
[
WL_NUMRATES
];

298 
uöt8
 
	mmcs
[
MCSSET_LEN
];

299 } 
	twl_øã£t_¨gs_t
;

302 
	swl_uöt32_li°
 {

304 
uöt32
 
	mcou¡
;

306 
uöt32
 
	mñemít
[1];

307 } 
	twl_uöt32_li°_t
;

310 
	swl_assoc_∑øms
 {

311 
ëhî_addr
 
	mbssid
;

312 
uöt16
 
	mbssid_˙t
;

313 
öt32
 
	mch™•ec_num
;

314 
ch™•ec_t
 
	mch™•ec_li°
[1];

315 } 
	twl_assoc_∑øms_t
;

316 
	#WL_ASSOC_PARAMS_FIXED_SIZE
 ((
wl_assoc_∑øms_t
Ë- (
ch™•ec_t
))

	)

319 
wl_assoc_∑øms_t
 
	twl_ªassoc_∑øms_t
;

320 
	#WL_REASSOC_PARAMS_FIXED_SIZE
 
WL_ASSOC_PARAMS_FIXED_SIZE


	)

323 
wl_assoc_∑øms_t
 
	twl_joö_assoc_∑øms_t
;

324 
	#WL_JOIN_ASSOC_PARAMS_FIXED_SIZE
 
WL_ASSOC_PARAMS_FIXED_SIZE


	)

327 
	swl_joö_∑øms
 {

328 
wlc_ssid_t
 
	mssid
;

329 
wl_assoc_∑øms_t
 
	m∑øms
;

330 } 
	twl_joö_∑øms_t
;

331 
	#WL_JOIN_PARAMS_FIXED_SIZE
 ((
wl_joö_∑øms_t
Ë- (
ch™•ec_t
))

	)

334 
	swl_joö_sˇn_∑øms
 {

335 
uöt8
 
	msˇn_ty≥
;

336 
öt32
 
	m≈robes
;

337 
öt32
 
	ma˘ive_time
;

338 
öt32
 
	m∑ssive_time
;

339 
öt32
 
	mhome_time
;

340 } 
	twl_joö_sˇn_∑øms_t
;

343 
	swl_extjoö_∑øms
 {

344 
wlc_ssid_t
 
	mssid
;

345 
wl_joö_sˇn_∑øms_t
 
	msˇn
;

346 
wl_joö_assoc_∑øms_t
 
	massoc
;

347 } 
	twl_extjoö_∑øms_t
;

348 
	#WL_EXTJOIN_PARAMS_FIXED_SIZE
 ((
wl_extjoö_∑øms_t
Ë- (
ch™•ec_t
))

	)

351 
uöt32
 
	mnum
;

352 
ch™•ec_t
 
	mli°
[1];

353 } 
	tch™•ec_li°_t
;

356 
	#NRATE_MCS_INUSE
 0x00000080

	)

357 
	#NRATE_RATE_MASK
 0x0000007f

	)

358 
	#NRATE_STF_MASK
 0x0000ff00

	)

359 
	#NRATE_STF_SHIFT
 8

	)

360 
	#NRATE_OVERRIDE
 0x80000000

	)

361 
	#NRATE_OVERRIDE_MCS_ONLY
 0x40000000

	)

362 
	#NRATE_SGI_MASK
 0x00800000

	)

363 
	#NRATE_SGI_SHIFT
 23

	)

364 
	#NRATE_LDPC_CODING
 0x00400000

	)

365 
	#NRATE_LDPC_SHIFT
 22

	)

367 
	#NRATE_STF_SISO
 0

	)

368 
	#NRATE_STF_CDD
 1

	)

369 
	#NRATE_STF_STBC
 2

	)

370 
	#NRATE_STF_SDM
 3

	)

372 
	#ANTENNA_NUM_1
 1

	)

373 
	#ANTENNA_NUM_2
 2

	)

374 
	#ANTENNA_NUM_3
 3

	)

375 
	#ANTENNA_NUM_4
 4

	)

377 
	#ANT_SELCFG_AUTO
 0x80

	)

378 
	#ANT_SELCFG_MASK
 0x33

	)

379 
	#ANT_SELCFG_MAX
 4

	)

380 
	#ANT_SELCFG_TX_UNICAST
 0

	)

381 
	#ANT_SELCFG_RX_UNICAST
 1

	)

382 
	#ANT_SELCFG_TX_DEF
 2

	)

383 
	#ANT_SELCFG_RX_DEF
 3

	)

385 
	#MAX_STREAMS_SUPPORTED
 4

	)

388 
uöt8
 
	m™t_c⁄fig
[
ANT_SELCFG_MAX
];

389 
uöt8
 
	mnum_™tcfg
;

390 } 
	twlc_™t£lcfg_t
;

392 
	#HIGHEST_SINGLE_STREAM_MCS
 7

	)

394 
	#MAX_CCA_CHANNELS
 38

	)

395 
	#MAX_CCA_SECS
 60

	)

397 
	#IBSS_MED
 15

	)

398 
	#IBSS_HI
 25

	)

399 
	#OBSS_MED
 12

	)

400 
	#OBSS_HI
 25

	)

401 
	#INTERFER_MED
 5

	)

402 
	#INTERFER_HI
 10

	)

404 
	#CCA_FLAG_2G_ONLY
 0x01

	)

405 
	#CCA_FLAG_5G_ONLY
 0x02

	)

406 
	#CCA_FLAG_IGNORE_DURATION
 0x04

	)

407 
	#CCA_FLAGS_PREFER_1_6_11
 0x10

	)

408 
	#CCA_FLAG_IGNORE_INTERFER
 0x20

	)

410 
	#CCA_ERRNO_BAND
 1

	)

411 
	#CCA_ERRNO_DURATION
 2

	)

412 
	#CCA_ERRNO_PREF_CHAN
 3

	)

413 
	#CCA_ERRNO_INTERFER
 4

	)

414 
	#CCA_ERRNO_TOO_FEW
 5

	)

417 
uöt32
 
	mduøti⁄
;

418 
uöt32
 
	mc⁄ge°_ibss
;

420 
uöt32
 
	mc⁄ge°_obss
;

421 
uöt32
 
	möãr„ªn˚
;

422 
uöt32
 
	mtime°amp
;

423 } 
	tcˇ_c⁄ge°_t
;

426 
ch™•ec_t
 
	mch™•ec
;

427 
uöt8
 
	mnum_£cs
;

428 
cˇ_c⁄ge°_t
 
	m£cs
[1];

429 } 
	tcˇ_c⁄ge°_ch™√l_ªq_t
;

431 
	#WLC_CNTRY_BUF_SZ
 4

	)

433 
	swl_cou¡ry
 {

434 
	mcou¡ry_abbªv
[
WLC_CNTRY_BUF_SZ
];

435 
öt32
 
	mªv
;

436 
	mccode
[
WLC_CNTRY_BUF_SZ
];

437 } 
	twl_cou¡ry_t
;

439 
	swl_ch™√ls_ö_cou¡ry
 {

440 
uöt32
 
	mbuÊí
;

441 
uöt32
 
	mb™d
;

442 
	mcou¡ry_abbªv
[
WLC_CNTRY_BUF_SZ
];

443 
uöt32
 
	mcou¡
;

444 
uöt32
 
	mch™√l
[1];

445 } 
	twl_ch™√ls_ö_cou¡ry_t
;

447 
	swl_cou¡ry_li°
 {

448 
uöt32
 
	mbuÊí
;

449 
uöt32
 
	mb™d_£t
;

450 
uöt32
 
	mb™d
;

451 
uöt32
 
	mcou¡
;

452 
	mcou¡ry_abbªv
[1];

453 } 
	twl_cou¡ry_li°_t
;

455 
	#WL_NUM_RPI_BINS
 8

	)

456 
	#WL_RM_TYPE_BASIC
 1

	)

457 
	#WL_RM_TYPE_CCA
 2

	)

458 
	#WL_RM_TYPE_RPI
 3

	)

460 
	#WL_RM_FLAG_PARALLEL
 (1<<0)

	)

462 
	#WL_RM_FLAG_LATE
 (1<<1)

	)

463 
	#WL_RM_FLAG_INCAPABLE
 (1<<2)

	)

464 
	#WL_RM_FLAG_REFUSED
 (1<<3)

	)

466 
	swl_rm_ªq_ñt
 {

467 
öt8
 
	mty≥
;

468 
öt8
 
	mÊags
;

469 
ch™•ec_t
 
	mch™•ec
;

470 
uöt32
 
	mtokí
;

471 
uöt32
 
	mtsf_h
;

472 
uöt32
 
	mtsf_l
;

473 
uöt32
 
	mdur
;

474 } 
	twl_rm_ªq_ñt_t
;

476 
	swl_rm_ªq
 {

477 
uöt32
 
	mtokí
;

478 
uöt32
 
	mcou¡
;

479 *
	mcb
;

480 *
	mcb_¨g
;

481 
wl_rm_ªq_ñt_t
 
	mªq
[1];

482 } 
	twl_rm_ªq_t
;

483 
	#WL_RM_REQ_FIXED_LEN
 
	`OFFSETOF
(
wl_rm_ªq_t
, 
ªq
)

	)

485 
	swl_rm_ªp_ñt
 {

486 
öt8
 
	mty≥
;

487 
öt8
 
	mÊags
;

488 
ch™•ec_t
 
	mch™•ec
;

489 
uöt32
 
	mtokí
;

490 
uöt32
 
	mtsf_h
;

491 
uöt32
 
	mtsf_l
;

492 
uöt32
 
	mdur
;

493 
uöt32
 
	mÀn
;

494 
uöt8
 
	md©a
[1];

495 } 
	twl_rm_ªp_ñt_t
;

496 
	#WL_RM_REP_ELT_FIXED_LEN
 24

	)

498 
	#WL_RPI_REP_BIN_NUM
 8

	)

499 
	swl_rm_Ωi_ªp
 {

500 
uöt8
 
	mΩi
[
WL_RPI_REP_BIN_NUM
];

501 
öt8
 
	mΩi_max
[
WL_RPI_REP_BIN_NUM
];

502 } 
	twl_rm_Ωi_ªp_t
;

504 
	swl_rm_ªp
 {

505 
uöt32
 
	mtokí
;

506 
uöt32
 
	mÀn
;

507 
wl_rm_ªp_ñt_t
 
	mªp
[1];

508 } 
	twl_rm_ªp_t
;

509 
	#WL_RM_REP_FIXED_LEN
 8

	)

512 
	esup_auth_°©us
 {

514 
	mWLC_SUP_DISCONNECTED
 = 0,

515 
	mWLC_SUP_CONNECTING
,

516 
	mWLC_SUP_IDREQUIRED
,

517 
	mWLC_SUP_AUTHENTICATING
,

518 
	mWLC_SUP_AUTHENTICATED
,

519 
	mWLC_SUP_KEYXCHANGE
,

520 
	mWLC_SUP_KEYED
,

521 
	mWLC_SUP_TIMEOUT
,

522 
	mWLC_SUP_LAST_BASIC_STATE
,

526 
	mWLC_SUP_KEYXCHANGE_WAIT_M1
 = 
WLC_SUP_AUTHENTICATED
,

528 
	mWLC_SUP_KEYXCHANGE_PREP_M2
 = 
WLC_SUP_KEYXCHANGE
,

530 
	mWLC_SUP_KEYXCHANGE_WAIT_M3
 = 
WLC_SUP_LAST_BASIC_STATE
,

531 
	mWLC_SUP_KEYXCHANGE_PREP_M4
,

532 
	mWLC_SUP_KEYXCHANGE_WAIT_G1
,

533 
	mWLC_SUP_KEYXCHANGE_PREP_G2


534 } 
	tsup_auth_°©us_t
;

537 
	#CRYPTO_ALGO_OFF
 0

	)

538 
	#CRYPTO_ALGO_WEP1
 1

	)

539 
	#CRYPTO_ALGO_TKIP
 2

	)

540 
	#CRYPTO_ALGO_WEP128
 3

	)

541 
	#CRYPTO_ALGO_AES_CCM
 4

	)

542 
	#CRYPTO_ALGO_AES_OCB_MSDU
 5

	)

543 
	#CRYPTO_ALGO_AES_OCB_MPDU
 6

	)

544 
	#CRYPTO_ALGO_NALG
 7

	)

546 
	#WSEC_GEN_MIC_ERROR
 0x0001

	)

547 
	#WSEC_GEN_REPLAY
 0x0002

	)

548 
	#WSEC_GEN_ICV_ERROR
 0x0004

	)

550 
	#WL_SOFT_KEY
 (1 << 0)

	)

551 
	#WL_PRIMARY_KEY
 (1 << 1)

	)

552 
	#WL_KF_RES_4
 (1 << 4)

	)

553 
	#WL_KF_RES_5
 (1 << 5)

	)

554 
	#WL_IBSS_PEER_GROUP_KEY
 (1 << 6)

	)

556 
	swl_w£c_key
 {

557 
uöt32
 
	mödex
;

558 
uöt32
 
	mÀn
;

559 
uöt8
 
	md©a
[
DOT11_MAX_KEY_SIZE
];

560 
uöt32
 
	m∑d_1
[18];

561 
uöt32
 
	mÆgo
;

562 
uöt32
 
	mÊags
;

563 
uöt32
 
	m∑d_2
[2];

564 
	m∑d_3
;

565 
	miv_öôülized
;

566 
	m∑d_4
;

569 
uöt32
 
	mhi
;

570 
uöt16
 
	mlo
;

571 } 
	mrxiv
;

572 
uöt32
 
	m∑d_5
[2];

573 
ëhî_addr
 
	mó
;

574 } 
	twl_w£c_key_t
;

576 
	#WSEC_MIN_PSK_LEN
 8

	)

577 
	#WSEC_MAX_PSK_LEN
 64

	)

580 
	#WSEC_PASSPHRASE
 (1<<0)

	)

584 
ush‹t
 
	mkey_Àn
;

585 
ush‹t
 
	mÊags
;

586 
uöt8
 
	mkey
[
WSEC_MAX_PSK_LEN
];

587 } 
	tw£c_pmk_t
;

590 
	#WEP_ENABLED
 0x0001

	)

591 
	#TKIP_ENABLED
 0x0002

	)

592 
	#AES_ENABLED
 0x0004

	)

593 
	#WSEC_SWFLAG
 0x0008

	)

594 
	#SES_OW_ENABLED
 0x0040

	)

597 
	#WPA_AUTH_DISABLED
 0x0000

	)

598 
	#WPA_AUTH_NONE
 0x0001

	)

599 
	#WPA_AUTH_UNSPECIFIED
 0x0002

	)

600 
	#WPA_AUTH_PSK
 0x0004

	)

602 
	#WPA2_AUTH_UNSPECIFIED
 0x0040

	)

603 
	#WPA2_AUTH_PSK
 0x0080

	)

604 
	#BRCM_AUTH_PSK
 0x0100

	)

605 
	#BRCM_AUTH_DPT
 0x0200

	)

608 
	#MAXPMKID
 16

	)

610 
	s_pmkid
 {

611 
ëhî_addr
 
	mBSSID
;

612 
uöt8
 
	mPMKID
[
WPA2_PMKID_LEN
];

613 } 
	tpmkid_t
;

615 
	s_pmkid_li°
 {

616 
uöt32
 
	m≈mkid
;

617 
pmkid_t
 
	mpmkid
[1];

618 } 
	tpmkid_li°_t
;

620 
	s_pmkid_ˇnd
 {

621 
ëhî_addr
 
	mBSSID
;

622 
uöt8
 
	m¥óuth
;

623 } 
	tpmkid_ˇnd_t
;

625 
	s_pmkid_ˇnd_li°
 {

626 
uöt32
 
	m≈mkid_ˇnd
;

627 
pmkid_ˇnd_t
 
	mpmkid_ˇnd
[1];

628 } 
	tpmkid_ˇnd_li°_t
;

633 
	#WLC_TXFILTER_OVERRIDE_DISABLED
 0

	)

634 
	#WLC_TXFILTER_OVERRIDE_ENABLED
 1

	)

638 
uöt32
 
	mvÆ
;

639 
ëhî_addr
 
	mó
;

640 } 
	tscb_vÆ_t
;

644 
uöt32
 
	mcode
;

645 
scb_vÆ_t
 
	mio˘l_¨gs
;

646 } 
	tauth›s_t
;

649 
	sch™√l_öfo
 {

650 
	mhw_ch™√l
;

651 
	mèrgë_ch™√l
;

652 
	msˇn_ch™√l
;

653 } 
	tch™√l_öfo_t
;

656 
	sma˛i°
 {

657 
uöt
 
	mcou¡
;

658 
ëhî_addr
 
	mó
[1];

662 
	sgë_pkt˙t
 {

663 
uöt
 
	mrx_good_pkt
;

664 
uöt
 
	mrx_bad_pkt
;

665 
uöt
 
	mtx_good_pkt
;

666 
uöt
 
	mtx_bad_pkt
;

667 
uöt
 
	mrx_oˇ°_good_pkt
;

668 } 
	tgë_pkt˙t_t
;

670 
	#WL_IOCTL_ACTION_GET
 0x0

	)

671 
	#WL_IOCTL_ACTION_SET
 0x1

	)

672 
	#WL_IOCTL_ACTION_OVL_IDX_MASK
 0x1e

	)

673 
	#WL_IOCTL_ACTION_OVL_RSV
 0x20

	)

674 
	#WL_IOCTL_ACTION_OVL
 0x40

	)

675 
	#WL_IOCTL_ACTION_MASK
 0x7e

	)

676 
	#WL_IOCTL_ACTION_OVL_SHIFT
 1

	)

679 
	swl_io˘l
 {

680 
uöt
 
	mcmd
;

681 *
	mbuf
;

682 
uöt
 
	mÀn
;

683 
uöt8
 
	m£t
;

684 
uöt
 
	mu£d
;

685 
uöt
 
	m√eded
;

686 } 
	twl_io˘l_t
;

689 
	#io˘l_subty≥
 
£t


	)

690 
	#io˘l_pid
 
u£d


	)

691 
	#io˘l_°©us
 
√eded


	)

694 
	swlc_ªv_öfo
 {

695 
uöt
 
	mvíd‹id
;

696 
uöt
 
	mdevi˚id
;

697 
uöt
 
	mødi‹ev
;

698 
uöt
 
	mchùªv
;

699 
uöt
 
	mc‹îev
;

700 
uöt
 
	mbﬂrdid
;

701 
uöt
 
	mbﬂrdvíd‹
;

702 
uöt
 
	mbﬂrdªv
;

703 
uöt
 
	mdrivîªv
;

704 
uöt
 
	mucodîev
;

705 
uöt
 
	mbus
;

706 
uöt
 
	mchùnum
;

707 
uöt
 
	mphyty≥
;

708 
uöt
 
	mphyªv
;

709 
uöt
 
	m™¨ev
;

710 
uöt
 
	mchùpkg
;

711 } 
	twlc_ªv_öfo_t
;

713 
	#WL_REV_INFO_LEGACY_LENGTH
 48

	)

715 
	#WL_BRAND_MAX
 10

	)

716 
	swl_ö°™˚_öfo
 {

717 
uöt
 
	mö°™˚
;

718 
	mbønd
[
WL_BRAND_MAX
];

719 } 
	twl_ö°™˚_öfo_t
;

722 
	swl_txfifo_sz
 {

723 
uöt16
 
	mmagic
;

724 
uöt16
 
	mfifo
;

725 
uöt16
 
	msize
;

726 } 
	twl_txfifo_sz_t
;

728 
	#WL_TXFIFO_SZ_MAGIC
 0xa5a5

	)

732 
	#WLC_IOV_NAME_LEN
 30

	)

733 
	swlc_iov_åx_s
 {

734 
uöt8
 
	mmoduÀ
;

735 
uöt8
 
	mty≥
;

736 
	m«me
[
WLC_IOV_NAME_LEN
];

737 } 
	twlc_iov_åx_t
;

740 
	#WLC_IOCTL_MAGIC
 0x14e46c77

	)

743 
	#WLC_IOCTL_VERSION
 1

	)

745 
	#WLC_IOCTL_MAXLEN
 8192

	)

746 
	#WLC_IOCTL_SMLEN
 256

	)

747 
	#WLC_IOCTL_MEDLEN
 1536

	)

748 #ifde‡
WLC_HIGH_ONLY


749 
	#WLC_SAMPLECOLLECT_MAXLEN
 1024

	)

751 
	#WLC_SAMPLECOLLECT_MAXLEN
 10240

	)

755 
	#WLC_GET_MAGIC
 0

	)

756 
	#WLC_GET_VERSION
 1

	)

757 
	#WLC_UP
 2

	)

758 
	#WLC_DOWN
 3

	)

759 
	#WLC_GET_LOOP
 4

	)

760 
	#WLC_SET_LOOP
 5

	)

761 
	#WLC_DUMP
 6

	)

762 
	#WLC_GET_MSGLEVEL
 7

	)

763 
	#WLC_SET_MSGLEVEL
 8

	)

764 
	#WLC_GET_PROMISC
 9

	)

765 
	#WLC_SET_PROMISC
 10

	)

766 
	#WLC_OVERLAY_IOCTL
 11

	)

767 
	#WLC_GET_RATE
 12

	)

769 
	#WLC_GET_INSTANCE
 14

	)

774 
	#WLC_GET_INFRA
 19

	)

775 
	#WLC_SET_INFRA
 20

	)

776 
	#WLC_GET_AUTH
 21

	)

777 
	#WLC_SET_AUTH
 22

	)

778 
	#WLC_GET_BSSID
 23

	)

779 
	#WLC_SET_BSSID
 24

	)

780 
	#WLC_GET_SSID
 25

	)

781 
	#WLC_SET_SSID
 26

	)

782 
	#WLC_RESTART
 27

	)

784 
	#WLC_GET_CHANNEL
 29

	)

785 
	#WLC_SET_CHANNEL
 30

	)

786 
	#WLC_GET_SRL
 31

	)

787 
	#WLC_SET_SRL
 32

	)

788 
	#WLC_GET_LRL
 33

	)

789 
	#WLC_SET_LRL
 34

	)

790 
	#WLC_GET_PLCPHDR
 35

	)

791 
	#WLC_SET_PLCPHDR
 36

	)

792 
	#WLC_GET_RADIO
 37

	)

793 
	#WLC_SET_RADIO
 38

	)

794 
	#WLC_GET_PHYTYPE
 39

	)

795 
	#WLC_DUMP_RATE
 40

	)

796 
	#WLC_SET_RATE_PARAMS
 41

	)

797 
	#WLC_GET_FIXRATE
 42

	)

798 
	#WLC_SET_FIXRATE
 43

	)

801 
	#WLC_GET_KEY
 44

	)

802 
	#WLC_SET_KEY
 45

	)

803 
	#WLC_GET_REGULATORY
 46

	)

804 
	#WLC_SET_REGULATORY
 47

	)

805 
	#WLC_GET_PASSIVE_SCAN
 48

	)

806 
	#WLC_SET_PASSIVE_SCAN
 49

	)

807 
	#WLC_SCAN
 50

	)

808 
	#WLC_SCAN_RESULTS
 51

	)

809 
	#WLC_DISASSOC
 52

	)

810 
	#WLC_REASSOC
 53

	)

811 
	#WLC_GET_ROAM_TRIGGER
 54

	)

812 
	#WLC_SET_ROAM_TRIGGER
 55

	)

813 
	#WLC_GET_ROAM_DELTA
 56

	)

814 
	#WLC_SET_ROAM_DELTA
 57

	)

815 
	#WLC_GET_ROAM_SCAN_PERIOD
 58

	)

816 
	#WLC_SET_ROAM_SCAN_PERIOD
 59

	)

817 
	#WLC_EVM
 60

	)

818 
	#WLC_GET_TXANT
 61

	)

819 
	#WLC_SET_TXANT
 62

	)

820 
	#WLC_GET_ANTDIV
 63

	)

821 
	#WLC_SET_ANTDIV
 64

	)

824 
	#WLC_GET_CLOSED
 67

	)

825 
	#WLC_SET_CLOSED
 68

	)

826 
	#WLC_GET_MACLIST
 69

	)

827 
	#WLC_SET_MACLIST
 70

	)

828 
	#WLC_GET_RATESET
 71

	)

829 
	#WLC_SET_RATESET
 72

	)

831 
	#WLC_LONGTRAIN
 74

	)

832 
	#WLC_GET_BCNPRD
 75

	)

833 
	#WLC_SET_BCNPRD
 76

	)

834 
	#WLC_GET_DTIMPRD
 77

	)

835 
	#WLC_SET_DTIMPRD
 78

	)

836 
	#WLC_GET_SROM
 79

	)

837 
	#WLC_SET_SROM
 80

	)

838 
	#WLC_GET_WEP_RESTRICT
 81

	)

839 
	#WLC_SET_WEP_RESTRICT
 82

	)

840 
	#WLC_GET_COUNTRY
 83

	)

841 
	#WLC_SET_COUNTRY
 84

	)

842 
	#WLC_GET_PM
 85

	)

843 
	#WLC_SET_PM
 86

	)

844 
	#WLC_GET_WAKE
 87

	)

845 
	#WLC_SET_WAKE
 88

	)

847 
	#WLC_GET_FORCELINK
 90

	)

848 
	#WLC_SET_FORCELINK
 91

	)

849 
	#WLC_FREQ_ACCURACY
 92

	)

850 
	#WLC_CARRIER_SUPPRESS
 93

	)

851 
	#WLC_GET_PHYREG
 94

	)

852 
	#WLC_SET_PHYREG
 95

	)

853 
	#WLC_GET_RADIOREG
 96

	)

854 
	#WLC_SET_RADIOREG
 97

	)

855 
	#WLC_GET_REVINFO
 98

	)

856 
	#WLC_GET_UCANTDIV
 99

	)

857 
	#WLC_SET_UCANTDIV
 100

	)

858 
	#WLC_R_REG
 101

	)

859 
	#WLC_W_REG
 102

	)

862 
	#WLC_GET_MACMODE
 105

	)

863 
	#WLC_SET_MACMODE
 106

	)

864 
	#WLC_GET_MONITOR
 107

	)

865 
	#WLC_SET_MONITOR
 108

	)

866 
	#WLC_GET_GMODE
 109

	)

867 
	#WLC_SET_GMODE
 110

	)

868 
	#WLC_GET_LEGACY_ERP
 111

	)

869 
	#WLC_SET_LEGACY_ERP
 112

	)

870 
	#WLC_GET_RX_ANT
 113

	)

871 
	#WLC_GET_CURR_RATESET
 114

	)

872 
	#WLC_GET_SCANSUPPRESS
 115

	)

873 
	#WLC_SET_SCANSUPPRESS
 116

	)

874 
	#WLC_GET_AP
 117

	)

875 
	#WLC_SET_AP
 118

	)

876 
	#WLC_GET_EAP_RESTRICT
 119

	)

877 
	#WLC_SET_EAP_RESTRICT
 120

	)

878 
	#WLC_SCB_AUTHORIZE
 121

	)

879 
	#WLC_SCB_DEAUTHORIZE
 122

	)

880 
	#WLC_GET_WDSLIST
 123

	)

881 
	#WLC_SET_WDSLIST
 124

	)

882 
	#WLC_GET_ATIM
 125

	)

883 
	#WLC_SET_ATIM
 126

	)

884 
	#WLC_GET_RSSI
 127

	)

885 
	#WLC_GET_PHYANTDIV
 128

	)

886 
	#WLC_SET_PHYANTDIV
 129

	)

887 
	#WLC_AP_RX_ONLY
 130

	)

888 
	#WLC_GET_TX_PATH_PWR
 131

	)

889 
	#WLC_SET_TX_PATH_PWR
 132

	)

890 
	#WLC_GET_WSEC
 133

	)

891 
	#WLC_SET_WSEC
 134

	)

892 
	#WLC_GET_PHY_NOISE
 135

	)

893 
	#WLC_GET_BSS_INFO
 136

	)

894 
	#WLC_GET_PKTCNTS
 137

	)

895 
	#WLC_GET_LAZYWDS
 138

	)

896 
	#WLC_SET_LAZYWDS
 139

	)

897 
	#WLC_GET_BANDLIST
 140

	)

898 
	#WLC_GET_BAND
 141

	)

899 
	#WLC_SET_BAND
 142

	)

900 
	#WLC_SCB_DEAUTHENTICATE
 143

	)

901 
	#WLC_GET_SHORTSLOT
 144

	)

902 
	#WLC_GET_SHORTSLOT_OVERRIDE
 145

	)

903 
	#WLC_SET_SHORTSLOT_OVERRIDE
 146

	)

904 
	#WLC_GET_SHORTSLOT_RESTRICT
 147

	)

905 
	#WLC_SET_SHORTSLOT_RESTRICT
 148

	)

906 
	#WLC_GET_GMODE_PROTECTION
 149

	)

907 
	#WLC_GET_GMODE_PROTECTION_OVERRIDE
 150

	)

908 
	#WLC_SET_GMODE_PROTECTION_OVERRIDE
 151

	)

909 
	#WLC_UPGRADE
 152

	)

912 
	#WLC_GET_IGNORE_BCNS
 155

	)

913 
	#WLC_SET_IGNORE_BCNS
 156

	)

914 
	#WLC_GET_SCB_TIMEOUT
 157

	)

915 
	#WLC_SET_SCB_TIMEOUT
 158

	)

916 
	#WLC_GET_ASSOCLIST
 159

	)

917 
	#WLC_GET_CLK
 160

	)

918 
	#WLC_SET_CLK
 161

	)

919 
	#WLC_GET_UP
 162

	)

920 
	#WLC_OUT
 163

	)

921 
	#WLC_GET_WPA_AUTH
 164

	)

922 
	#WLC_SET_WPA_AUTH
 165

	)

923 
	#WLC_GET_UCFLAGS
 166

	)

924 
	#WLC_SET_UCFLAGS
 167

	)

925 
	#WLC_GET_PWRIDX
 168

	)

926 
	#WLC_SET_PWRIDX
 169

	)

927 
	#WLC_GET_TSSI
 170

	)

928 
	#WLC_GET_SUP_RATESET_OVERRIDE
 171

	)

929 
	#WLC_SET_SUP_RATESET_OVERRIDE
 172

	)

935 
	#WLC_GET_PROTECTION_CONTROL
 178

	)

936 
	#WLC_SET_PROTECTION_CONTROL
 179

	)

937 
	#WLC_GET_PHYLIST
 180

	)

938 
	#WLC_ENCRYPT_STRENGTH
 181

	)

939 
	#WLC_DECRYPT_STATUS
 182

	)

940 
	#WLC_GET_KEY_SEQ
 183

	)

941 
	#WLC_GET_SCAN_CHANNEL_TIME
 184

	)

942 
	#WLC_SET_SCAN_CHANNEL_TIME
 185

	)

943 
	#WLC_GET_SCAN_UNASSOC_TIME
 186

	)

944 
	#WLC_SET_SCAN_UNASSOC_TIME
 187

	)

945 
	#WLC_GET_SCAN_HOME_TIME
 188

	)

946 
	#WLC_SET_SCAN_HOME_TIME
 189

	)

947 
	#WLC_GET_SCAN_NPROBES
 190

	)

948 
	#WLC_SET_SCAN_NPROBES
 191

	)

949 
	#WLC_GET_PRB_RESP_TIMEOUT
 192

	)

950 
	#WLC_SET_PRB_RESP_TIMEOUT
 193

	)

951 
	#WLC_GET_ATTEN
 194

	)

952 
	#WLC_SET_ATTEN
 195

	)

953 
	#WLC_GET_SHMEM
 196

	)

954 
	#WLC_SET_SHMEM
 197

	)

957 
	#WLC_SET_WSEC_TEST
 200

	)

958 
	#WLC_SCB_DEAUTHENTICATE_FOR_REASON
 201

	)

959 
	#WLC_TKIP_COUNTERMEASURES
 202

	)

960 
	#WLC_GET_PIOMODE
 203

	)

961 
	#WLC_SET_PIOMODE
 204

	)

962 
	#WLC_SET_ASSOC_PREFER
 205

	)

963 
	#WLC_GET_ASSOC_PREFER
 206

	)

964 
	#WLC_SET_ROAM_PREFER
 207

	)

965 
	#WLC_GET_ROAM_PREFER
 208

	)

966 
	#WLC_SET_LED
 209

	)

967 
	#WLC_GET_LED
 210

	)

968 
	#WLC_GET_INTERFERENCE_MODE
 211

	)

969 
	#WLC_SET_INTERFERENCE_MODE
 212

	)

970 
	#WLC_GET_CHANNEL_QA
 213

	)

971 
	#WLC_START_CHANNEL_QA
 214

	)

972 
	#WLC_GET_CHANNEL_SEL
 215

	)

973 
	#WLC_START_CHANNEL_SEL
 216

	)

974 
	#WLC_GET_VALID_CHANNELS
 217

	)

975 
	#WLC_GET_FAKEFRAG
 218

	)

976 
	#WLC_SET_FAKEFRAG
 219

	)

977 
	#WLC_GET_PWROUT_PERCENTAGE
 220

	)

978 
	#WLC_SET_PWROUT_PERCENTAGE
 221

	)

979 
	#WLC_SET_BAD_FRAME_PREEMPT
 222

	)

980 
	#WLC_GET_BAD_FRAME_PREEMPT
 223

	)

981 
	#WLC_SET_LEAP_LIST
 224

	)

982 
	#WLC_GET_LEAP_LIST
 225

	)

983 
	#WLC_GET_CWMIN
 226

	)

984 
	#WLC_SET_CWMIN
 227

	)

985 
	#WLC_GET_CWMAX
 228

	)

986 
	#WLC_SET_CWMAX
 229

	)

987 
	#WLC_GET_WET
 230

	)

988 
	#WLC_SET_WET
 231

	)

989 
	#WLC_GET_PUB
 232

	)

992 
	#WLC_GET_KEY_PRIMARY
 235

	)

993 
	#WLC_SET_KEY_PRIMARY
 236

	)

995 
	#WLC_GET_ACI_ARGS
 238

	)

996 
	#WLC_SET_ACI_ARGS
 239

	)

997 
	#WLC_UNSET_CALLBACK
 240

	)

998 
	#WLC_SET_CALLBACK
 241

	)

999 
	#WLC_GET_RADAR
 242

	)

1000 
	#WLC_SET_RADAR
 243

	)

1001 
	#WLC_SET_SPECT_MANAGMENT
 244

	)

1002 
	#WLC_GET_SPECT_MANAGMENT
 245

	)

1003 
	#WLC_WDS_GET_REMOTE_HWADDR
 246

	)

1004 
	#WLC_WDS_GET_WPA_SUP
 247

	)

1005 
	#WLC_SET_CS_SCAN_TIMER
 248

	)

1006 
	#WLC_GET_CS_SCAN_TIMER
 249

	)

1007 
	#WLC_MEASURE_REQUEST
 250

	)

1008 
	#WLC_INIT
 251

	)

1009 
	#WLC_SEND_QUIET
 252

	)

1010 
	#WLC_KEEPALIVE
 253

	)

1011 
	#WLC_SEND_PWR_CONSTRAINT
 254

	)

1012 
	#WLC_UPGRADE_STATUS
 255

	)

1013 
	#WLC_CURRENT_PWR
 256

	)

1014 
	#WLC_GET_SCAN_PASSIVE_TIME
 257

	)

1015 
	#WLC_SET_SCAN_PASSIVE_TIME
 258

	)

1016 
	#WLC_LEGACY_LINK_BEHAVIOR
 259

	)

1017 
	#WLC_GET_CHANNELS_IN_COUNTRY
 260

	)

1018 
	#WLC_GET_COUNTRY_LIST
 261

	)

1019 
	#WLC_GET_VAR
 262

	)

1020 
	#WLC_SET_VAR
 263

	)

1021 
	#WLC_NVRAM_GET
 264

	)

1022 
	#WLC_NVRAM_SET
 265

	)

1023 
	#WLC_NVRAM_DUMP
 266

	)

1024 
	#WLC_REBOOT
 267

	)

1025 
	#WLC_SET_WSEC_PMK
 268

	)

1026 
	#WLC_GET_AUTH_MODE
 269

	)

1027 
	#WLC_SET_AUTH_MODE
 270

	)

1028 
	#WLC_GET_WAKEENTRY
 271

	)

1029 
	#WLC_SET_WAKEENTRY
 272

	)

1030 
	#WLC_NDCONFIG_ITEM
 273

	)

1031 
	#WLC_NVOTPW
 274

	)

1032 
	#WLC_OTPW
 275

	)

1033 
	#WLC_IOV_BLOCK_GET
 276

	)

1034 
	#WLC_IOV_MODULES_GET
 277

	)

1035 
	#WLC_SOFT_RESET
 278

	)

1036 
	#WLC_GET_ALLOW_MODE
 279

	)

1037 
	#WLC_SET_ALLOW_MODE
 280

	)

1038 
	#WLC_GET_DESIRED_BSSID
 281

	)

1039 
	#WLC_SET_DESIRED_BSSID
 282

	)

1040 
	#WLC_DISASSOC_MYAP
 283

	)

1041 
	#WLC_GET_NBANDS
 284

	)

1042 
	#WLC_GET_BANDSTATES
 285

	)

1043 
	#WLC_GET_WLC_BSS_INFO
 286

	)

1044 
	#WLC_GET_ASSOC_INFO
 287

	)

1045 
	#WLC_GET_OID_PHY
 288

	)

1046 
	#WLC_SET_OID_PHY
 289

	)

1047 
	#WLC_SET_ASSOC_TIME
 290

	)

1048 
	#WLC_GET_DESIRED_SSID
 291

	)

1049 
	#WLC_GET_CHANSPEC
 292

	)

1050 
	#WLC_GET_ASSOC_STATE
 293

	)

1051 
	#WLC_SET_PHY_STATE
 294

	)

1052 
	#WLC_GET_SCAN_PENDING
 295

	)

1053 
	#WLC_GET_SCANREQ_PENDING
 296

	)

1054 
	#WLC_GET_PREV_ROAM_REASON
 297

	)

1055 
	#WLC_SET_PREV_ROAM_REASON
 298

	)

1056 
	#WLC_GET_BANDSTATES_PI
 299

	)

1057 
	#WLC_GET_PHY_STATE
 300

	)

1058 
	#WLC_GET_BSS_WPA_RSN
 301

	)

1059 
	#WLC_GET_BSS_WPA2_RSN
 302

	)

1060 
	#WLC_GET_BSS_BCN_TS
 303

	)

1061 
	#WLC_GET_INT_DISASSOC
 304

	)

1062 
	#WLC_SET_NUM_PEERS
 305

	)

1063 
	#WLC_GET_NUM_BSS
 306

	)

1064 
	#WLC_NPHY_SAMPLE_COLLECT
 307

	)

1065 
	#WLC_UM_PRIV
 308

	)

1066 
	#WLC_GET_CMD
 309

	)

1068 
	#WLC_SET_INTERFERENCE_OVERRIDE_MODE
 311

	)

1069 
	#WLC_GET_INTERFERENCE_OVERRIDE_MODE
 312

	)

1070 
	#WLC_GET_WAI_RESTRICT
 313

	)

1071 
	#WLC_SET_WAI_RESTRICT
 314

	)

1072 
	#WLC_SET_WAI_REKEY
 315

	)

1073 
	#WLC_SET_PEAKRATE
 316

	)

1074 
	#WLC_GET_PEAKRATE
 317

	)

1075 
	#WLC_LAST
 318

	)

1077 #i‚de‡
EPICTRL_COOKIE


1078 
	#EPICTRL_COOKIE
 0xABADCEDE

	)

1082 
	#CMN_IOCTL_OFF
 0x180

	)

1087 
	#WL_OID_BASE
 0xFFE41420

	)

1090 
	#OID_WL_GETINSTANCE
 (
WL_OID_BASE
 + 
WLC_GET_INSTANCE
)

	)

1091 
	#OID_WL_GET_FORCELINK
 (
WL_OID_BASE
 + 
WLC_GET_FORCELINK
)

	)

1092 
	#OID_WL_SET_FORCELINK
 (
WL_OID_BASE
 + 
WLC_SET_FORCELINK
)

	)

1093 
	#OID_WL_ENCRYPT_STRENGTH
 (
WL_OID_BASE
 + 
WLC_ENCRYPT_STRENGTH
)

	)

1094 
	#OID_WL_DECRYPT_STATUS
 (
WL_OID_BASE
 + 
WLC_DECRYPT_STATUS
)

	)

1095 
	#OID_LEGACY_LINK_BEHAVIOR
 (
WL_OID_BASE
 + 
WLC_LEGACY_LINK_BEHAVIOR
)

	)

1096 
	#OID_WL_NDCONFIG_ITEM
 (
WL_OID_BASE
 + 
WLC_NDCONFIG_ITEM
)

	)

1099 
	#OID_STA_CHANSPEC
 (
WL_OID_BASE
 + 
WLC_GET_CHANSPEC
)

	)

1100 
	#OID_STA_NBANDS
 (
WL_OID_BASE
 + 
WLC_GET_NBANDS
)

	)

1101 
	#OID_STA_GET_PHY
 (
WL_OID_BASE
 + 
WLC_GET_OID_PHY
)

	)

1102 
	#OID_STA_SET_PHY
 (
WL_OID_BASE
 + 
WLC_SET_OID_PHY
)

	)

1103 
	#OID_STA_ASSOC_TIME
 (
WL_OID_BASE
 + 
WLC_SET_ASSOC_TIME
)

	)

1104 
	#OID_STA_DESIRED_SSID
 (
WL_OID_BASE
 + 
WLC_GET_DESIRED_SSID
)

	)

1105 
	#OID_STA_SET_PHY_STATE
 (
WL_OID_BASE
 + 
WLC_SET_PHY_STATE
)

	)

1106 
	#OID_STA_SCAN_PENDING
 (
WL_OID_BASE
 + 
WLC_GET_SCAN_PENDING
)

	)

1107 
	#OID_STA_SCANREQ_PENDING
 (
WL_OID_BASE
 + 
WLC_GET_SCANREQ_PENDING
)

	)

1108 
	#OID_STA_GET_ROAM_REASON
 (
WL_OID_BASE
 + 
WLC_GET_PREV_ROAM_REASON
)

	)

1109 
	#OID_STA_SET_ROAM_REASON
 (
WL_OID_BASE
 + 
WLC_SET_PREV_ROAM_REASON
)

	)

1110 
	#OID_STA_GET_PHY_STATE
 (
WL_OID_BASE
 + 
WLC_GET_PHY_STATE
)

	)

1111 
	#OID_STA_INT_DISASSOC
 (
WL_OID_BASE
 + 
WLC_GET_INT_DISASSOC
)

	)

1112 
	#OID_STA_SET_NUM_PEERS
 (
WL_OID_BASE
 + 
WLC_SET_NUM_PEERS
)

	)

1113 
	#OID_STA_GET_NUM_BSS
 (
WL_OID_BASE
 + 
WLC_GET_NUM_BSS
)

	)

1115 
	#WL_DECRYPT_STATUS_SUCCESS
 1

	)

1116 
	#WL_DECRYPT_STATUS_FAILURE
 2

	)

1117 
	#WL_DECRYPT_STATUS_UNKNOWN
 3

	)

1120 
	#WLC_UPGRADE_SUCCESS
 0

	)

1121 
	#WLC_UPGRADE_PENDING
 1

	)

1123 #ifde‡
CONFIG_USBRNDIS_RETAIL


1126 *
	m«me
;

1127 *
	m∑øm
;

1128 } 
	tndc⁄fig_ôem_t
;

1133 
	#WL_AUTH_OPEN_SYSTEM
 0

	)

1134 
	#WL_AUTH_SHARED_KEY
 1

	)

1135 
	#WL_AUTH_OPEN_SHARED
 2

	)

1138 
	#WL_RADIO_SW_DISABLE
 (1<<0)

	)

1139 
	#WL_RADIO_HW_DISABLE
 (1<<1)

	)

1140 
	#WL_RADIO_MPC_DISABLE
 (1<<2)

	)

1141 
	#WL_RADIO_COUNTRY_DISABLE
 (1<<3)

	)

1143 
	#WL_SPURAVOID_OFF
 0

	)

1144 
	#WL_SPURAVOID_ON1
 1

	)

1145 
	#WL_SPURAVOID_ON2
 2

	)

1148 
	#WL_TXPWR_OVERRIDE
 (1U<<31)

	)

1149 
	#WL_TXPWR_NEG
 (1U<<30)

	)

1151 
	#WL_PHY_PAVARS_LEN
 6

	)

1153 
	#WL_PHY_PAVARS2_NUM
 3

	)

1154 
	#WL_PHY_PAVAR_VER
 1

	)

1155 
	swl_∑v¨s2
 {

1156 
uöt16
 
	mvî
;

1157 
uöt16
 
	mÀn
;

1158 
uöt16
 
	möu£
;

1159 
uöt16
 
	mphy_ty≥
;

1160 
uöt16
 
	mb™dønge
;

1161 
uöt16
 
	mchaö
;

1162 
uöt16
 
	mö∑
[
WL_PHY_PAVARS2_NUM
];

1163 } 
	twl_∑v¨s2_t
;

1165 
	swl_po
 {

1166 
uöt16
 
	mphy_ty≥
;

1167 
uöt16
 
	mb™d
;

1168 
uöt16
 
	mcckpo
;

1169 
uöt32
 
	mofdmpo
;

1170 
uöt16
 
	mmc•o
[8];

1171 } 
	twl_po_t
;

1174 
	#WLC_TXPWR_MAX
 (127)

	)

1177 
	#WL_DIAG_INTERRUPT
 1

	)

1178 
	#WL_DIAG_LOOPBACK
 2

	)

1179 
	#WL_DIAG_MEMORY
 3

	)

1180 
	#WL_DIAG_LED
 4

	)

1181 
	#WL_DIAG_REG
 5

	)

1182 
	#WL_DIAG_SROM
 6

	)

1183 
	#WL_DIAG_DMA
 7

	)

1185 
	#WL_DIAGERR_SUCCESS
 0

	)

1186 
	#WL_DIAGERR_FAIL_TO_RUN
 1

	)

1187 
	#WL_DIAGERR_NOT_SUPPORTED
 2

	)

1188 
	#WL_DIAGERR_INTERRUPT_FAIL
 3

	)

1189 
	#WL_DIAGERR_LOOPBACK_FAIL
 4

	)

1190 
	#WL_DIAGERR_SROM_FAIL
 5

	)

1191 
	#WL_DIAGERR_SROM_BADCRC
 6

	)

1192 
	#WL_DIAGERR_REG_FAIL
 7

	)

1193 
	#WL_DIAGERR_MEMORY_FAIL
 8

	)

1194 
	#WL_DIAGERR_NOMEM
 9

	)

1195 
	#WL_DIAGERR_DMA_FAIL
 10

	)

1197 
	#WL_DIAGERR_MEMORY_TIMEOUT
 11

	)

1198 
	#WL_DIAGERR_MEMORY_BADPATTERN
 12

	)

1201 
	#WLC_BAND_AUTO
 0

	)

1202 
	#WLC_BAND_5G
 1

	)

1203 
	#WLC_BAND_2G
 2

	)

1204 
	#WLC_BAND_ALL
 3

	)

1207 
	#WL_CHAN_FREQ_RANGE_2G
 0

	)

1208 
	#WL_CHAN_FREQ_RANGE_5GL
 1

	)

1209 
	#WL_CHAN_FREQ_RANGE_5GM
 2

	)

1210 
	#WL_CHAN_FREQ_RANGE_5GH
 3

	)

1212 
	#WL_CHAN_FREQ_RANGE_5GLL_VER2
 4

	)

1213 
	#WL_CHAN_FREQ_RANGE_5GLH_VER2
 5

	)

1214 
	#WL_CHAN_FREQ_RANGE_5GML_VER2
 6

	)

1215 
	#WL_CHAN_FREQ_RANGE_5GMH_VER2
 7

	)

1216 
	#WL_CHAN_FREQ_RANGE_5GH_VER2
 8

	)

1219 
	#WLC_PHY_TYPE_A
 0

	)

1220 
	#WLC_PHY_TYPE_B
 1

	)

1221 
	#WLC_PHY_TYPE_G
 2

	)

1222 
	#WLC_PHY_TYPE_N
 4

	)

1223 
	#WLC_PHY_TYPE_LP
 5

	)

1224 
	#WLC_PHY_TYPE_SSN
 6

	)

1225 
	#WLC_PHY_TYPE_HT
 7

	)

1226 
	#WLC_PHY_TYPE_LCN
 8

	)

1227 
	#WLC_PHY_TYPE_NULL
 0xf

	)

1230 
	#WLC_MACMODE_DISABLED
 0

	)

1231 
	#WLC_MACMODE_DENY
 1

	)

1232 
	#WLC_MACMODE_ALLOW
 2

	)

1235 
	#GMODE_LEGACY_B
 0

	)

1236 
	#GMODE_AUTO
 1

	)

1237 
	#GMODE_ONLY
 2

	)

1238 
	#GMODE_B_DEFERRED
 3

	)

1239 
	#GMODE_PERFORMANCE
 4

	)

1240 
	#GMODE_LRS
 5

	)

1241 
	#GMODE_MAX
 6

	)

1244 
	#WLC_PLCP_AUTO
 -1

	)

1245 
	#WLC_PLCP_SHORT
 0

	)

1246 
	#WLC_PLCP_LONG
 1

	)

1249 
	#WLC_PROTECTION_AUTO
 -1

	)

1250 
	#WLC_PROTECTION_OFF
 0

	)

1251 
	#WLC_PROTECTION_ON
 1

	)

1252 
	#WLC_PROTECTION_MMHDR_ONLY
 2

	)

1253 
	#WLC_PROTECTION_CTS_ONLY
 3

	)

1256 
	#WLC_PROTECTION_CTL_OFF
 0

	)

1257 
	#WLC_PROTECTION_CTL_LOCAL
 1

	)

1258 
	#WLC_PROTECTION_CTL_OVERLAP
 2

	)

1261 
	#WLC_N_PROTECTION_OFF
 0

	)

1262 
	#WLC_N_PROTECTION_OPTIONAL
 1

	)

1263 
	#WLC_N_PROTECTION_20IN40
 2

	)

1264 
	#WLC_N_PROTECTION_MIXEDMODE
 3

	)

1267 
	#WLC_N_PREAMBLE_MIXEDMODE
 0

	)

1268 
	#WLC_N_PREAMBLE_GF
 1

	)

1269 
	#WLC_N_PREAMBLE_GF_BRCM
 2

	)

1272 
	#WLC_N_BW_20ALL
 0

	)

1273 
	#WLC_N_BW_40ALL
 1

	)

1274 
	#WLC_N_BW_20IN2G_40IN5G
 2

	)

1277 
	#WLC_N_TXRX_CHAIN0
 0

	)

1278 
	#WLC_N_TXRX_CHAIN1
 1

	)

1281 
	#WLC_N_SGI_20
 0x01

	)

1282 
	#WLC_N_SGI_40
 0x02

	)

1285 
	#PM_OFF
 0

	)

1286 
	#PM_MAX
 1

	)

1287 
	#PM_FAST
 2

	)

1289 
	#LISTEN_INTERVAL
 20

	)

1291 
	#INTERFERE_OVRRIDE_OFF
 -1

	)

1292 
	#INTERFERE_NONE
 0

	)

1293 
	#NON_WLAN
 1

	)

1294 
	#WLAN_MANUAL
 2

	)

1295 
	#WLAN_AUTO
 3

	)

1296 
	#WLAN_AUTO_W_NOISE
 4

	)

1297 
	#AUTO_ACTIVE
 (1 << 7)

	)

1299 
	swl_aci_¨gs
 {

1300 
	míãr_aci_thªsh
;

1301 
	mexô_aci_thªsh
;

1302 
	mu£c_•ö
;

1303 
	mglôch_dñay
;

1304 
uöt16
 
	m≈hy_ad˝wr_íãr_thªsh
;

1305 
uöt16
 
	m≈hy_ad˝wr_exô_thªsh
;

1306 
uöt16
 
	m≈hy_ª≥©_˘r
;

1307 
uöt16
 
	m≈hy_num_ßm∂es
;

1308 
uöt16
 
	m≈hy_undëe˘_wödow_sz
;

1309 
uöt16
 
	m≈hy_b_íîgy_lo_aci
;

1310 
uöt16
 
	m≈hy_b_íîgy_md_aci
;

1311 
uöt16
 
	m≈hy_b_íîgy_hi_aci
;

1312 
uöt16
 
	m≈hy_noi£_nﬂssoc_glôch_th_up
;

1313 
uöt16
 
	m≈hy_noi£_nﬂssoc_glôch_th_dn
;

1314 
uöt16
 
	m≈hy_noi£_assoc_glôch_th_up
;

1315 
uöt16
 
	m≈hy_noi£_assoc_glôch_th_dn
;

1316 
uöt16
 
	m≈hy_noi£_assoc_aci_glôch_th_up
;

1317 
uöt16
 
	m≈hy_noi£_assoc_aci_glôch_th_dn
;

1318 
uöt16
 
	m≈hy_noi£_assoc_íãr_th
;

1319 
uöt16
 
	m≈hy_noi£_nﬂssoc_íãr_th
;

1320 
uöt16
 
	m≈hy_noi£_assoc_rx_glôch_bad∂˝_íãr_th
;

1321 
uöt16
 
	m≈hy_noi£_nﬂssoc_¸sidx_ö¸
;

1322 
uöt16
 
	m≈hy_noi£_assoc_¸sidx_ö¸
;

1323 
uöt16
 
	m≈hy_noi£_¸sidx_de¸
;

1324 } 
	twl_aci_¨gs_t
;

1326 
	#TRIGGER_NOW
 0

	)

1327 
	#TRIGGER_CRS
 0x01

	)

1328 
	#TRIGGER_CRSDEASSERT
 0x02

	)

1329 
	#TRIGGER_GOODFCS
 0x04

	)

1330 
	#TRIGGER_BADFCS
 0x08

	)

1331 
	#TRIGGER_BADPLCP
 0x10

	)

1332 
	#TRIGGER_CRSGLITCH
 0x20

	)

1333 
	#WL_ACI_ARGS_LEGACY_LENGTH
 16

	)

1334 
	#WL_SAMPLECOLLECT_T_VERSION
 1

	)

1335 
	swl_ßm∂ecﬁÀ˘_¨gs
 {

1337 
uöt8
 
	mcﬁl_us
;

1338 
	mc‹es
;

1340 
uöt16
 
	mvîsi⁄
;

1341 
uöt16
 
	mÀngth
;

1342 
uöt8
 
	måiggî
;

1343 
uöt16
 
	mtimeout
;

1344 
uöt16
 
	mmode
;

1345 
uöt32
 
	m¥e_dur
;

1346 
uöt32
 
	mpo°_dur
;

1347 
uöt8
 
	mgpio_£l
;

1348 
boﬁ
 
	mdownßmp
;

1349 
boﬁ
 
	mbe_dóf
;

1350 
boﬁ
 
	magc
;

1351 
boﬁ
 
	mfûãr
;

1352 } 
	twl_ßm∂ecﬁÀ˘_¨gs_t
;

1354 
	#WL_SAMPLEDATA_HEADER_TYPE
 1

	)

1355 
	#WL_SAMPLEDATA_HEADER_SIZE
 80

	)

1356 
	#WL_SAMPLEDATA_TYPE
 2

	)

1357 
	#WL_SAMPLEDATA_SEQ
 0xff

	)

1358 
	#WL_SAMPLEDATA_MORE_DATA
 0x100

	)

1359 
	#WL_SAMPLEDATA_T_VERSION
 1

	)

1361 
	#WL_SAMPLEDATA_T_VERSION_SPEC_AN
 2

	)

1363 
	swl_ßm∂ed©a
 {

1364 
uöt16
 
	mvîsi⁄
;

1365 
uöt16
 
	msize
;

1366 
uöt16
 
	mèg
;

1367 
uöt16
 
	mÀngth
;

1368 
uöt32
 
	mÊag
;

1369 } 
	twl_ßm∂ed©a_t
;

1373 
	#WL_ERROR_VAL
 0x00000001

	)

1374 
	#WL_TRACE_VAL
 0x00000002

	)

1375 
	#WL_PRHDRS_VAL
 0x00000004

	)

1376 
	#WL_PRPKT_VAL
 0x00000008

	)

1377 
	#WL_INFORM_VAL
 0x00000010

	)

1378 
	#WL_TMP_VAL
 0x00000020

	)

1379 
	#WL_OID_VAL
 0x00000040

	)

1380 
	#WL_RATE_VAL
 0x00000080

	)

1381 
	#WL_ASSOC_VAL
 0x00000100

	)

1382 
	#WL_PRUSR_VAL
 0x00000200

	)

1383 
	#WL_PS_VAL
 0x00000400

	)

1384 
	#WL_TXPWR_VAL
 0x00000800

	)

1385 
	#WL_PORT_VAL
 0x00001000

	)

1386 
	#WL_DUAL_VAL
 0x00002000

	)

1387 
	#WL_WSEC_VAL
 0x00004000

	)

1388 
	#WL_WSEC_DUMP_VAL
 0x00008000

	)

1389 
	#WL_LOG_VAL
 0x00010000

	)

1390 
	#WL_NRSSI_VAL
 0x00020000

	)

1391 
	#WL_LOFT_VAL
 0x00040000

	)

1392 
	#WL_REGULATORY_VAL
 0x00080000

	)

1393 
	#WL_PHYCAL_VAL
 0x00100000

	)

1394 
	#WL_RADAR_VAL
 0x00200000

	)

1395 
	#WL_MPC_VAL
 0x00400000

	)

1396 
	#WL_APSTA_VAL
 0x00800000

	)

1397 
	#WL_DFS_VAL
 0x01000000

	)

1398 
	#WL_BA_VAL
 0x02000000

	)

1399 
	#WL_ACI_VAL
 0x04000000

	)

1400 
	#WL_MBSS_VAL
 0x04000000

	)

1401 
	#WL_CAC_VAL
 0x08000000

	)

1402 
	#WL_AMSDU_VAL
 0x10000000

	)

1403 
	#WL_AMPDU_VAL
 0x20000000

	)

1404 
	#WL_FFPLD_VAL
 0x40000000

	)

1407 
	#WL_DPT_VAL
 0x00000001

	)

1408 
	#WL_SCAN_VAL
 0x00000002

	)

1409 
	#WL_WOWL_VAL
 0x00000004

	)

1410 
	#WL_COEX_VAL
 0x00000008

	)

1411 
	#WL_RTDC_VAL
 0x00000010

	)

1412 
	#WL_PROTO_VAL
 0x00000020

	)

1413 
	#WL_BTA_VAL
 0x00000040

	)

1414 
	#WL_CHANINT_VAL
 0x00000080

	)

1415 
	#WL_THERMAL_VAL
 0x00000100

	)

1416 
	#WL_P2P_VAL
 0x00000200

	)

1417 
	#WL_TXRX_VAL
 0x00000400

	)

1418 
	#WL_MCHAN_VAL
 0x00000800

	)

1421 
	#WL_LED_NUMGPIO
 16

	)

1424 
	#WL_LED_OFF
 0

	)

1425 
	#WL_LED_ON
 1

	)

1426 
	#WL_LED_ACTIVITY
 2

	)

1427 
	#WL_LED_RADIO
 3

	)

1428 
	#WL_LED_ARADIO
 4

	)

1429 
	#WL_LED_BRADIO
 5

	)

1430 
	#WL_LED_BGMODE
 6

	)

1431 
	#WL_LED_WI1
 7

	)

1432 
	#WL_LED_WI2
 8

	)

1433 
	#WL_LED_WI3
 9

	)

1434 
	#WL_LED_ASSOC
 10

	)

1435 
	#WL_LED_INACTIVE
 11

	)

1436 
	#WL_LED_ASSOCACT
 12

	)

1437 
	#WL_LED_WI4
 13

	)

1438 
	#WL_LED_WI5
 14

	)

1439 
	#WL_LED_BLINKSLOW
 15

	)

1440 
	#WL_LED_BLINKMED
 16

	)

1441 
	#WL_LED_BLINKFAST
 17

	)

1442 
	#WL_LED_BLINKCUSTOM
 18

	)

1443 
	#WL_LED_BLINKPERIODIC
 19

	)

1444 
	#WL_LED_ASSOC_WITH_SEC
 20

	)

1446 
	#WL_LED_START_OFF
 21

	)

1447 
	#WL_LED_NUMBEHAVIOR
 22

	)

1450 
	#WL_LED_BEH_MASK
 0x7f

	)

1451 
	#WL_LED_AL_MASK
 0x80

	)

1454 
	#WL_NUMCHANNELS
 64

	)

1455 
	#WL_NUMCHANSPECS
 100

	)

1458 
	#WL_WDS_WPA_ROLE_AUTH
 0

	)

1459 
	#WL_WDS_WPA_ROLE_SUP
 1

	)

1460 
	#WL_WDS_WPA_ROLE_AUTO
 255

	)

1463 
	#WL_EVENTING_MASK_LEN
 16

	)

1468 
	#WL_JOIN_PREF_RSSI
 1

	)

1469 
	#WL_JOIN_PREF_WPA
 2

	)

1470 
	#WL_JOIN_PREF_BAND
 3

	)

1471 
	#WL_JOIN_PREF_RSSI_DELTA
 4

	)

1474 
	#WLJP_BAND_ASSOC_PREF
 255

	)

1477 
	#WL_WPA_ACP_MCS_ANY
 "\x00\x00\x00\x00"

	)

1479 
	stsöfo_¨g
 {

1480 
uöt8
 
	mo˘ës
[3];

1483 
	#NFIFO
 6

	)

1485 
	#WL_CNT_T_VERSION
 6

	)

1488 
uöt16
 
	mvîsi⁄
;

1489 
uöt16
 
	mÀngth
;

1492 
uöt32
 
	mtx‰ame
;

1493 
uöt32
 
	mtxbyã
;

1494 
uöt32
 
	mtxªå™s
;

1495 
uöt32
 
	mtxîr‹
;

1496 
uöt32
 
	mtx˘l
;

1497 
uöt32
 
	mtx¥sh‹t
;

1498 
uöt32
 
	mtx£º
;

1499 
uöt32
 
	mtxnobuf
;

1500 
uöt32
 
	mtxnﬂssoc
;

1501 
uöt32
 
	mtxru¡
;

1502 
uöt32
 
	mtxchô
;

1503 
uöt32
 
	mtxcmiss
;

1506 
uöt32
 
	mtxuÊo
;

1507 
uöt32
 
	mtxphyîr
;

1508 
uöt32
 
	mtxphy¸s
;

1511 
uöt32
 
	mrx‰ame
;

1512 
uöt32
 
	mrxbyã
;

1513 
uöt32
 
	mrxîr‹
;

1514 
uöt32
 
	mrx˘l
;

1515 
uöt32
 
	mrxnobuf
;

1516 
uöt32
 
	mrxn⁄d©a
;

1517 
uöt32
 
	mrxbadds
;

1518 
uöt32
 
	mrxbadcm
;

1519 
uöt32
 
	mrx‰agîr
;

1520 
uöt32
 
	mrxru¡
;

1521 
uöt32
 
	mrxgü¡
;

1522 
uöt32
 
	mrxnoscb
;

1523 
uöt32
 
	mrxbad¥Ÿo
;

1524 
uöt32
 
	mrxbad§cmac
;

1525 
uöt32
 
	mrxbadda
;

1526 
uöt32
 
	mrxfûãr
;

1529 
uöt32
 
	mrxoÊo
;

1530 
uöt32
 
	mrxuÊo
[
NFIFO
];

1532 
uöt32
 
	md11˙t_txπs_off
;

1533 
uöt32
 
	md11˙t_rx¸c_off
;

1534 
uöt32
 
	md11˙t_txno˘s_off
;

1537 
uöt32
 
	mdmade
;

1538 
uöt32
 
	mdmada
;

1539 
uöt32
 
	mdm≠e
;

1540 
uöt32
 
	mª£t
;

1541 
uöt32
 
	mtbâ
;

1542 
uöt32
 
	mtxdmaw¨
;

1543 
uöt32
 
	mpkt_ˇŒback_ªg_Áû
;

1546 
uöt32
 
	mtxÆl‰m
;

1547 
uöt32
 
	mtxπs‰m
;

1548 
uöt32
 
	mtx˘s‰m
;

1549 
uöt32
 
	mtxack‰m
;

1550 
uöt32
 
	mtxd∆‰m
;

1551 
uöt32
 
	mtxb˙‰m
;

1552 
uöt32
 
	mtxfunÊ
[8];

1553 
uöt32
 
	mtxçlunÊ
;

1554 
uöt32
 
	mtxphyîr‹
;

1555 
uöt32
 
	mrx‰mtoﬁ⁄g
;

1556 
uöt32
 
	mrx‰mtooshπ
;

1557 
uöt32
 
	mrxövmachdr
;

1558 
uöt32
 
	mrxbadfcs
;

1559 
uöt32
 
	mrxbad∂˝
;

1560 
uöt32
 
	mrx¸sglôch
;

1561 
uöt32
 
	mrx°π
;

1562 
uöt32
 
	mrxd‰muˇ°mbss
;

1563 
uöt32
 
	mrxm‰muˇ°mbss
;

1564 
uöt32
 
	mrxc‰muˇ°
;

1565 
uöt32
 
	mrxπsuˇ°
;

1566 
uöt32
 
	mrx˘suˇ°
;

1567 
uöt32
 
	mrxackuˇ°
;

1568 
uöt32
 
	mrxd‰moˇ°
;

1569 
uöt32
 
	mrxm‰moˇ°
;

1570 
uöt32
 
	mrxc‰moˇ°
;

1571 
uöt32
 
	mrxπsoˇ°
;

1572 
uöt32
 
	mrx˘soˇ°
;

1573 
uöt32
 
	mrxd‰mmˇ°
;

1574 
uöt32
 
	mrxm‰mmˇ°
;

1575 
uöt32
 
	mrxc‰mmˇ°
;

1576 
uöt32
 
	mrxbóc⁄mbss
;

1577 
uöt32
 
	mrxd‰muˇ°obss
;

1578 
uöt32
 
	mrxbóc⁄obss
;

1579 
uöt32
 
	mrxr•tmout
;

1580 
uöt32
 
	mb˙txˇn˛
;

1581 
uöt32
 
	mrxf0ovÊ
;

1582 
uöt32
 
	mrxf1ovÊ
;

1583 
uöt32
 
	mrxf2ovÊ
;

1584 
uöt32
 
	mtxsfovÊ
;

1585 
uöt32
 
	mpmqovÊ
;

1586 
uöt32
 
	mrxcg¥q‰m
;

1587 
uöt32
 
	mrxcg¥sqovÊ
;

1588 
uöt32
 
	mtxcg¥sÁû
;

1589 
uöt32
 
	mtxcg¥ssuc
;

1590 
uöt32
 
	m¥s_timeout
;

1591 
uöt32
 
	mrx«ck
;

1592 
uöt32
 
	m‰msc⁄s
;

1593 
uöt32
 
	mtx«ck
;

1594 
uöt32
 
	mtxglôch_«ck
;

1595 
uöt32
 
	mtxbur°
;

1598 
uöt32
 
	mtx‰ag
;

1599 
uöt32
 
	mtxmu…i
;

1600 
uöt32
 
	mtxÁû
;

1601 
uöt32
 
	mtxªåy
;

1602 
uöt32
 
	mtxªåõ
;

1603 
uöt32
 
	mrxdup
;

1604 
uöt32
 
	mtxπs
;

1605 
uöt32
 
	mtxno˘s
;

1606 
uöt32
 
	mtxnﬂck
;

1607 
uöt32
 
	mrx‰ag
;

1608 
uöt32
 
	mrxmu…i
;

1609 
uöt32
 
	mrx¸c
;

1610 
uöt32
 
	mtx‰m¢t
;

1611 
uöt32
 
	mrxundec
;

1614 
uöt32
 
	mtkùmicÁûl
;

1615 
uöt32
 
	mtkù˙åm§
;

1616 
uöt32
 
	mtkùª∂ay
;

1617 
uöt32
 
	mccmpfmãº
;

1618 
uöt32
 
	mccm¥ïœy
;

1619 
uöt32
 
	mccmpundec
;

1620 
uöt32
 
	mfourwayÁû
;

1621 
uöt32
 
	mwïundec
;

1622 
uöt32
 
	mwïicvîr
;

1623 
uöt32
 
	mdecsuc˚ss
;

1624 
uöt32
 
	mtkùicvîr
;

1625 
uöt32
 
	mwïex˛uded
;

1627 
uöt32
 
	mrxundec_mc°
;

1630 
uöt32
 
	mtkùmicÁûl_mc°
;

1631 
uöt32
 
	mtkù˙åm§_mc°
;

1632 
uöt32
 
	mtkùª∂ay_mc°
;

1633 
uöt32
 
	mccmpfmãº_mc°
;

1634 
uöt32
 
	mccm¥ïœy_mc°
;

1635 
uöt32
 
	mccmpundec_mc°
;

1636 
uöt32
 
	mfourwayÁû_mc°
;

1637 
uöt32
 
	mwïundec_mc°
;

1638 
uöt32
 
	mwïicvîr_mc°
;

1639 
uöt32
 
	mdecsuc˚ss_mc°
;

1640 
uöt32
 
	mtkùicvîr_mc°
;

1641 
uöt32
 
	mwïex˛uded_mc°
;

1643 
uöt32
 
	mtxch™ªj
;

1644 
uöt32
 
	mtxex±ime
;

1645 
uöt32
 
	mpsmwds
;

1646 
uöt32
 
	mphyw©chdog
;

1649 
uöt32
 
	m¥q_íåõs_h™dÀd
;

1650 
uöt32
 
	m¥q_undúe˘ed_íåõs
;

1651 
uöt32
 
	m¥q_bad_íåõs
;

1652 
uöt32
 
	m©im_suµªss_cou¡
;

1653 
uöt32
 
	mb˙_ãm∂©e_nŸ_ªady
;

1654 
uöt32
 
	mb˙_ãm∂©e_nŸ_ªady_d⁄e
;

1655 
uöt32
 
	mœã_tbâ_dpc
;

1658 
uöt32
 
	mrx1mbps
;

1659 
uöt32
 
	mrx2mbps
;

1660 
uöt32
 
	mrx5mbps5
;

1661 
uöt32
 
	mrx6mbps
;

1662 
uöt32
 
	mrx9mbps
;

1663 
uöt32
 
	mrx11mbps
;

1664 
uöt32
 
	mrx12mbps
;

1665 
uöt32
 
	mrx18mbps
;

1666 
uöt32
 
	mrx24mbps
;

1667 
uöt32
 
	mrx36mbps
;

1668 
uöt32
 
	mrx48mbps
;

1669 
uöt32
 
	mrx54mbps
;

1670 
uöt32
 
	mrx108mbps
;

1671 
uöt32
 
	mrx162mbps
;

1672 
uöt32
 
	mrx216mbps
;

1673 
uöt32
 
	mrx270mbps
;

1674 
uöt32
 
	mrx324mbps
;

1675 
uöt32
 
	mrx378mbps
;

1676 
uöt32
 
	mrx432mbps
;

1677 
uöt32
 
	mrx486mbps
;

1678 
uöt32
 
	mrx540mbps
;

1681 
uöt32
 
	mpkãngrxduˇ°
;

1682 
uöt32
 
	mpkãngrxdmˇ°
;

1684 
uöt32
 
	mrfdißbÀ
;

1685 
uöt32
 
	mbphy_rx¸sglôch
;

1687 
uöt32
 
	mtxmpdu_sgi
;

1688 
uöt32
 
	mrxmpdu_sgi
;

1689 
uöt32
 
	mtxmpdu_°bc
;

1690 
uöt32
 
	mrxmpdu_°bc
;

1691 } 
	twl_˙t_t
;

1694 
	#WL_WME_CNT_VERSION
 1

	)

1697 
uöt32
 
	m∑ckës
;

1698 
uöt32
 
	mbyãs
;

1699 } 
	twl_åaffic_°©s_t
;

1702 
uöt16
 
	mvîsi⁄
;

1703 
uöt16
 
	mÀngth
;

1705 
wl_åaffic_°©s_t
 
	mtx
[
AC_COUNT
];

1706 
wl_åaffic_°©s_t
 
	mtx_Áûed
[
AC_COUNT
];

1707 
wl_åaffic_°©s_t
 
	mrx
[
AC_COUNT
];

1708 
wl_åaffic_°©s_t
 
	mrx_Áûed
[
AC_COUNT
];

1710 
wl_åaffic_°©s_t
 
	mf‹w¨d
[
AC_COUNT
];

1712 
wl_åaffic_°©s_t
 
	mtx_expúed
[
AC_COUNT
];

1714 } 
	twl_wme_˙t_t
;

1716 
	swl_msgÀvñ2
 {

1717 
uöt32
 
	mlow
;

1718 
uöt32
 
	mhigh
;

1723 
	#WLC_ROAM_TRIGGER_DEFAULT
 0

	)

1724 
	#WLC_ROAM_TRIGGER_BANDWIDTH
 1

	)

1725 
	#WLC_ROAM_TRIGGER_DISTANCE
 2

	)

1726 
	#WLC_ROAM_TRIGGER_AUTO
 3

	)

1727 
	#WLC_ROAM_TRIGGER_MAX_VALUE
 3

	)

1730 
	#WPA_AUTH_PFN_ANY
 0xffffffff

	)

1733 
	mPFN_LIST_ORDER
,

1734 
	mPFN_RSSI


1738 
	mDISABLE
,

1739 
	mENABLE


1743 
	mOFF_ADAPT
,

1744 
	mSMART_ADAPT
,

1745 
	mSTRICT_ADAPT


1748 
	#SORT_CRITERIA_BIT
 0

	)

1749 
	#AUTO_NET_SWITCH_BIT
 1

	)

1750 
	#ENABLE_BKGRD_SCAN_BIT
 2

	)

1751 
	#IMMEDIATE_SCAN_BIT
 3

	)

1752 
	#AUTO_CONNECT_BIT
 4

	)

1753 
	#ENABLE_BD_SCAN_BIT
 5

	)

1754 
	#ENABLE_ADAPTSCAN_BIT
 6

	)

1756 
	#SORT_CRITERIA_MASK
 0x01

	)

1757 
	#AUTO_NET_SWITCH_MASK
 0x02

	)

1758 
	#ENABLE_BKGRD_SCAN_MASK
 0x04

	)

1759 
	#IMMEDIATE_SCAN_MASK
 0x08

	)

1760 
	#AUTO_CONNECT_MASK
 0x10

	)

1761 
	#ENABLE_BD_SCAN_MASK
 0x20

	)

1762 
	#ENABLE_ADAPTSCAN_MASK
 0xc0

	)

1764 
	#PFN_VERSION
 2

	)

1765 
	#PFN_SCANRESULT_VERSION
 1

	)

1766 
	#MAX_PFN_LIST_COUNT
 16

	)

1768 
	#PFN_COMPLETE
 1

	)

1769 
	#PFN_INCOMPLETE
 0

	)

1771 
	#DEFAULT_BESTN
 2

	)

1772 
	#DEFAULT_MSCAN
 0

	)

1773 
	#DEFAULT_REPEAT
 10

	)

1774 
	#DEFAULT_EXP
 2

	)

1777 
	swl_p‚_sub√t_öfo
 {

1778 
ëhî_addr
 
	mBSSID
;

1779 
uöt8
 
	mch™√l
;

1780 
uöt8
 
	mSSID_Àn
;

1781 
uöt8
 
	mSSID
[32];

1782 } 
	twl_p‚_sub√t_öfo_t
;

1784 
	swl_p‚_√t_öfo
 {

1785 
wl_p‚_sub√t_öfo_t
 
	mp‚sub√t
;

1786 
öt16
 
	mRSSI
;

1787 
uöt16
 
	mtime°amp
;

1788 } 
	twl_p‚_√t_öfo_t
;

1790 
	swl_p‚_sˇƒesu…s
 {

1791 
uöt32
 
	mvîsi⁄
;

1792 
uöt32
 
	m°©us
;

1793 
uöt32
 
	mcou¡
;

1794 
wl_p‚_√t_öfo_t
 
	m√töfo
[1];

1795 } 
	twl_p‚_sˇƒesu…s_t
;

1798 
	swl_p‚_∑øm
 {

1799 
öt32
 
	mvîsi⁄
;

1800 
öt32
 
	msˇn_‰eq
;

1801 
öt32
 
	mlo°_√tw‹k_timeout
;

1802 
öt16
 
	mÊags
;

1803 
öt16
 
	mrssi_m¨gö
;

1804 
uöt8
 
	mbe°n
;

1805 
uöt8
 
	mmsˇn
;

1806 
uöt8
 
	mª≥©
;

1807 
uöt8
 
	mexp
;

1808 } 
	twl_p‚_∑øm_t
;

1810 
	swl_p‚_bssid
 {

1811 
ëhî_addr
 
	mmaˇddr
;

1813 
uöt16
 
	mÊags
;

1814 } 
	twl_p‚_bssid_t
;

1815 
	#WL_PFN_SUPPRESSFOUND_MASK
 0x08

	)

1816 
	#WL_PFN_SUPPRESSLOST_MASK
 0x10

	)

1818 
	swl_p‚_cfg
 {

1819 
uöt32
 
	mªp‹ây≥
;

1820 
öt32
 
	mch™√l_num
;

1821 
uöt16
 
	mch™√l_li°
[
WL_NUMCHANNELS
];

1822 } 
	twl_p‚_cfg_t
;

1823 
	#WL_PFN_REPORT_ALLNET
 0

	)

1824 
	#WL_PFN_REPORT_SSIDNET
 1

	)

1825 
	#WL_PFN_REPORT_BSSIDNET
 2

	)

1827 
	swl_p‚
 {

1828 
wlc_ssid_t
 
	mssid
;

1829 
öt32
 
	mÊags
;

1830 
öt32
 
	mö‰a
;

1831 
öt32
 
	mauth
;

1832 
öt32
 
	mw∑_auth
;

1833 
öt32
 
	mw£c
;

1834 } 
	twl_p‚_t
;

1835 
	#WL_PFN_HIDDEN_BIT
 2

	)

1836 
	#PNO_SCAN_MAX_FW
 508*1000

	)

1837 
	#PNO_SCAN_MAX_FW_SEC
 
PNO_SCAN_MAX_FW
/1000

	)

1838 
	#PNO_SCAN_MIN_FW_SEC
 10

	)

1839 
	#WL_PFN_HIDDEN_MASK
 0x4

	)

1842 
	#TOE_TX_CSUM_OL
 0x00000001

	)

1843 
	#TOE_RX_CSUM_OL
 0x00000002

	)

1846 
	#TOE_ERRTEST_TX_CSUM
 0x00000001

	)

1847 
	#TOE_ERRTEST_RX_CSUM
 0x00000002

	)

1848 
	#TOE_ERRTEST_RX_CSUM2
 0x00000004

	)

1850 
	st€_ﬁ_°©s_t
 {

1852 
uöt32
 
	mtx_summed
;

1855 
uöt32
 
	mtx_ùh_fûl
;

1856 
uöt32
 
	mtx_t˝_fûl
;

1857 
uöt32
 
	mtx_udp_fûl
;

1858 
uöt32
 
	mtx_icmp_fûl
;

1861 
uöt32
 
	mrx_ùh_good
;

1862 
uöt32
 
	mrx_ùh_bad
;

1863 
uöt32
 
	mrx_t˝_good
;

1864 
uöt32
 
	mrx_t˝_bad
;

1865 
uöt32
 
	mrx_udp_good
;

1866 
uöt32
 
	mrx_udp_bad
;

1867 
uöt32
 
	mrx_icmp_good
;

1868 
uöt32
 
	mrx_icmp_bad
;

1871 
uöt32
 
	mtx_t˝_îröj
;

1872 
uöt32
 
	mtx_udp_îröj
;

1873 
uöt32
 
	mtx_icmp_îröj
;

1876 
uöt32
 
	mrx_t˝_îröj
;

1877 
uöt32
 
	mrx_udp_îröj
;

1878 
uöt32
 
	mrx_icmp_îröj
;

1882 
	#ARP_OL_AGENT
 0x00000001

	)

1883 
	#ARP_OL_SNOOP
 0x00000002

	)

1884 
	#ARP_OL_HOST_AUTO_REPLY
 0x00000004

	)

1885 
	#ARP_OL_PEER_AUTO_REPLY
 0x00000008

	)

1888 
	#ARP_ERRTEST_REPLY_PEER
 0x1

	)

1889 
	#ARP_ERRTEST_REPLY_HOST
 0x2

	)

1891 
	#ARP_MULTIHOMING_MAX
 8

	)

1894 
	s¨p_ﬁ_°©s_t
 {

1895 
uöt32
 
	mho°_ù_íåõs
;

1896 
uöt32
 
	mho°_ù_ovîÊow
;

1898 
uöt32
 
	m¨p_èbÀ_íåõs
;

1899 
uöt32
 
	m¨p_èbÀ_ovîÊow
;

1901 
uöt32
 
	mho°_ªque°
;

1902 
uöt32
 
	mho°_ª∂y
;

1903 
uöt32
 
	mho°_£rvi˚
;

1905 
uöt32
 
	m≥î_ªque°
;

1906 
uöt32
 
	m≥î_ªque°_dr›
;

1907 
uöt32
 
	m≥î_ª∂y
;

1908 
uöt32
 
	m≥î_ª∂y_dr›
;

1909 
uöt32
 
	m≥î_£rvi˚
;

1915 
	swl_kìp_Æive_pkt
 {

1916 
uöt32
 
	m≥riod_m£c
;

1917 
uöt16
 
	mÀn_byãs
;

1918 
uöt8
 
	md©a
[1];

1919 } 
	twl_kìp_Æive_pkt_t
;

1921 
	#WL_KEEP_ALIVE_FIXED_LEN
 
	`OFFSETOF
(
wl_kìp_Æive_pkt_t
, 
d©a
)

	)

1926 
	ewl_pkt_fûãr_ty≥
 {

1927 
	mWL_PKT_FILTER_TYPE_PATTERN_MATCH


1928 } 
	twl_pkt_fûãr_ty≥_t
;

1930 
	#WL_PKT_FILTER_TYPE
 
wl_pkt_fûãr_ty≥_t


	)

1933 
	swl_pkt_fûãr_∑âîn
 {

1934 
uöt32
 
	moff£t
;

1935 
uöt32
 
	msize_byãs
;

1936 
uöt8
 
	mmask_™d_∑âîn
[1];

1937 } 
	twl_pkt_fûãr_∑âîn_t
;

1940 
	swl_pkt_fûãr
 {

1941 
uöt32
 
	mid
;

1942 
uöt32
 
	mty≥
;

1943 
uöt32
 
	m√g©e_m©ch
;

1945 
wl_pkt_fûãr_∑âîn_t
 
	m∑âîn
;

1946 } 
	mu
;

1947 } 
	twl_pkt_fûãr_t
;

1949 
	#WL_PKT_FILTER_FIXED_LEN
 
	`OFFSETOF
(
wl_pkt_fûãr_t
, 
u
)

	)

1950 
	#WL_PKT_FILTER_PATTERN_FIXED_LEN
 
	`OFFSETOF
(
wl_pkt_fûãr_∑âîn_t
, 
mask_™d_∑âîn
)

	)

1953 
	swl_pkt_fûãr_íabÀ
 {

1954 
uöt32
 
	mid
;

1955 
uöt32
 
	míabÀ
;

1956 } 
	twl_pkt_fûãr_íabÀ_t
;

1959 
	swl_pkt_fûãr_li°
 {

1960 
uöt32
 
	mnum
;

1961 
wl_pkt_fûãr_t
 
	mfûãr
[1];

1962 } 
	twl_pkt_fûãr_li°_t
;

1964 
	#WL_PKT_FILTER_LIST_FIXED_LEN
 
	`OFFSETOF
(
wl_pkt_fûãr_li°_t
, 
fûãr
)

	)

1967 
	swl_pkt_fûãr_°©s
 {

1968 
uöt32
 
	mnum_pkts_m©ched
;

1969 
uöt32
 
	mnum_pkts_f‹w¨ded
;

1970 
uöt32
 
	mnum_pkts_disˇrded
;

1971 } 
	twl_pkt_fûãr_°©s_t
;

1974 
	swl_£q_cmd_io˘l
 {

1975 
uöt32
 
	mcmd
;

1976 
uöt32
 
	mÀn
;

1977 } 
	twl_£q_cmd_io˘l_t
;

1979 
	#WL_SEQ_CMD_ALIGN_BYTES
 4

	)

1982 
	#WL_SEQ_CMDS_GET_IOCTL_FILTER
(
cmd
) \

1983 (((
cmd
Ë=
WLC_GET_MAGIC
) || \

1984 ((
cmd
Ë=
WLC_GET_VERSION
) || \

1985 ((
cmd
Ë=
WLC_GET_AP
) || \

1986 ((
cmd
Ë=
WLC_GET_INSTANCE
))

	)

1990 
	#WL_PKTENG_PER_TX_START
 0x01

	)

1991 
	#WL_PKTENG_PER_TX_STOP
 0x02

	)

1992 
	#WL_PKTENG_PER_RX_START
 0x04

	)

1993 
	#WL_PKTENG_PER_RX_WITH_ACK_START
 0x05

	)

1994 
	#WL_PKTENG_PER_TX_WITH_ACK_START
 0x06

	)

1995 
	#WL_PKTENG_PER_RX_STOP
 0x08

	)

1996 
	#WL_PKTENG_PER_MASK
 0xff

	)

1998 
	#WL_PKTENG_SYNCHRONOUS
 0x100

	)

2000 
	swl_pkãng
 {

2001 
uöt32
 
	mÊags
;

2002 
uöt32
 
	mdñay
;

2003 
uöt32
 
	mn‰ames
;

2004 
uöt32
 
	mÀngth
;

2005 
uöt8
 
	m£qno
;

2006 
ëhî_addr
 
	mde°
;

2007 
ëhî_addr
 
	m§c
;

2008 } 
	twl_pkãng_t
;

2010 
	#NUM_80211b_RATES
 4

	)

2011 
	#NUM_80211ag_RATES
 8

	)

2012 
	#NUM_80211n_RATES
 32

	)

2013 
	#NUM_80211_RATES
 (
NUM_80211b_RATES
+
NUM_80211ag_RATES
+
NUM_80211n_RATES
)

	)

2014 
	swl_pkãng_°©s
 {

2015 
uöt32
 
	mlo°‰m˙t
;

2016 
öt32
 
	mrssi
;

2017 
öt32
 
	m¢r
;

2018 
uöt16
 
	mrxpkt˙t
[
NUM_80211_RATES
+1];

2019 } 
	twl_pkãng_°©s_t
;

2022 
	#WL_WOWL_MAGIC
 (1 << 0)

	)

2023 
	#WL_WOWL_NET
 (1 << 1)

	)

2024 
	#WL_WOWL_DIS
 (1 << 2)

	)

2025 
	#WL_WOWL_RETR
 (1 << 3)

	)

2026 
	#WL_WOWL_BCN
 (1 << 4)

	)

2027 
	#WL_WOWL_TST
 (1 << 5)

	)

2028 
	#WL_WOWL_M1
 (1 << 6)

	)

2029 
	#WL_WOWL_EAPID
 (1 << 7)

	)

2030 
	#WL_WOWL_KEYROT
 (1 << 14)

	)

2031 
	#WL_WOWL_BCAST
 (1 << 15)

	)

2033 
	#MAGIC_PKT_MINLEN
 102

	)

2036 
uöt
 
	mmasksize
;

2037 
uöt
 
	moff£t
;

2038 
uöt
 
	m∑âînoff£t
;

2039 
uöt
 
	m∑âînsize
;

2040 
ul⁄g
 
	mid
;

2043 } 
	twl_wowl_∑âîn_t
;

2046 
uöt
 
	mcou¡
;

2047 
wl_wowl_∑âîn_t
 
	m∑âîn
[1];

2048 } 
	twl_wowl_∑âîn_li°_t
;

2051 
uöt8
 
	mpci_wakeöd
;

2052 
uöt16
 
	mucode_wakeöd
;

2053 } 
	twl_wowl_wakeöd_t
;

2056 
	swl_txøã_˛ass
 {

2057 
uöt8
 
	möô_øã
;

2058 
uöt8
 
	mmö_øã
;

2059 
uöt8
 
	mmax_øã
;

2060 } 
	twl_txøã_˛ass_t
;

2065 
	#WLC_OBSS_SCAN_PASSIVE_DWELL_DEFAULT
 20

	)

2066 
	#WLC_OBSS_SCAN_PASSIVE_DWELL_MIN
 5

	)

2067 
	#WLC_OBSS_SCAN_PASSIVE_DWELL_MAX
 1000

	)

2068 
	#WLC_OBSS_SCAN_ACTIVE_DWELL_DEFAULT
 10

	)

2069 
	#WLC_OBSS_SCAN_ACTIVE_DWELL_MIN
 10

	)

2070 
	#WLC_OBSS_SCAN_ACTIVE_DWELL_MAX
 1000

	)

2071 
	#WLC_OBSS_SCAN_WIDTHSCAN_INTERVAL_DEFAULT
 300

	)

2072 
	#WLC_OBSS_SCAN_WIDTHSCAN_INTERVAL_MIN
 10

	)

2073 
	#WLC_OBSS_SCAN_WIDTHSCAN_INTERVAL_MAX
 900

	)

2074 
	#WLC_OBSS_SCAN_CHANWIDTH_TRANSITION_DLY_DEFAULT
 5

	)

2075 
	#WLC_OBSS_SCAN_CHANWIDTH_TRANSITION_DLY_MIN
 5

	)

2076 
	#WLC_OBSS_SCAN_CHANWIDTH_TRANSITION_DLY_MAX
 100

	)

2077 
	#WLC_OBSS_SCAN_PASSIVE_TOTAL_PER_CHANNEL_DEFAULT
 200

	)

2078 
	#WLC_OBSS_SCAN_PASSIVE_TOTAL_PER_CHANNEL_MIN
 200

	)

2079 
	#WLC_OBSS_SCAN_PASSIVE_TOTAL_PER_CHANNEL_MAX
 10000

	)

2080 
	#WLC_OBSS_SCAN_ACTIVE_TOTAL_PER_CHANNEL_DEFAULT
 20

	)

2081 
	#WLC_OBSS_SCAN_ACTIVE_TOTAL_PER_CHANNEL_MIN
 20

	)

2082 
	#WLC_OBSS_SCAN_ACTIVE_TOTAL_PER_CHANNEL_MAX
 10000

	)

2083 
	#WLC_OBSS_SCAN_ACTIVITY_THRESHOLD_DEFAULT
 25

	)

2084 
	#WLC_OBSS_SCAN_ACTIVITY_THRESHOLD_MIN
 0

	)

2085 
	#WLC_OBSS_SCAN_ACTIVITY_THRESHOLD_MAX
 100

	)

2088 
	swl_obss_sˇn_¨g
 {

2089 
öt16
 
	m∑ssive_dwñl
;

2090 
öt16
 
	ma˘ive_dwñl
;

2091 
öt16
 
	mbss_widthsˇn_öãrvÆ
;

2092 
öt16
 
	m∑ssive_tŸÆ
;

2093 
öt16
 
	ma˘ive_tŸÆ
;

2094 
öt16
 
	mch™width_å™sôi⁄_dñay
;

2095 
öt16
 
	ma˘ivôy_thªshﬁd
;

2096 } 
	twl_obss_sˇn_¨g_t
;

2098 
	#WL_OBSS_SCAN_PARAM_LEN
 (
wl_obss_sˇn_¨g_t
)

	)

2099 
	#WL_MIN_NUM_OBSS_SCAN_ARG
 7

	)

2101 
	#WL_COEX_INFO_MASK
 0x07

	)

2102 
	#WL_COEX_INFO_REQ
 0x01

	)

2103 
	#WL_COEX_40MHZ_INTOLERANT
 0x02

	)

2104 
	#WL_COEX_WIDTH20
 0x04

	)

2106 
	#WLC_RSSI_INVALID
 0

	)

2108 
	#MAX_RSSI_LEVELS
 8

	)

2111 
	swl_rssi_evít
 {

2112 
uöt32
 
	møã_limô_m£c
;

2113 
uöt8
 
	mnum_rssi_Àvñs
;

2114 
öt8
 
	mrssi_Àvñs
[
MAX_RSSI_LEVELS
];

2115 } 
	twl_rssi_evít_t
;

2117 
	swl_a˘i⁄_obss_c€x_ªq
 {

2118 
uöt8
 
	möfo
;

2119 
uöt8
 
	mnum
;

2120 
uöt8
 
	mch_li°
[1];

2121 } 
	twl_a˘i⁄_obss_c€x_ªq_t
;

2124 
	#EXTLOG_CUR_VER
 0x0100

	)

2126 
	#MAX_ARGSTR_LEN
 18

	)

2129 
	#LOG_MODULE_COMMON
 0x0001

	)

2130 
	#LOG_MODULE_ASSOC
 0x0002

	)

2131 
	#LOG_MODULE_EVENT
 0x0004

	)

2132 
	#LOG_MODULE_MAX
 3

	)

2135 
	#WL_LOG_LEVEL_DISABLE
 0

	)

2136 
	#WL_LOG_LEVEL_ERR
 1

	)

2137 
	#WL_LOG_LEVEL_WARN
 2

	)

2138 
	#WL_LOG_LEVEL_INFO
 3

	)

2139 
	#WL_LOG_LEVEL_MAX
 
WL_LOG_LEVEL_INFO


	)

2142 
	#LOG_FLAG_EVENT
 1

	)

2145 
	#LOG_ARGTYPE_NULL
 0

	)

2146 
	#LOG_ARGTYPE_STR
 1

	)

2147 
	#LOG_ARGTYPE_INT
 2

	)

2148 
	#LOG_ARGTYPE_INT_STR
 3

	)

2149 
	#LOG_ARGTYPE_STR_INT
 4

	)

2151 
	swlc_exéog_cfg
 {

2152 
	mmax_numbî
;

2153 
uöt16
 
	mmoduÀ
;

2154 
uöt8
 
	mÀvñ
;

2155 
uöt8
 
	mÊag
;

2156 
uöt16
 
	mvîsi⁄
;

2157 } 
	twlc_exéog_cfg_t
;

2159 
	slog_ªc‹d
 {

2160 
uöt32
 
	mtime
;

2161 
uöt16
 
	mmoduÀ
;

2162 
uöt16
 
	mid
;

2163 
uöt8
 
	mÀvñ
;

2164 
uöt8
 
	msub_unô
;

2165 
uöt8
 
	m£q_num
;

2166 
öt32
 
	m¨g
;

2167 
	m°r
[
MAX_ARGSTR_LEN
];

2168 } 
	tlog_ªc‹d_t
;

2170 
	swlc_exéog_ªq
 {

2171 
uöt32
 
	m‰om_œ°
;

2172 
uöt32
 
	mnum
;

2173 } 
	twlc_exéog_ªq_t
;

2175 
	swlc_exéog_ªsu…s
 {

2176 
uöt16
 
	mvîsi⁄
;

2177 
uöt16
 
	mªc‹d_Àn
;

2178 
uöt32
 
	mnum
;

2179 
log_ªc‹d_t
 
	mlogs
[1];

2180 } 
	twlc_exéog_ªsu…s_t
;

2182 
	slog_id°r
 {

2183 
uöt16
 
	mid
;

2184 
uöt16
 
	mÊag
;

2185 
uöt8
 
	m¨g_ty≥
;

2186 c⁄° *
	mfmt_°r
;

2187 } 
	tlog_id°r_t
;

2189 
	#FMTSTRF_USER
 1

	)

2193 
	mFMTSTR_DRIVER_UP_ID
 = 0,

2194 
	mFMTSTR_DRIVER_DOWN_ID
 = 1,

2195 
	mFMTSTR_SUSPEND_MAC_FAIL_ID
 = 2,

2196 
	mFMTSTR_NO_PROGRESS_ID
 = 3,

2197 
	mFMTSTR_RFDISABLE_ID
 = 4,

2198 
	mFMTSTR_REG_PRINT_ID
 = 5,

2199 
	mFMTSTR_EXPTIME_ID
 = 6,

2200 
	mFMTSTR_JOIN_START_ID
 = 7,

2201 
	mFMTSTR_JOIN_COMPLETE_ID
 = 8,

2202 
	mFMTSTR_NO_NETWORKS_ID
 = 9,

2203 
	mFMTSTR_SECURITY_MISMATCH_ID
 = 10,

2204 
	mFMTSTR_RATE_MISMATCH_ID
 = 11,

2205 
	mFMTSTR_AP_PRUNED_ID
 = 12,

2206 
	mFMTSTR_KEY_INSERTED_ID
 = 13,

2207 
	mFMTSTR_DEAUTH_ID
 = 14,

2208 
	mFMTSTR_DISASSOC_ID
 = 15,

2209 
	mFMTSTR_LINK_UP_ID
 = 16,

2210 
	mFMTSTR_LINK_DOWN_ID
 = 17,

2211 
	mFMTSTR_RADIO_HW_OFF_ID
 = 18,

2212 
	mFMTSTR_RADIO_HW_ON_ID
 = 19,

2213 
	mFMTSTR_EVENT_DESC_ID
 = 20,

2214 
	mFMTSTR_PNP_SET_POWER_ID
 = 21,

2215 
	mFMTSTR_RADIO_SW_OFF_ID
 = 22,

2216 
	mFMTSTR_RADIO_SW_ON_ID
 = 23,

2217 
	mFMTSTR_PWD_MISMATCH_ID
 = 24,

2218 
	mFMTSTR_FATAL_ERROR_ID
 = 25,

2219 
	mFMTSTR_AUTH_FAIL_ID
 = 26,

2220 
	mFMTSTR_ASSOC_FAIL_ID
 = 27,

2221 
	mFMTSTR_IBSS_FAIL_ID
 = 28,

2222 
	mFMTSTR_EXTAP_FAIL_ID
 = 29,

2223 
	mFMTSTR_MAX_ID


2224 } 
	tlog_fmt°r_id_t
;

2226 #ifde‡
DONGLEOVERLAYS


2228 
uöt32
 
	mÊags_idx
;

2229 
uöt32
 
	moff£t
;

2230 
uöt32
 
	mÀn
;

2232 } 
	twl_io˘l_ovîœy_t
;

2234 
	#OVERLAY_IDX_MASK
 0x000000ff

	)

2235 
	#OVERLAY_IDX_SHIFT
 0

	)

2236 
	#OVERLAY_FLAGS_MASK
 0xffffff00

	)

2237 
	#OVERLAY_FLAGS_SHIFT
 8

	)

2239 
	#OVERLAY_FLAG_POSTLOAD
 0x100

	)

2241 
	#OVERLAY_FLAG_DEFER_DL
 0x200

	)

2243 
	#OVERLAY_FLAG_PRESLEEP
 0x400

	)

2245 
	#OVERLAY_DOWNLOAD_CHUNKSIZE
 1024

	)

2249 
	~<∑cked_£˘i⁄_íd.h
>

2252 
	~<∑cked_£˘i⁄_°¨t.h
>

2254 
	#VNDR_IE_CMD_LEN
 4

	)

2257 
	#VNDR_IE_BEACON_FLAG
 0x1

	)

2258 
	#VNDR_IE_PRBRSP_FLAG
 0x2

	)

2259 
	#VNDR_IE_ASSOCRSP_FLAG
 0x4

	)

2260 
	#VNDR_IE_AUTHRSP_FLAG
 0x8

	)

2261 
	#VNDR_IE_PRBREQ_FLAG
 0x10

	)

2262 
	#VNDR_IE_ASSOCREQ_FLAG
 0x20

	)

2263 
	#VNDR_IE_CUSTOM_FLAG
 0x100

	)

2265 
	#VNDR_IE_INFO_HDR_LEN
 ((
uöt32
))

	)

2267 
BWL_PRE_PACKED_STRUCT
 struct {

2268 
uöt32
 
	mpktÊag
;

2269 
vndr_õ_t
 
	mvndr_õ_d©a
;

2270 } 
	tBWL_POST_PACKED_STRUCT
 
	tvndr_õ_öfo_t
;

2272 
BWL_PRE_PACKED_STRUCT
 struct {

2273 
	mõcou¡
;

2274 
vndr_õ_öfo_t
 
	mvndr_õ_li°
[1];

2275 } 
	tBWL_POST_PACKED_STRUCT
 
	tvndr_õ_buf_t
;

2277 
BWL_PRE_PACKED_STRUCT
 struct {

2278 
	mcmd
[
VNDR_IE_CMD_LEN
];

2279 
vndr_õ_buf_t
 
	mvndr_õ_buf„r
;

2280 } 
	tBWL_POST_PACKED_STRUCT
 
	tvndr_õ_£tbuf_t
;

2284 
BWL_PRE_PACKED_STRUCT
 
	s°a_¥bªq_wps_õ_hdr
 {

2285 
ëhî_addr
 
	m°aAddr
;

2286 
uöt16
 
	mõLí
;

2287 } 
	tBWL_POST_PACKED_STRUCT
 
	t°a_¥bªq_wps_õ_hdr_t
;

2289 
BWL_PRE_PACKED_STRUCT
 
	s°a_¥bªq_wps_õ_d©a
 {

2290 
°a_¥bªq_wps_õ_hdr_t
 
	mhdr
;

2291 
uöt8
 
	mõD©a
[1];

2292 } 
	tBWL_POST_PACKED_STRUCT
 
	t°a_¥bªq_wps_õ_d©a_t
;

2294 
BWL_PRE_PACKED_STRUCT
 
	s°a_¥bªq_wps_õ_li°
 {

2295 
uöt32
 
	mtŸLí
;

2296 
uöt8
 
	mõD©aLi°
[1];

2297 } 
	tBWL_POST_PACKED_STRUCT
 
	t°a_¥bªq_wps_õ_li°_t
;

2300 #ifde‡
WLMEDIA_TXFAILEVENT


2301 
BWL_PRE_PACKED_STRUCT
 struct {

2302 
	mde°
[
ETHER_ADDR_LEN
];

2303 
uöt8
 
	m¥io
;

2304 
uöt8
 
	mÊags
;

2305 
uöt32
 
	mtsf_l
;

2306 
uöt32
 
	mtsf_h
;

2307 
uöt16
 
	møãs
;

2308 
uöt16
 
	mtx°©us
;

2309 } 
	tBWL_POST_PACKED_STRUCT
 
	ttxÁûöfo_t
;

2312 
	~<∑cked_£˘i⁄_íd.h
>

2315 
	#ASSERTLOG_CUR_VER
 0x0100

	)

2316 
	#MAX_ASSRTSTR_LEN
 64

	)

2318 
	sas£π_ªc‹d
 {

2319 
uöt32
 
	mtime
;

2320 
uöt8
 
	m£q_num
;

2321 
	m°r
[
MAX_ASSRTSTR_LEN
];

2322 } 
	tas£π_ªc‹d_t
;

2324 
	sas£πlog_ªsu…s
 {

2325 
uöt16
 
	mvîsi⁄
;

2326 
uöt16
 
	mªc‹d_Àn
;

2327 
uöt32
 
	mnum
;

2328 
as£π_ªc‹d_t
 
	mlogs
[1];

2329 } 
	tas£πlog_ªsu…s_t
;

2331 
	#LOGRRC_FIX_LEN
 8

	)

2332 
	#IOBUF_ALLOWED_NUM_OF_LOGREC
(
ty≥
, 
Àn
Ë(÷í - 
LOGRRC_FIX_LEN
)/—y≥))

	)

2338 
	#CHANIM_DISABLE
 0

	)

2339 
	#CHANIM_DETECT
 1

	)

2340 
	#CHANIM_ACT
 2

	)

2341 
	#CHANIM_MODE_MAX
 2

	)

2344 
	#APCS_IOCTL
 1

	)

2345 
	#APCS_CHANIM
 2

	)

2346 
	#APCS_CSTIMER
 3

	)

2347 
	#APCS_BTA
 4

	)

2350 
	#CHANIM_ACS_RECORD
 10

	)

2354 
boﬁ
 
	mvÆid
;

2355 
uöt8
 
	måiggî
;

2356 
ch™•ec_t
 
	m£À˘ed_ch•c
;

2357 
uöt32
 
	mglôch_˙t
;

2358 
uöt8
 
	mcˇ°©s
;

2359 
uöt
 
	mtime°amp
;

2360 } 
	tch™im_acs_ªc‹d_t
;

2363 
ch™im_acs_ªc‹d_t
 
	macs_ªc‹d
[
CHANIM_ACS_RECORD
];

2364 
uöt8
 
	mcou¡
;

2365 
uöt
 
	mtime°amp
;

2366 } 
	twl_acs_ªc‹d_t
;

2370 
	#SMFS_VERSION
 1

	)

2372 
	swl_smfs_ñem
 {

2373 
uöt32
 
	mcou¡
;

2374 
uöt16
 
	mcode
;

2375 } 
	twl_smfs_ñem_t
;

2377 
	swl_smf_°©s
 {

2378 
uöt32
 
	mvîsi⁄
;

2379 
uöt16
 
	mÀngth
;

2380 
uöt8
 
	mty≥
;

2381 
uöt8
 
	mcodëy≥
;

2382 
uöt32
 
	mign‹ed_˙t
;

2383 
uöt32
 
	mmÆf‹med_˙t
;

2384 
uöt32
 
	mcou¡_tŸÆ
;

2385 
wl_smfs_ñem_t
 
	mñem
[1];

2386 } 
	twl_smf_°©s_t
;

2388 
	#WL_SMFSTATS_FIXED_LEN
 
	`OFFSETOF
(
wl_smf_°©s_t
, 
ñem
);

	)

2391 
	mSMFS_CODETYPE_SC
,

2392 
	mSMFS_CODETYPE_RC


2396 
	#SMFS_CODE_MALFORMED
 0xFFFE

	)

2397 
	#SMFS_CODE_IGNORED
 0xFFFD

	)

2399 
	esmfs_ty≥
 {

2400 
	mSMFS_TYPE_AUTH
,

2401 
	mSMFS_TYPE_ASSOC
,

2402 
	mSMFS_TYPE_REASSOC
,

2403 
	mSMFS_TYPE_DISASSOC_TX
,

2404 
	mSMFS_TYPE_DISASSOC_RX
,

2405 
	mSMFS_TYPE_DEAUTH_TX
,

2406 
	mSMFS_TYPE_DEAUTH_RX
,

2407 
	mSMFS_TYPE_MAX


2408 } 
	tsmfs_ty≥_t
;

2410 #ifde‡
PHYMON


2412 
	#PHYMON_VERSION
 1

	)

2414 
	swl_phyˇl_c‹e_°©e
 {

2416 
öt16
 
	mtx_iqloˇl_a
;

2417 
öt16
 
	mtx_iqloˇl_b
;

2418 
öt8
 
	mtx_iqloˇl_ci
;

2419 
öt8
 
	mtx_iqloˇl_cq
;

2420 
öt8
 
	mtx_iqloˇl_di
;

2421 
öt8
 
	mtx_iqloˇl_dq
;

2422 
öt8
 
	mtx_iqloˇl_ei
;

2423 
öt8
 
	mtx_iqloˇl_eq
;

2424 
öt8
 
	mtx_iqloˇl_fi
;

2425 
öt8
 
	mtx_iqloˇl_fq
;

2428 
öt16
 
	mrx_iqˇl_a
;

2429 
öt16
 
	mrx_iqˇl_b
;

2431 
uöt8
 
	mtx_iqloˇl_pwridx
;

2432 
uöt32
 
	m∑pd_ïsû⁄_èbÀ
[64];

2433 
öt16
 
	m∑pd_ïsû⁄_off£t
;

2434 
uöt8
 
	mcuº_tx_pwrödex
;

2435 
öt8
 
	midÀ_tssi
;

2436 
öt8
 
	me°_tx_pwr
;

2437 
öt8
 
	me°_rx_pwr
;

2438 
uöt16
 
	mrx_gaööfo
;

2439 
uöt16
 
	möô_gaöcode
;

2440 
öt8
 
	me°úr_tx
;

2441 
öt8
 
	me°úr_rx
;

2443 } 
	twl_phyˇl_c‹e_°©e_t
;

2445 
	swl_phyˇl_°©e
 {

2446 
	mvîsi⁄
;

2447 
öt8
 
	mnum_phy_c‹es
;

2448 
öt8
 
	mcuº_ãm≥øtuª
;

2449 
ch™•ec_t
 
	mch•ec
;

2450 
boﬁ
 
	maci_°©e
;

2451 
uöt16
 
	m¸smöpowî
;

2452 
uöt16
 
	m¸smöpowîl
;

2453 
uöt16
 
	m¸smöpowîu
;

2454 
wl_phyˇl_c‹e_°©e_t
 
	mphyˇl_c‹e
[1];

2455 } 
	twl_phyˇl_°©e_t
;

2457 
	#WL_PHYCAL_STAT_FIXED_LEN
 
	`OFFSETOF
(
wl_phyˇl_°©e_t
, 
phyˇl_c‹e
)

	)

2460 #ifde‡
WLP2P


2462 
	swl_p2p_disc_°
 {

2463 
uöt8
 
	m°©e
;

2464 
ch™•ec_t
 
	mch•ec
;

2465 
uöt16
 
	mdwñl
;

2466 } 
	twl_p2p_disc_°_t
;

2469 
	#WL_P2P_DISC_ST_SCAN
 0

	)

2470 
	#WL_P2P_DISC_ST_LISTEN
 1

	)

2471 
	#WL_P2P_DISC_ST_SEARCH
 2

	)

2474 
	swl_p2p_sˇn
 {

2475 
uöt8
 
	mty≥
;

2476 
uöt8
 
	mª£rved
[3];

2478 } 
	twl_p2p_sˇn_t
;

2481 
	swl_p2p_if
 {

2482 
ëhî_addr
 
	maddr
;

2483 
uöt8
 
	mty≥
;

2484 
ch™•ec_t
 
	mch•ec
;

2485 } 
	twl_p2p_if_t
;

2488 
	#WL_P2P_IF_CLIENT
 0

	)

2489 
	#WL_P2P_IF_GO
 1

	)

2490 
	#WL_P2P_IF_DYNBCN_GO
 2

	)

2491 
	#WL_P2P_IF_DEV
 3

	)

2494 
	swl_p2p_ifq
 {

2495 
uöt
 
	mbsscfgidx
;

2496 
	mi‚ame
[
BCM_MSG_IFNAME_MAX
];

2497 } 
	twl_p2p_ifq_t
;

2500 
	swl_p2p_›s
 {

2501 
uöt8
 
	m›s
;

2502 
uöt8
 
	m˘w
;

2503 } 
	twl_p2p_›s_t
;

2506 
	swl_p2p_sched_desc
 {

2507 
uöt32
 
	m°¨t
;

2508 
uöt32
 
	möãrvÆ
;

2509 
uöt32
 
	mduøti⁄
;

2510 
uöt32
 
	mcou¡
;

2511 } 
	twl_p2p_sched_desc_t
;

2514 
	#WL_P2P_SCHED_RSVD
 0

	)

2515 
	#WL_P2P_SCHED_REPEAT
 255

	)

2517 
	swl_p2p_sched
 {

2518 
uöt8
 
	mty≥
;

2519 
uöt8
 
	ma˘i⁄
;

2520 
uöt8
 
	m›ti⁄
;

2521 
wl_p2p_sched_desc_t
 
	mdesc
[1];

2522 } 
	twl_p2p_sched_t
;

2523 
	#WL_P2P_SCHED_FIXED_LEN
 3

	)

2526 
	#WL_P2P_SCHED_TYPE_ABS
 0

	)

2527 
	#WL_P2P_SCHED_TYPE_REQ_ABS
 1

	)

2530 
	#WL_P2P_SCHED_ACTION_NONE
 0

	)

2531 
	#WL_P2P_SCHED_ACTION_DOZE
 1

	)

2533 
	#WL_P2P_SCHED_ACTION_GOOFF
 2

	)

2535 
	#WL_P2P_SCHED_ACTION_RESET
 255

	)

2538 
	#WL_P2P_SCHED_OPTION_NORMAL
 0

	)

2539 
	#WL_P2P_SCHED_OPTION_BCNPCT
 1

	)

2541 
	#WL_P2P_SCHED_OPTION_TSFOFS
 2

	)

2544 
	#WL_P2P_FEAT_GO_CSA
 (1 << 0)

	)

2545 
	#WL_P2P_FEAT_GO_NOLEGACY
 (1 << 1)

	)

2546 
	#WL_P2P_FEAT_RESTRICT_DEV_RESP
 (1 << 2)

	)

2550 
	#BCM_ACTION_RFAWARE
 0x77

	)

2551 
	#BCM_ACTION_RFAWARE_DCS
 0x01

	)

2555 
	#WL_11N_2x2
 1

	)

2556 
	#WL_11N_3x3
 3

	)

2557 
	#WL_11N_4x4
 4

	)

2560 
	#WLFEATURE_DISABLE_11N
 0x00000001

	)

2561 
	#WLFEATURE_DISABLE_11N_STBC_TX
 0x00000002

	)

2562 
	#WLFEATURE_DISABLE_11N_STBC_RX
 0x00000004

	)

2563 
	#WLFEATURE_DISABLE_11N_SGI_TX
 0x00000008

	)

2564 
	#WLFEATURE_DISABLE_11N_SGI_RX
 0x00000010

	)

2565 
	#WLFEATURE_DISABLE_11N_AMPDU_TX
 0x00000020

	)

2566 
	#WLFEATURE_DISABLE_11N_AMPDU_RX
 0x00000040

	)

2567 
	#WLFEATURE_DISABLE_11N_GF
 0x00000080

	)

2570 
	#LQ_IDX_LAST
 3

	)

2571 
	#MCS_INDEX_SIZE
 33

	)

2573 
	#LQ_IDX_MIN
 0

	)

2574 
	#LQ_IDX_MAX
 1

	)

2575 
	#LQ_IDX_AVG
 2

	)

2576 
	#LQ_IDX_SUM
 2

	)

2577 
	#LQ_IDX_LAST
 3

	)

2578 
	#LQ_STOP_MONITOR
 0

	)

2579 
	#LQ_START_MONITOR
 1

	)

2581 
	#LINKQUAL_V1
 0x01

	)

2583 
	swl_lq
 {

2584 
öt32
 
	míabÀ
;

2585 
öt32
 
	mrssi
[
LQ_IDX_LAST
];

2586 
öt32
 
	mrssi˙t
;

2587 
öt32
 
	m¢r
[
LQ_IDX_LAST
];

2588 
uöt32
 
	mnßm∂es
;

2589 
uöt8
 
	misvÆid
;

2590 
uöt8
 
	mvîsi⁄
;

2593 
wl_lq
 
	twl_lq_t
;

2594 
wl_lq
 
	twl_lq_°©s_t
;

2597 
ëhî_addr
 
	mó
;

2598 
uöt8
 
	mac_ˇt
;

2599 
uöt8
 
	mnum_pkts
;

2600 } 
	twl_mac_øãhi°o_cmd_t
;

2604 
uöt32
 
	møã
[
WLC_MAXRATE
 + 1];

2605 
uöt32
 
	mmcs_ödex
[
MCS_INDEX_SIZE
];

2606 
uöt32
 
	mtsf_timî
[2][2];

2607 } 
	twl_mac_øãhi°o_ªs_t
;

2609 #ifde‡
PROP_TXSTATUS


2612 
	#WLFC_FLAGS_RSSI_SIGNALS
 1

	)

2615 
	#WLFC_FLAGS_XONXOFF_SIGNALS
 2

	)

2618 
	#WLFC_FLAGS_CREDIT_STATUS_SIGNALS
 4

	)

2620 
	#WLFC_FLAGS_HOST_PROPTXSTATUS_ACTIVE
 8

	)

2621 
	#WLFC_FLAGS_PSQ_GENERATIONFSM_ENABLE
 16

	)

2622 
	#WLFC_FLAGS_PSQ_ZERO_BUFFER_ENABLE
 32

	)

2625 
	#BTA_STATE_LOG_SZ
 64

	)

2629 
	mHCIRe£t
 = 1,

2630 
	mHCIRódLoˇlAMPInfo
,

2631 
	mHCIRódLoˇlAMPASSOC
,

2632 
	mHCIWrôeRemŸeAMPASSOC
,

2633 
	mHCICª©ePhysiˇlLök
,

2634 
	mHCIAc˚±PhysiˇlLökReque°
,

2635 
	mHCIDisc⁄√˘PhysiˇlLök
,

2636 
	mHCICª©eLogiˇlLök
,

2637 
	mHCIAc˚±LogiˇlLök
,

2638 
	mHCIDisc⁄√˘LogiˇlLök
,

2639 
	mHCILogiˇlLökC™˚l
,

2640 
	mHCIAmpSèãCh™ge
,

2641 
	mHCIWrôeLogiˇlLökAc˚±Timeout


2644 
	sÊush_txfifo
 {

2645 
uöt32
 
	mtxfifobmp
;

2646 
uöt32
 
	mhwtxfifoÊush
;

2647 
ëhî_addr
 
	mó
;

2648 } 
	tÊush_txfifo_t
;

2650 
	#CHANNEL_5G_LOW_START
 36

	)

2651 
	#CHANNEL_5G_MID_START
 52

	)

2652 
	#CHANNEL_5G_HIGH_START
 100

	)

2653 
	#CHANNEL_5G_UPPER_START
 149

	)

2656 
	mSPATIAL_MODE_2G_IDX
 = 0,

2657 
	mSPATIAL_MODE_5G_LOW_IDX
,

2658 
	mSPATIAL_MODE_5G_MID_IDX
,

2659 
	mSPATIAL_MODE_5G_HIGH_IDX
,

2660 
	mSPATIAL_MODE_5G_UPPER_IDX
,

2661 
	mSPATIAL_MODE_MAX_IDX


	@dhdutil/miniopt.c

21 
	~<ty≥defs.h
>

22 
	~<°dio.h
>

23 
	~<°dlib.h
>

24 
	~<°rög.h
>

25 
	~<möi›t.h
>

39 
	$möi›t_öô
(
möi›t_t
 *
t
, c⁄° * 
«me
, c⁄° * 
Êags
, 
boﬁ
 
l⁄gÊags
)

41 c⁄° *
nuŒ_Êags
 = "";

43 
	`mem£t
(
t
, 0, (
möi›t_t
));

44 
t
->
«me
 =Çame;

45 i‡(
Êags
 =
NULL
)

46 
t
->
Êags
 = 
nuŒ_Êags
;

48 
t
->
Êags
 = flags;

49 
t
->
l⁄gÊags
 =Üongflags;

50 
	}
}

55 
	$möi›t
(
möi›t_t
 *
t
, **
¨gv
)

57 
keyÀn
;

58 *
p
, *
eq
, *
vÆ°r
, *
íd±r
 = 
NULL
;

59 
îr
 = 0;

61 
t
->
c⁄sumed
 = 0;

62 
t
->
posôi⁄Æ
 = 
FALSE
;

63 
	`mem£t
(
t
->
key
, 0, 
MINIOPT_MAXKEY
);

64 
t
->
›t
 = '\0';

65 
t
->
vÆ°r
 = 
NULL
;

66 
t
->
good_öt
 = 
FALSE
;

67 
vÆ°r
 = 
NULL
;

69 i‡(*
¨gv
 =
NULL
) {

70 
îr
 = -1;

71 
exô
;

74 
p
 = *
¨gv
++;

75 
t
->
c⁄sumed
++;

77 i‡(!
t
->
›t_íd
 && !
	`°rcmp
(
p
, "--")) {

78 
t
->
›t_íd
 = 
TRUE
;

79 i‡(*
¨gv
 =
NULL
) {

80 
îr
 = -1;

81 
exô
;

83 
p
 = *
¨gv
++;

84 
t
->
c⁄sumed
++;

87 i‡(
t
->
›t_íd
) {

88 
t
->
posôi⁄Æ
 = 
TRUE
;

89 
vÆ°r
 = 
p
;

91 i‡(!
	`°∫cmp
(
p
, "--", 2)) {

92 
eq
 = 
	`°rchr
(
p
, '=');

93 i‡(
eq
 =
NULL
 && !
t
->
l⁄gÊags
) {

94 
	`Ârötf
(
°dîr
,

95 "%s: missög \" = \" i¿l⁄gÖ¨am \"%s\"\n", 
t
->
«me
, 
p
);

96 
îr
 = 1;

97 
exô
;

99 
keyÀn
 = 
eq
 ? (eq - (
p
 + 2)Ë: ()
	`°æí
(p) - 2;

100 i‡(
keyÀn
 > 63) keylen = 63;

101 
	`mem˝y
(
t
->
key
, 
p
 + 2, 
keyÀn
);

103 i‡(
eq
) {

104 
vÆ°r
 = 
eq
 + 1;

105 i‡(*
vÆ°r
 == '\0') {

106 
	`Ârötf
(
°dîr
,

108 
t
->
«me
, 
p
);

109 
îr
 = 1;

110 
exô
;

114 i‡(!
	`°∫cmp
(
p
, "-", 1)) {

115 
t
->
›t
 = 
p
[1];

116 i‡(
	`°æí
(
p
) > 2) {

117 
	`Ârötf
(
°dîr
,

119 
t
->
«me
, 
p
);

120 
îr
 = 1;

121 
exô
;

123 i‡(
	`°rchr
(
t
->
Êags
,Å->
›t
)) {

125 
vÆ°r
 = 
NULL
;

127 i‡(*
¨gv
 =
NULL
) {

128 
	`Ârötf
(
°dîr
,

129 "%s: missög vÆuê∑ømëîá·î \"%s\"\n", 
t
->
«me
, 
p
);

130 
îr
 = 1;

131 
exô
;

133 
vÆ°r
 = *
¨gv
;

134 
¨gv
++;

135 
t
->
c⁄sumed
++;

138 
t
->
posôi⁄Æ
 = 
TRUE
;

139 
vÆ°r
 = 
p
;

143 i‡(
vÆ°r
) {

144 
t
->
uvÆ
 = (
uöt
)
	`°πoul
(
vÆ°r
, &
íd±r
, 0);

145 
t
->
vÆ
 = (È->
uvÆ
;

146 
t
->
good_öt
 = (*
íd±r
 == '\0');

149 
t
->
vÆ°r
 = valstr;

151 
exô
:

152 i‡(
îr
 == 1)

153 
t
->
›t
 = '?';

155  
îr
;

156 
	}
}

	@wpa_supplicant_8_lib/driver_cmd_common.h

12 #i‚de‡
DRIVER_CMD_COMMON_H


13 
	#DRIVER_CMD_COMMON_H


	)

15 
	~"c⁄fig_ssid.h
"

17 
	#MAX_DRV_CMD_SIZE
 248

	)

18 
	#DRV_NUMBER_SEQUENTIAL_ERRORS
 4

	)

20 
	#RSSI_CMD
 "RSSI"

	)

21 
	#LINKSPEED_CMD
 "LINKSPEED"

	)

23 
	#MAX_WPSP2PIE_CMD_SIZE
 384

	)

25 
	#WEXT_PNOSETUP_HEADER
 "PNOSETUP "

	)

26 
	#WEXT_PNOSETUP_HEADER_SIZE
 9

	)

27 
	#WEXT_PNO_TLV_PREFIX
 'S'

	)

28 
	#WEXT_PNO_TLV_VERSION
 '1'

	)

29 
	#WEXT_PNO_TLV_SUBVERSION
 '2'

	)

30 
	#WEXT_PNO_TLV_RESERVED
 '0'

	)

31 
	#WEXT_PNO_VERSION_SIZE
 4

	)

32 
	#WEXT_PNO_AMOUNT
 16

	)

33 
	#WEXT_PNO_SSID_SECTION
 'S'

	)

35 
	#WEXT_PNO_SSID_HEADER_SIZE
 2

	)

36 
	#WEXT_PNO_SCAN_INTERVAL_SECTION
 'T'

	)

37 
	#WEXT_PNO_SCAN_INTERVAL_LENGTH
 2

	)

38 
	#WEXT_PNO_SCAN_INTERVAL
 30

	)

40 
	#WEXT_PNO_SCAN_INTERVAL_SIZE
 (1 + 
WEXT_PNO_SCAN_INTERVAL_LENGTH
)

	)

41 
	#WEXT_PNO_REPEAT_SECTION
 'R'

	)

42 
	#WEXT_PNO_REPEAT_LENGTH
 1

	)

43 
	#WEXT_PNO_REPEAT
 4

	)

45 
	#WEXT_PNO_REPEAT_SIZE
 (1 + 
WEXT_PNO_REPEAT_LENGTH
)

	)

46 
	#WEXT_PNO_MAX_REPEAT_SECTION
 'M'

	)

47 
	#WEXT_PNO_MAX_REPEAT_LENGTH
 1

	)

48 
	#WEXT_PNO_MAX_REPEAT
 3

	)

50 
	#WEXT_PNO_MAX_REPEAT_SIZE
 (1 + 
WEXT_PNO_MAX_REPEAT_LENGTH
)

	)

52 
	#WEXT_PNO_NONSSID_SECTIONS_SIZE
 (
WEXT_PNO_SCAN_INTERVAL_SIZE
 + 
WEXT_PNO_REPEAT_SIZE
 + 
WEXT_PNO_MAX_REPEAT_SIZE
)

	)

54 
	#WEXT_PNO_MAX_COMMAND_SIZE
 (
WEXT_PNOSETUP_HEADER_SIZE
 + 
WEXT_PNO_VERSION_SIZE
 \

55 + 
WEXT_PNO_AMOUNT
 * (
WEXT_PNO_SSID_HEADER_SIZE
 + 
MAX_SSID_LEN
) \

56 + 
WEXT_PNO_NONSSID_SECTIONS_SIZE
 + 1)

	)

	@wpa_supplicant_8_lib/driver_cmd_nl80211.c

13 
	~"drivî_∆80211.h
"

14 
	~"drivî_cmd_comm⁄.h
"

16 
	~"w∑_suµliˇ¡_i.h
"

17 
	~"c⁄fig.h
"

19 
	#WPA_EVENT_DRIVER_STATE
 "CTRL-EVENT-DRIVER-STATE "

	)

21 
	#WPA_PS_ENABLED
 0

	)

22 
	#WPA_PS_DISABLED
 1

	)

24 
	s™droid_wifi_¥iv_cmd
 {

25 *
	mbuf
;

26 
	mu£d_Àn
;

27 
	mtŸÆ_Àn
;

28 } 
	t™droid_wifi_¥iv_cmd
;

30 
£nd_™d_ªcv_msgs
(
w∑_drivî_∆80211_d©a
 *
drv
, 
∆_msg
 *
msg
,

31 (*
vÆid_h™dÀr
)(
∆_msg
 *, *),

32 *
vÆid_d©a
);

34 
drv_îr‹s
 = 0;

36 
	$w∑_drivî_£nd_h™g_msg
(
w∑_drivî_∆80211_d©a
 *
drv
)

38 
drv_îr‹s
++;

39 i‡(
drv_îr‹s
 > 
DRV_NUMBER_SEQUENTIAL_ERRORS
) {

40 
drv_îr‹s
 = 0;

41 
	`w∑_msg
(
drv
->
˘x
, 
MSG_INFO
, 
WPA_EVENT_DRIVER_STATE
 "HANGED");

43 
	}
}

45 
	$w∑_drivî_£t_powî_ßve
(*
¥iv
, 
°©e
)

47 
i802_bss
 *
bss
 = 
¥iv
;

48 
w∑_drivî_∆80211_d©a
 *
drv
 = 
bss
->drv;

49 
∆_msg
 *
msg
;

50 
ªt
 = -1;

51 
∆80211_ps_°©e
 
ps_°©e
;

53 
msg
 = 
	`∆msg_Æloc
();

54 i‡(!
msg
)

57 
	`gílmsg_put
(
msg
, 0, 0, 
	`gíl_Ámûy_gë_id
(
drv
->
∆80211
), 0, 0,

58 
NL80211_CMD_SET_POWER_SAVE
, 0);

60 i‡(
°©e
 =
WPA_PS_ENABLED
)

61 
ps_°©e
 = 
NL80211_PS_ENABLED
;

63 
ps_°©e
 = 
NL80211_PS_DISABLED
;

65 
	`NLA_PUT_U32
(
msg
, 
NL80211_ATTR_IFINDEX
, 
drv
->
ifödex
);

66 
	`NLA_PUT_U32
(
msg
, 
NL80211_ATTR_PS_STATE
, 
ps_°©e
);

68 
ªt
 = 
	`£nd_™d_ªcv_msgs
(
drv
, 
msg
, 
NULL
, NULL);

69 
msg
 = 
NULL
;

70 i‡(
ªt
 < 0)

71 
	`w∑_¥ötf
(
MSG_ERROR
, "∆80211: SëÖowî modêÁû: %d", 
ªt
);

72 
∆a_put_Áûuª
:

73 
	`∆msg_‰ì
(
msg
);

74  
ªt
;

75 
	}
}

77 
	$gë_powî_mode_h™dÀr
(
∆_msg
 *
msg
, *
¨g
)

79 
∆©å
 *
tb
[
NL80211_ATTR_MAX
 + 1];

80 
gílmsghdr
 *
g∆h
 = 
	`∆msg_d©a
(
	`∆msg_hdr
(
msg
));

81 *
°©e
 = (*)
¨g
;

83 
	`∆a_∑r£
(
tb
, 
NL80211_ATTR_MAX
, 
	`gílmsg_©åd©a
(
g∆h
, 0),

84 
	`gílmsg_©åÀn
(
g∆h
, 0), 
NULL
);

86 i‡(!
tb
[
NL80211_ATTR_PS_STATE
])

87  
NL_SKIP
;

89 i‡(
°©e
) {

90 *
°©e
 = ()
	`∆a_gë_u32
(
tb
[
NL80211_ATTR_PS_STATE
]);

91 
	`w∑_¥ötf
(
MSG_DEBUG
, "∆80211: GëÖowî modê%d", *
°©e
);

92 *
°©e
 = (*°©ê=
NL80211_PS_ENABLED
) ?

93 
WPA_PS_ENABLED
 : 
WPA_PS_DISABLED
;

96  
NL_SKIP
;

97 
	}
}

99 
	$w∑_drivî_gë_powî_ßve
(*
¥iv
, *
°©e
)

101 
i802_bss
 *
bss
 = 
¥iv
;

102 
w∑_drivî_∆80211_d©a
 *
drv
 = 
bss
->drv;

103 
∆_msg
 *
msg
;

104 
ªt
 = -1;

105 
∆80211_ps_°©e
 
ps_°©e
;

107 
msg
 = 
	`∆msg_Æloc
();

108 i‡(!
msg
)

111 
	`gílmsg_put
(
msg
, 0, 0, 
	`gíl_Ámûy_gë_id
(
drv
->
∆80211
), 0, 0,

112 
NL80211_CMD_GET_POWER_SAVE
, 0);

114 
	`NLA_PUT_U32
(
msg
, 
NL80211_ATTR_IFINDEX
, 
drv
->
ifödex
);

116 
ªt
 = 
	`£nd_™d_ªcv_msgs
(
drv
, 
msg
, 
gë_powî_mode_h™dÀr
, 
°©e
);

117 
msg
 = 
NULL
;

118 i‡(
ªt
 < 0)

119 
	`w∑_¥ötf
(
MSG_ERROR
, "∆80211: GëÖowî modêÁû: %d", 
ªt
);

120 
∆a_put_Áûuª
:

121 
	`∆msg_‰ì
(
msg
);

122  
ªt
;

123 
	}
}

125 
	$w∑_drivî_£t_backgroundsˇn_∑øms
(*
¥iv
)

127 
i802_bss
 *
bss
 = 
¥iv
;

128 
w∑_drivî_∆80211_d©a
 *
drv
 = 
bss
->drv;

129 
w∑_suµliˇ¡
 *
w∑_s
;

130 
i‰eq
 
i‰
;

131 
™droid_wifi_¥iv_cmd
 
¥iv_cmd
;

132 
ªt
 = 0, 
i
 = 0, 
bp
;

133 
buf
[
WEXT_PNO_MAX_COMMAND_SIZE
];

134 
w∑_ssid
 *
ssid_c⁄f
;

136 i‡(
drv
 =
NULL
) {

137 
	`w∑_¥ötf
(
MSG_ERROR
, "%s: drv i†NULL. Exôög", 
__func__
);

140 i‡(
drv
->
˘x
 =
NULL
) {

141 
	`w∑_¥ötf
(
MSG_ERROR
, "%s: drv->˘x i†NULL. Exôög", 
__func__
);

144 
w∑_s
 = (
w∑_suµliˇ¡
 *)(
drv
->
˘x
);

145 i‡(
w∑_s
->
c⁄f
 =
NULL
) {

146 
	`w∑_¥ötf
(
MSG_ERROR
, "%s: w∑_s->c⁄‡i†NULL. Exôög", 
__func__
);

149 
ssid_c⁄f
 = 
w∑_s
->
c⁄f
->
ssid
;

151 
bp
 = 
WEXT_PNOSETUP_HEADER_SIZE
;

152 
	`os_mem˝y
(
buf
, 
WEXT_PNOSETUP_HEADER
, 
bp
);

153 
buf
[
bp
++] = 
WEXT_PNO_TLV_PREFIX
;

154 
buf
[
bp
++] = 
WEXT_PNO_TLV_VERSION
;

155 
buf
[
bp
++] = 
WEXT_PNO_TLV_SUBVERSION
;

156 
buf
[
bp
++] = 
WEXT_PNO_TLV_RESERVED
;

158 (
i
 < 
WEXT_PNO_AMOUNT
Ë&& (
ssid_c⁄f
 !
NULL
)) {

160 i‡((
bp
 + 
WEXT_PNO_SSID_HEADER_SIZE
 + 
MAX_SSID_LEN
 + 
WEXT_PNO_NONSSID_SECTIONS_SIZE
 + 1Ë>()(
buf
))

162 i‡((!
ssid_c⁄f
->
dißbÀd
Ë&& (ssid_c⁄f->
ssid_Àn
 <
MAX_SSID_LEN
)){

163 
	`w∑_¥ötf
(
MSG_DEBUG
, "F‹ PNO Sˇn: %s", 
ssid_c⁄f
->
ssid
);

164 
buf
[
bp
++] = 
WEXT_PNO_SSID_SECTION
;

165 
buf
[
bp
++] = 
ssid_c⁄f
->
ssid_Àn
;

166 
	`os_mem˝y
(&
buf
[
bp
], 
ssid_c⁄f
->
ssid
, ssid_c⁄f->
ssid_Àn
);

167 
bp
 +
ssid_c⁄f
->
ssid_Àn
;

168 
i
++;

170 
ssid_c⁄f
 = ssid_c⁄f->
√xt
;

173 
buf
[
bp
++] = 
WEXT_PNO_SCAN_INTERVAL_SECTION
;

174 
	`os_¢¥ötf
(&
buf
[
bp
], 
WEXT_PNO_SCAN_INTERVAL_LENGTH
 + 1, "%x", 
WEXT_PNO_SCAN_INTERVAL
);

175 
bp
 +
WEXT_PNO_SCAN_INTERVAL_LENGTH
;

177 
buf
[
bp
++] = 
WEXT_PNO_REPEAT_SECTION
;

178 
	`os_¢¥ötf
(&
buf
[
bp
], 
WEXT_PNO_REPEAT_LENGTH
 + 1, "%x", 
WEXT_PNO_REPEAT
);

179 
bp
 +
WEXT_PNO_REPEAT_LENGTH
;

181 
buf
[
bp
++] = 
WEXT_PNO_MAX_REPEAT_SECTION
;

182 
	`os_¢¥ötf
(&
buf
[
bp
], 
WEXT_PNO_MAX_REPEAT_LENGTH
 + 1, "%x", 
WEXT_PNO_MAX_REPEAT
);

183 
bp
 +
WEXT_PNO_MAX_REPEAT_LENGTH
 + 1;

185 
	`mem£t
(&
i‰
, 0, (ifr));

186 
	`mem£t
(&
¥iv_cmd
, 0, (priv_cmd));

187 
	`os_°∫˝y
(
i‰
.
i‰_«me
, 
bss
->
i‚ame
, 
IFNAMSIZ
);

189 
¥iv_cmd
.
buf
 = buf;

190 
¥iv_cmd
.
u£d_Àn
 = 
bp
;

191 
¥iv_cmd
.
tŸÆ_Àn
 = 
bp
;

192 
i‰
.
i‰_d©a
 = &
¥iv_cmd
;

194 
ªt
 = 
	`io˘l
(
drv
->
io˘l_sock
, 
SIOCDEVPRIVATE
 + 1, &
i‰
);

196 i‡(
ªt
 < 0) {

197 
	`w∑_¥ötf
(
MSG_ERROR
, "io˘l[SIOCSIWPRIV] (≤o£tup): %d", 
ªt
);

198 
	`w∑_drivî_£nd_h™g_msg
(
drv
);

200 
drv_îr‹s
 = 0;

202  
ªt
;

203 
	}
}

205 
	$w∑_drivî_∆80211_drivî_cmd
(*
¥iv
, *
cmd
, *
buf
,

206 
size_t
 
buf_Àn
 )

208 
i802_bss
 *
bss
 = 
¥iv
;

209 
w∑_drivî_∆80211_d©a
 *
drv
 = 
bss
->drv;

210 
i‰eq
 
i‰
;

211 
™droid_wifi_¥iv_cmd
 
¥iv_cmd
;

212 
ªt
 = 0;

214 i‡(
	`os_°rˇ£cmp
(
cmd
, "STOP") == 0) {

215 
	`löux_£t_iÁ˚_Êags
(
drv
->
io˘l_sock
, 
bss
->
i‚ame
, 0);

216 
	`w∑_msg
(
drv
->
˘x
, 
MSG_INFO
, 
WPA_EVENT_DRIVER_STATE
 "STOPPED");

217 } i‡(
	`os_°rˇ£cmp
(
cmd
, "START") == 0) {

218 
	`löux_£t_iÁ˚_Êags
(
drv
->
io˘l_sock
, 
bss
->
i‚ame
, 1);

219 
	`w∑_msg
(
drv
->
˘x
, 
MSG_INFO
, 
WPA_EVENT_DRIVER_STATE
 "STARTED");

220 } i‡(
	`os_°rˇ£cmp
(
cmd
, "MACADDR") == 0) {

221 
u8
 
maˇddr
[
ETH_ALEN
] = {};

223 
ªt
 = 
	`löux_gë_ifhwaddr
(
drv
->
io˘l_sock
, 
bss
->
i‚ame
, 
maˇddr
);

224 i‡(!
ªt
)

225 
ªt
 = 
	`os_¢¥ötf
(
buf
, 
buf_Àn
,

226 "Maˇdd∏" 
MACSTR
 "\n", 
	`MAC2STR
(
maˇddr
));

227 } i‡(
	`os_°rˇ£cmp
(
cmd
, "RELOAD") == 0) {

228 
	`w∑_msg
(
drv
->
˘x
, 
MSG_INFO
, 
WPA_EVENT_DRIVER_STATE
 "HANGED");

229 } i‡(
	`os_°∫ˇ£cmp
(
cmd
, "POWERMODE ", 10) == 0) {

230 
°©e
;

232 
°©e
 = 
	`©oi
(
cmd
 + 10);

233 
ªt
 = 
	`w∑_drivî_£t_powî_ßve
(
¥iv
, 
°©e
);

234 i‡(
ªt
 < 0)

235 
	`w∑_drivî_£nd_h™g_msg
(
drv
);

237 
drv_îr‹s
 = 0;

238 } i‡(
	`os_°∫ˇ£cmp
(
cmd
, "GETPOWER", 8) == 0) {

239 
°©e
 = -1;

241 
ªt
 = 
	`w∑_drivî_gë_powî_ßve
(
¥iv
, &
°©e
);

242 i‡(!
ªt
 && (
°©e
 != -1)) {

243 
ªt
 = 
	`os_¢¥ötf
(
buf
, 
buf_Àn
, "POWERMODE = %d\n", 
°©e
);

244 
drv_îr‹s
 = 0;

246 
	`w∑_drivî_£nd_h™g_msg
(
drv
);

249 i‡(
	`os_°rˇ£cmp
(
cmd
, "BGSCAN-START") == 0) {

250 
ªt
 = 
	`w∑_drivî_£t_backgroundsˇn_∑øms
(
¥iv
);

251 i‡(
ªt
 < 0) {

252  
ªt
;

254 
	`os_mem˝y
(
buf
, "PNOFORCE 1", 11);

255 } i‡(
	`os_°rˇ£cmp
(
cmd
, "BGSCAN-STOP") == 0) {

256 
	`os_mem˝y
(
buf
, "PNOFORCE 0", 11);

258 
	`os_mem˝y
(
buf
, 
cmd
, 
	`°æí
(cmd) + 1);

260 
	`mem£t
(&
i‰
, 0, (ifr));

261 
	`mem£t
(&
¥iv_cmd
, 0, (priv_cmd));

262 
	`os_°∫˝y
(
i‰
.
i‰_«me
, 
bss
->
i‚ame
, 
IFNAMSIZ
);

264 
¥iv_cmd
.
buf
 = buf;

265 
¥iv_cmd
.
u£d_Àn
 = 
buf_Àn
;

266 
¥iv_cmd
.
tŸÆ_Àn
 = 
buf_Àn
;

267 
i‰
.
i‰_d©a
 = &
¥iv_cmd
;

269 i‡((
ªt
 = 
	`io˘l
(
drv
->
io˘l_sock
, 
SIOCDEVPRIVATE
 + 1, &
i‰
)) < 0) {

270 
	`w∑_¥ötf
(
MSG_ERROR
, "%s: faûedÅÿissuê¥iv©êcomm™ds\n", 
__func__
);

271 
	`w∑_drivî_£nd_h™g_msg
(
drv
);

273 
drv_îr‹s
 = 0;

274 
ªt
 = 0;

275 i‡((
	`os_°rˇ£cmp
(
cmd
, "LINKSPEED") == 0) ||

276 (
	`os_°rˇ£cmp
(
cmd
, "RSSI") == 0) ||

277 (
	`os_°rˇ£cmp
(
cmd
, "GETBAND") == 0) ||

278 (
	`os_°rˇ£cmp
(
cmd
, "P2P_GET_NOA") == 0))

279 
ªt
 = 
	`°æí
(
buf
);

281 
	`w∑_¥ötf
(
MSG_DEBUG
, "%†%†À¿%d, %d", 
__func__
, 
buf
, 
ªt
, 
	`°æí
(buf));

284  
ªt
;

285 
	}
}

287 
	$w∑_drivî_£t_p2p_nﬂ
(*
¥iv
, 
u8
 
cou¡
, 
°¨t
, 
duøti⁄
)

289 
buf
[
MAX_DRV_CMD_SIZE
];

291 
	`mem£t
(
buf
, 0, (buf));

292 
	`w∑_¥ötf
(
MSG_DEBUG
, "%s: E¡ry", 
__func__
);

293 
	`¢¥ötf
(
buf
, (buf), "P2P_SET_NOA %d %d %d", 
cou¡
, 
°¨t
, 
duøti⁄
);

294  
	`w∑_drivî_∆80211_drivî_cmd
(
¥iv
, 
buf
, buf, 
	`°æí
(buf)+1);

295 
	}
}

297 
	$w∑_drivî_gë_p2p_nﬂ
(*
¥iv
, 
u8
 *
buf
, 
size_t
 
Àn
)

299 
rbuf
[
MAX_DRV_CMD_SIZE
];

300 *
cmd
 = "P2P_GET_NOA";

301 
ªt
;

303 
	`w∑_¥ötf
(
MSG_DEBUG
, "%s: E¡ry", 
__func__
);

304 
	`os_mem£t
(
buf
, 0, 
Àn
);

305 
ªt
 = 
	`w∑_drivî_∆80211_drivî_cmd
(
¥iv
, 
cmd
, 
rbuf
, (rbuf));

306 i‡(
ªt
 <= 0)

308 
ªt
 >>= 1;

309 i‡(
ªt
 > ()
Àn
)

310 
ªt
 = ()
Àn
;

311 
	`hex°r2bö
(
rbuf
, 
buf
, 
ªt
);

312  
ªt
;

313 
	}
}

315 
	$w∑_drivî_£t_p2p_ps
(*
¥iv
, 
Àgacy_ps
, 
›p_ps
, 
˘wödow
)

317 
buf
[
MAX_DRV_CMD_SIZE
];

319 
	`mem£t
(
buf
, 0, (buf));

320 
	`w∑_¥ötf
(
MSG_DEBUG
, "%s: E¡ry", 
__func__
);

321 
	`¢¥ötf
(
buf
, (buf), "P2P_SET_PS %d %d %d", 
Àgacy_ps
, 
›p_ps
, 
˘wödow
);

322  
	`w∑_drivî_∆80211_drivî_cmd
(
¥iv
, 
buf
, buf, 
	`°æí
(buf) + 1);

323 
	}
}

325 
	$w∑_drivî_£t_≠_wps_p2p_õ
(*
¥iv
, c⁄° 
w∑buf
 *
bóc⁄
,

326 c⁄° 
w∑buf
 *
¥obîe•
,

327 c⁄° 
w∑buf
 *
asso¸e•
)

329 
buf
[
MAX_WPSP2PIE_CMD_SIZE
];

330 
w∑buf
 *
≠_wps_p2p_õ
 = 
NULL
;

331 *
_cmd
 = "SET_AP_WPS_P2P_IE";

332 *
pbuf
;

333 
ªt
 = 0;

334 
i
;

335 
	scmd_desc
 {

336 
cmd
;

337 c⁄° 
w∑buf
 *
§c
;

338 } 
cmd_¨r
[] = {

339 {0x1, 
bóc⁄
},

340 {0x2, 
¥obîe•
},

341 {0x4, 
asso¸e•
},

342 {-1, 
NULL
}

345 
	`w∑_¥ötf
(
MSG_DEBUG
, "%s: E¡ry", 
__func__
);

346 
i
 = 0; 
cmd_¨r
[i].
cmd
 != -1; i++) {

347 
	`os_mem£t
(
buf
, 0, (buf));

348 
pbuf
 = 
buf
;

349 
pbuf
 +
	`•rötf
’buf, "%†%d", 
_cmd
, 
cmd_¨r
[
i
].
cmd
);

350 *
pbuf
++ = '\0';

351 
≠_wps_p2p_õ
 = 
cmd_¨r
[
i
].
§c
 ?

352 
	`w∑buf_dup
(
cmd_¨r
[
i
].
§c
Ë: 
NULL
;

353 i‡(
≠_wps_p2p_õ
) {

354 
	`os_mem˝y
(
pbuf
, 
	`w∑buf_hód
(
≠_wps_p2p_õ
), 
	`w∑buf_Àn
(ap_wps_p2p_ie));

355 
ªt
 = 
	`w∑_drivî_∆80211_drivî_cmd
(
¥iv
, 
buf
, buf,

356 
	`°æí
(
_cmd
Ë+ 3 + 
	`w∑buf_Àn
(
≠_wps_p2p_õ
));

357 
	`w∑buf_‰ì
(
≠_wps_p2p_õ
);

358 i‡(
ªt
 < 0)

363  
ªt
;

364 
	}
}

	@wpa_supplicant_8_lib/driver_cmd_wext.c

13 
	~"ö˛udes.h
"

14 
	~<sys/io˘l.h
>

15 
	~<√t/if_¨p.h
>

16 
	~<√t/if.h
>

18 
	~"wúñess_c›y.h
"

19 
	~"comm⁄.h
"

20 
	~"drivî.h
"

21 
	~"ño›.h
"

22 
	~"¥iv_√éök.h
"

23 
	~"drivî_wext.h
"

24 
	~"õì802_11_defs.h
"

25 
	~"w∑_comm⁄.h
"

26 
	~"w∑_˘æ.h
"

27 
	~"w∑_suµliˇ¡_i.h
"

28 
	~"c⁄fig.h
"

29 
	~"löux_io˘l.h
"

30 
	~"sˇn.h
"

32 
	~"drivî_cmd_wext.h
"

33 
	~"drivî_cmd_comm⁄.h
"

42 
	$w∑_drivî_wext_£t_sˇn_timeout
(*
¥iv
)

44 
w∑_drivî_wext_d©a
 *
drv
 = 
¥iv
;

45 
timeout
 = 10;

49 i‡(
drv
->
sˇn_com∂ëe_evíts
) {

55 
timeout
 = 30;

57 
	`w∑_¥ötf
(
MSG_DEBUG
, "ScanÑequested - scanÅimeout %d seconds",

58 
timeout
);

59 
	`ño›_ˇn˚l_timeout
(
w∑_drivî_wext_sˇn_timeout
, 
drv
, drv->
˘x
);

60 
	`ño›_ªgi°î_timeout
(
timeout
, 0, 
w∑_drivî_wext_sˇn_timeout
, 
drv
,

61 
drv
->
˘x
);

62 
	}
}

70 
	$w∑_drivî_wext_combo_sˇn
(*
¥iv
, 
w∑_drivî_sˇn_∑øms
 *
∑øms
)

72 
buf
[
WEXT_CSCAN_BUF_LEN
];

73 
w∑_drivî_wext_d©a
 *
drv
 = 
¥iv
;

74 
iwªq
 
iwr
;

75 
ªt
, 
bp
;

76 
i
;

77 
w∑_suµliˇ¡
 *
w∑_s
 = (w∑_suµliˇ¡ *)(
drv
->
˘x
);

79 i‡(!
drv
->
drivî_is_°¨ãd
) {

80 
	`w∑_¥ötf
(
MSG_DEBUG
, "%s: Drivî st›≥d", 
__func__
);

84 
	`w∑_¥ötf
(
MSG_DEBUG
, "%s: Sèπ", 
__func__
);

87 
bp
 = 
WEXT_CSCAN_HEADER_SIZE
;

88 
	`os_mem˝y
(
buf
, 
WEXT_CSCAN_HEADER
, 
bp
);

89 
i
=0; i < 
∑øms
->
num_ssids
; i++) {

90 i‡((
bp
 + 
IW_ESSID_MAX_SIZE
 + 10Ë>()(
buf
))

92 
	`w∑_¥ötf
(
MSG_DEBUG
, "F‹ Sˇn: %s", 
∑øms
->
ssids
[
i
].
ssid
);

93 
buf
[
bp
++] = 
WEXT_CSCAN_SSID_SECTION
;

94 
buf
[
bp
++] = 
∑øms
->
ssids
[
i
].
ssid_Àn
;

95 
	`os_mem˝y
(&
buf
[
bp
], 
∑øms
->
ssids
[
i
].
ssid
,Ö¨ams->ssids[i].
ssid_Àn
);

96 
bp
 +
∑øms
->
ssids
[
i
].
ssid_Àn
;

100 
buf
[
bp
++] = 
WEXT_CSCAN_CHANNEL_SECTION
;

101 
buf
[
bp
++] = 0;

104 
buf
[
bp
++] = 
WEXT_CSCAN_PASV_DWELL_SECTION
;

105 
buf
[
bp
++] = (
u8
)
WEXT_CSCAN_PASV_DWELL_TIME
;

106 
buf
[
bp
++] = (
u8
)(
WEXT_CSCAN_PASV_DWELL_TIME
 >> 8);

109 
buf
[
bp
++] = 
WEXT_CSCAN_HOME_DWELL_SECTION
;

110 
buf
[
bp
++] = (
u8
)
WEXT_CSCAN_HOME_DWELL_TIME
;

111 
buf
[
bp
++] = (
u8
)(
WEXT_CSCAN_HOME_DWELL_TIME
 >> 8);

113 
	`os_mem£t
(&
iwr
, 0, (iwr));

114 
	`os_°∫˝y
(
iwr
.
i‰_«me
, 
drv
->
i‚ame
, 
IFNAMSIZ
);

115 
iwr
.
u
.
d©a
.
poöãr
 = 
buf
;

116 
iwr
.
u
.
d©a
.
Àngth
 = 
bp
;

118 i‡((
ªt
 = 
	`io˘l
(
drv
->
io˘l_sock
, 
SIOCSIWPRIV
, &
iwr
)) < 0) {

119 i‡(!
drv
->
bgsˇn_íabÀd
)

120 
	`w∑_¥ötf
(
MSG_ERROR
, "io˘l[SIOCSIWPRIV] (csˇn): %d", 
ªt
);

122 
ªt
 = 0;

124  
ªt
;

125 
	}
}

127 
	$w∑_drivî_wext_£t_csˇn_∑øms
(*
buf
, 
size_t
 
buf_Àn
, *
cmd
)

129 *
∑sv_±r
;

130 
bp
, 
i
;

131 
u16
 
∑sv_dwñl
 = 
WEXT_CSCAN_PASV_DWELL_TIME_DEF
;

132 
u8
 
ch™√l
;

134 
	`w∑_¥ötf
(
MSG_DEBUG
, "%s: %s", 
__func__
, 
cmd
);

137 
∑sv_±r
 = 
	`os_°r°r
(
cmd
, ",TIME=");

138 i‡(
∑sv_±r
) {

139 *
∑sv_±r
 = '\0';

140 
∑sv_±r
 += 6;

141 
∑sv_dwñl
 = (
u16
)
	`©oi
(
∑sv_±r
);

142 i‡(
∑sv_dwñl
 == 0)

143 
∑sv_dwñl
 = 
WEXT_CSCAN_PASV_DWELL_TIME_DEF
;

145 
ch™√l
 = (
u8
)
	`©oi
(
cmd
 + 5);

147 
bp
 = 
WEXT_CSCAN_HEADER_SIZE
;

148 
	`os_mem˝y
(
buf
, 
WEXT_CSCAN_HEADER
, 
bp
);

151 
buf
[
bp
++] = 
WEXT_CSCAN_CHANNEL_SECTION
;

152 
buf
[
bp
++] = 
ch™√l
;

153 i‡(
ch™√l
 != 0) {

154 
i
 = (
∑sv_dwñl
 - 1Ë/ 
WEXT_CSCAN_PASV_DWELL_TIME_DEF
;

155 ; 
i
 > 0; i--) {

156 i‡((
size_t
)(
bp
 + 12Ë>
buf_Àn
)

158 
buf
[
bp
++] = 
WEXT_CSCAN_CHANNEL_SECTION
;

159 
buf
[
bp
++] = 
ch™√l
;

162 i‡(
∑sv_dwñl
 > 
WEXT_CSCAN_PASV_DWELL_TIME_MAX
)

163 
∑sv_dwñl
 = 
WEXT_CSCAN_PASV_DWELL_TIME_MAX
;

167 
buf
[
bp
++] = 
WEXT_CSCAN_PASV_DWELL_SECTION
;

168 i‡(
ch™√l
 != 0) {

169 
buf
[
bp
++] = (
u8
)
WEXT_CSCAN_PASV_DWELL_TIME_DEF
;

170 
buf
[
bp
++] = (
u8
)(
WEXT_CSCAN_PASV_DWELL_TIME_DEF
 >> 8);

172 
buf
[
bp
++] = (
u8
)
∑sv_dwñl
;

173 
buf
[
bp
++] = (
u8
)(
∑sv_dwñl
 >> 8);

177 
buf
[
bp
++] = 
WEXT_CSCAN_HOME_DWELL_SECTION
;

178 
buf
[
bp
++] = (
u8
)
WEXT_CSCAN_HOME_DWELL_TIME
;

179 
buf
[
bp
++] = (
u8
)(
WEXT_CSCAN_HOME_DWELL_TIME
 >> 8);

182 
buf
[
bp
++] = 
WEXT_CSCAN_TYPE_SECTION
;

183 
buf
[
bp
++] = 
WEXT_CSCAN_TYPE_PASSIVE
;

184  
bp
;

185 
	}
}

187 *
	$w∑_drivî_gë_cou¡ry_code
(
ch™√ls
)

189 *
cou¡ry
 = "US";

191 i‡(
ch™√ls
 =
WEXT_NUMBER_SCAN_CHANNELS_ETSI
)

192 
cou¡ry
 = "EU";

193 if–
ch™√ls
 =
WEXT_NUMBER_SCAN_CHANNELS_MKK1
)

194 
cou¡ry
 = "JP";

195  
cou¡ry
;

196 
	}
}

198 
	$w∑_drivî_£t_backgroundsˇn_∑øms
(*
¥iv
)

200 
w∑_drivî_wext_d©a
 *
drv
 = 
¥iv
;

201 
w∑_suµliˇ¡
 *
w∑_s
;

202 
iwªq
 
iwr
;

203 
ªt
 = 0, 
i
 = 0, 
bp
;

204 
buf
[
WEXT_PNO_MAX_COMMAND_SIZE
];

205 
w∑_ssid
 *
ssid_c⁄f
;

207 i‡(
drv
 =
NULL
) {

208 
	`w∑_¥ötf
(
MSG_ERROR
, "%s: drv i†NULL. Exôög", 
__func__
);

211 i‡(
drv
->
˘x
 =
NULL
) {

212 
	`w∑_¥ötf
(
MSG_ERROR
, "%s: drv->˘x i†NULL. Exôög", 
__func__
);

215 
w∑_s
 = (
w∑_suµliˇ¡
 *)(
drv
->
˘x
);

216 i‡(
w∑_s
->
c⁄f
 =
NULL
) {

217 
	`w∑_¥ötf
(
MSG_ERROR
, "%s: w∑_s->c⁄‡i†NULL. Exôög", 
__func__
);

220 
ssid_c⁄f
 = 
w∑_s
->
c⁄f
->
ssid
;

222 
bp
 = 
WEXT_PNOSETUP_HEADER_SIZE
;

223 
	`os_mem˝y
(
buf
, 
WEXT_PNOSETUP_HEADER
, 
bp
);

224 
buf
[
bp
++] = 
WEXT_PNO_TLV_PREFIX
;

225 
buf
[
bp
++] = 
WEXT_PNO_TLV_VERSION
;

226 
buf
[
bp
++] = 
WEXT_PNO_TLV_SUBVERSION
;

227 
buf
[
bp
++] = 
WEXT_PNO_TLV_RESERVED
;

229 (
i
 < 
WEXT_PNO_AMOUNT
Ë&& (
ssid_c⁄f
 !
NULL
)) {

231 i‡((
bp
 + 
WEXT_PNO_SSID_HEADER_SIZE
 + 
IW_ESSID_MAX_SIZE
 + 
WEXT_PNO_NONSSID_SECTIONS_SIZE
 + 1Ë>()(
buf
))

233 i‡((!
ssid_c⁄f
->
dißbÀd
Ë&& (ssid_c⁄f->
ssid_Àn
 <
IW_ESSID_MAX_SIZE
)){

234 
	`w∑_¥ötf
(
MSG_DEBUG
, "F‹ PNO Sˇn: %s", 
ssid_c⁄f
->
ssid
);

235 
buf
[
bp
++] = 
WEXT_PNO_SSID_SECTION
;

236 
buf
[
bp
++] = 
ssid_c⁄f
->
ssid_Àn
;

237 
	`os_mem˝y
(&
buf
[
bp
], 
ssid_c⁄f
->
ssid
, ssid_c⁄f->
ssid_Àn
);

238 
bp
 +
ssid_c⁄f
->
ssid_Àn
;

239 
i
++;

241 
ssid_c⁄f
 = ssid_c⁄f->
√xt
;

244 
buf
[
bp
++] = 
WEXT_PNO_SCAN_INTERVAL_SECTION
;

245 
	`os_¢¥ötf
(&
buf
[
bp
], 
WEXT_PNO_SCAN_INTERVAL_LENGTH
 + 1, "%x", 
WEXT_PNO_SCAN_INTERVAL
);

246 
bp
 +
WEXT_PNO_SCAN_INTERVAL_LENGTH
;

248 
buf
[
bp
++] = 
WEXT_PNO_REPEAT_SECTION
;

249 
	`os_¢¥ötf
(&
buf
[
bp
], 
WEXT_PNO_REPEAT_LENGTH
 + 1, "%x", 
WEXT_PNO_REPEAT
);

250 
bp
 +
WEXT_PNO_REPEAT_LENGTH
;

252 
buf
[
bp
++] = 
WEXT_PNO_MAX_REPEAT_SECTION
;

253 
	`os_¢¥ötf
(&
buf
[
bp
], 
WEXT_PNO_MAX_REPEAT_LENGTH
 + 1, "%x", 
WEXT_PNO_MAX_REPEAT
);

254 
bp
 +
WEXT_PNO_MAX_REPEAT_LENGTH
 + 1;

256 
	`os_mem£t
(&
iwr
, 0, (iwr));

257 
	`os_°∫˝y
(
iwr
.
i‰_«me
, 
drv
->
i‚ame
, 
IFNAMSIZ
);

258 
iwr
.
u
.
d©a
.
poöãr
 = 
buf
;

259 
iwr
.
u
.
d©a
.
Àngth
 = 
bp
;

261 
ªt
 = 
	`io˘l
(
drv
->
io˘l_sock
, 
SIOCSIWPRIV
, &
iwr
);

263 i‡(
ªt
 < 0) {

264 
	`w∑_¥ötf
(
MSG_ERROR
, "io˘l[SIOCSIWPRIV] (≤o£tup): %d", 
ªt
);

265 
drv
->
îr‹s
++;

266 i‡(
drv
->
îr‹s
 > 
DRV_NUMBER_SEQUENTIAL_ERRORS
) {

267 
drv
->
îr‹s
 = 0;

268 
	`w∑_msg
(
drv
->
˘x
, 
MSG_INFO
, 
WPA_EVENT_DRIVER_STATE
 "HANGED");

271 
drv
->
îr‹s
 = 0;

273  
ªt
;

275 
	}
}

277 
	$w∑_drivî_wext_drivî_cmd
–*
¥iv
, *
cmd
, *
buf
, 
size_t
 
buf_Àn
 )

279 
w∑_drivî_wext_d©a
 *
drv
 = 
¥iv
;

280 
w∑_suµliˇ¡
 *
w∑_s
 = (w∑_suµliˇ¡ *)(
drv
->
˘x
);

281 
iwªq
 
iwr
;

282 
ªt
 = 0, 
Êags
;

284 
	`w∑_¥ötf
(
MSG_DEBUG
, "%†%†À¿%d", 
__func__
, 
cmd
, 
buf_Àn
);

286 i‡(!
drv
->
drivî_is_°¨ãd
 && (
	`os_°rˇ£cmp
(
cmd
, "START") != 0)) {

287 
	`w∑_¥ötf
(
MSG_ERROR
,"WEXT: DriverÇot initialized yet");

291 i‡(
	`os_°rˇ£cmp
(
cmd
, "RSSI-APPROX") == 0) {

292 
	`os_°∫˝y
(
cmd
, 
RSSI_CMD
, 
MAX_DRV_CMD_SIZE
);

293 } if–
	`os_°∫ˇ£cmp
(
cmd
, "SCAN-CHANNELS", 13) == 0 ) {

294 
no_of_ch™
;

296 
no_of_ch™
 = 
	`©oi
(
cmd
 + 13);

297 
	`os_¢¥ötf
(
cmd
, 
MAX_DRV_CMD_SIZE
, "COUNTRY %s",

298 
	`w∑_drivî_gë_cou¡ry_code
(
no_of_ch™
));

299 } i‡(
	`os_°rˇ£cmp
(
cmd
, "STOP") == 0) {

300 
	`löux_£t_iÁ˚_Êags
(
drv
->
io˘l_sock
, drv->
i‚ame
, 0);

301 } if–
	`os_°rˇ£cmp
(
cmd
, "RELOAD") == 0 ) {

302 
	`w∑_¥ötf
(
MSG_DEBUG
,"Reload command");

303 
	`w∑_msg
(
drv
->
˘x
, 
MSG_INFO
, 
WPA_EVENT_DRIVER_STATE
 "HANGED");

304  
ªt
;

305 } if–
	`os_°rˇ£cmp
(
cmd
, "BGSCAN-START") == 0 ) {

306 
ªt
 = 
	`w∑_drivî_£t_backgroundsˇn_∑øms
(
¥iv
);

307 i‡(
ªt
 < 0) {

308  
ªt
;

310 
	`os_°∫˝y
(
cmd
, "PNOFORCE 1", 
MAX_DRV_CMD_SIZE
);

311 
drv
->
bgsˇn_íabÀd
 = 1;

312 } if–
	`os_°rˇ£cmp
(
cmd
, "BGSCAN-STOP") == 0 ) {

313 
	`os_°∫˝y
(
cmd
, "PNOFORCE 0", 
MAX_DRV_CMD_SIZE
);

314 
drv
->
bgsˇn_íabÀd
 = 0;

317 
	`os_mem£t
(&
iwr
, 0, (iwr));

318 
	`os_°∫˝y
(
iwr
.
i‰_«me
, 
drv
->
i‚ame
, 
IFNAMSIZ
);

319 
	`os_mem˝y
(
buf
, 
cmd
, 
	`°æí
(cmd) + 1);

320 
iwr
.
u
.
d©a
.
poöãr
 = 
buf
;

321 
iwr
.
u
.
d©a
.
Àngth
 = 
buf_Àn
;

323 if–
	`os_°∫ˇ£cmp
(
cmd
, "CSCAN", 5) == 0 ) {

324 i‡(!
w∑_s
->
sˇ¬ög
 && ((w∑_s->
w∑_°©e
 <
WPA_SCANNING
) ||

325 (
w∑_s
->
w∑_°©e
 >
WPA_COMPLETED
))) {

326 
iwr
.
u
.
d©a
.
Àngth
 = 
	`w∑_drivî_wext_£t_csˇn_∑øms
(
buf
, 
buf_Àn
, 
cmd
);

328 
	`w∑_¥ötf
(
MSG_ERROR
, "Ongoing Scanáction...");

329  
ªt
;

333 
ªt
 = 
	`io˘l
(
drv
->
io˘l_sock
, 
SIOCSIWPRIV
, &
iwr
);

335 i‡(
ªt
 < 0) {

336 
	`w∑_¥ötf
(
MSG_ERROR
, "%†Áûed (%d): %s", 
__func__
, 
ªt
, 
cmd
);

337 
drv
->
îr‹s
++;

338 i‡(
drv
->
îr‹s
 > 
DRV_NUMBER_SEQUENTIAL_ERRORS
) {

339 
drv
->
îr‹s
 = 0;

340 
	`w∑_msg
(
drv
->
˘x
, 
MSG_INFO
, 
WPA_EVENT_DRIVER_STATE
 "HANGED");

343 
drv
->
îr‹s
 = 0;

344 
ªt
 = 0;

345 i‡((
	`os_°rˇ£cmp
(
cmd
, 
RSSI_CMD
) == 0) ||

346 (
	`os_°rˇ£cmp
(
cmd
, 
LINKSPEED_CMD
) == 0) ||

347 (
	`os_°rˇ£cmp
(
cmd
, "MACADDR") == 0) ||

348 (
	`os_°rˇ£cmp
(
cmd
, "GETPOWER") == 0) ||

349 (
	`os_°rˇ£cmp
(
cmd
, "GETBAND") == 0)) {

350 
ªt
 = 
	`°æí
(
buf
);

351 } i‡(
	`os_°rˇ£cmp
(
cmd
, "START") == 0) {

352 
drv
->
drivî_is_°¨ãd
 = 
TRUE
;

353 
	`löux_£t_iÁ˚_Êags
(
drv
->
io˘l_sock
, drv->
i‚ame
, 1);

356 } i‡(
	`os_°rˇ£cmp
(
cmd
, "STOP") == 0) {

357 
drv
->
drivî_is_°¨ãd
 = 
FALSE
;

359 } i‡(
	`os_°∫ˇ£cmp
(
cmd
, "CSCAN", 5) == 0) {

360 
	`w∑_drivî_wext_£t_sˇn_timeout
(
¥iv
);

361 
	`w∑_suµliˇ¡_nŸify_sˇ¬ög
(
w∑_s
, 1);

363 
	`w∑_¥ötf
(
MSG_DEBUG
, "%†%†À¿%d, %d", 
__func__
, 
buf
, 
ªt
, 
	`°æí
(buf));

365  
ªt
;

366 
	}
}

368 
	$w∑_drivî_sig«l_pﬁl
(*
¥iv
, 
w∑_sig«l_öfo
 *
si
)

370 
buf
[
MAX_DRV_CMD_SIZE
];

371 
w∑_drivî_wext_d©a
 *
drv
 = 
¥iv
;

372 *
¥ssi
;

373 
ªs
;

375 
	`os_mem£t
(
si
, 0, (*si));

376 
ªs
 = 
	`w∑_drivî_wext_drivî_cmd
(
¥iv
, 
RSSI_CMD
, 
buf
, (buf));

378 i‡(
ªs
 < 0)

379  
ªs
;

380 
¥ssi
 = 
	`°rˇ£°r
(
buf
, 
RSSI_CMD
);

381 i‡(!
¥ssi
)

383 
si
->
cuºít_sig«l
 = 
	`©oi
(
¥ssi
 + 
	`°æí
(
RSSI_CMD
) + 1);

385 
ªs
 = 
	`w∑_drivî_wext_drivî_cmd
(
¥iv
, 
LINKSPEED_CMD
, 
buf
, (buf));

387 i‡(
ªs
 < 0)

388  
ªs
;

389 
si
->
cuºít_txøã
 = 
	`©oi
(
buf
 + 
	`°æí
(
LINKSPEED_CMD
) + 1) * 1000;

392 
	}
}

	@wpa_supplicant_8_lib/driver_cmd_wext.h

12 #i‚de‡
DRIVER_CMD_WEXT_H


13 
	#DRIVER_CMD_WEXT_H


	)

15 
	#WEXT_NUMBER_SCAN_CHANNELS_FCC
 11

	)

16 
	#WEXT_NUMBER_SCAN_CHANNELS_ETSI
 13

	)

17 
	#WEXT_NUMBER_SCAN_CHANNELS_MKK1
 14

	)

19 
	#WPA_DRIVER_WEXT_WAIT_US
 400000

	)

20 
	#WEXT_CSCAN_AMOUNT
 9

	)

21 
	#WEXT_CSCAN_BUF_LEN
 360

	)

22 
	#WEXT_CSCAN_HEADER
 "CSCAN S\x01\x00\x00S\x00"

	)

23 
	#WEXT_CSCAN_HEADER_SIZE
 12

	)

24 
	#WEXT_CSCAN_SSID_SECTION
 'S'

	)

25 
	#WEXT_CSCAN_CHANNEL_SECTION
 'C'

	)

26 
	#WEXT_CSCAN_NPROBE_SECTION
 'N'

	)

27 
	#WEXT_CSCAN_ACTV_DWELL_SECTION
 'A'

	)

28 
	#WEXT_CSCAN_PASV_DWELL_SECTION
 'P'

	)

29 
	#WEXT_CSCAN_HOME_DWELL_SECTION
 'H'

	)

30 
	#WEXT_CSCAN_TYPE_SECTION
 'T'

	)

31 
	#WEXT_CSCAN_TYPE_DEFAULT
 0

	)

32 
	#WEXT_CSCAN_TYPE_PASSIVE
 1

	)

33 
	#WEXT_CSCAN_PASV_DWELL_TIME
 130

	)

34 
	#WEXT_CSCAN_PASV_DWELL_TIME_DEF
 250

	)

35 
	#WEXT_CSCAN_PASV_DWELL_TIME_MAX
 3000

	)

36 
	#WEXT_CSCAN_HOME_DWELL_TIME
 130

	)

	@wpa_supplicant_8_lib/driver_nl80211.h

19 #i‚de‡
_DRIVER_NL80211_H_


20 
	#_DRIVER_NL80211_H_


	)

22 
	~"ö˛udes.h
"

23 
	~<sys/io˘l.h
>

24 
	~<sys/ty≥s.h
>

25 
	~<sys/°©.h
>

26 
	~<f˙é.h
>

27 
	~<√t/if.h
>

28 
	~<√éök/gíl/gíl.h
>

29 
	~<√éök/gíl/Ámûy.h
>

30 
	~<√éök/gíl/˘æ.h
>

31 
	~<löux/π√éök.h
>

32 
	~<√çackë/∑ckë.h
>

33 
	~<löux/fûãr.h
>

34 
	~"∆80211_c›y.h
"

36 
	~"comm⁄.h
"

37 
	~"ño›.h
"

38 
	~"utûs/li°.h
"

39 
	~"comm⁄/õì802_11_defs.h
"

40 
	~"√éök.h
"

41 
	~"löux_io˘l.h
"

42 
	~"ødiŸ≠.h
"

43 
	~"ødiŸ≠_ôî.h
"

44 
	~"rfkûl.h
"

45 
	~"drivî.h
"

47 #ifde‡
CONFIG_LIBNL20


49 
	#∆_h™dÀ
 
∆_sock


	)

50 
	#∆80211_h™dÀ_Æloc
 
∆_sockë_Æloc_cb


	)

51 
	#∆80211_h™dÀ_de°roy
 
∆_sockë_‰ì


	)

54 #i‚de‡
IFF_LOWER_UP


55 
	#IFF_LOWER_UP
 0x10000

	)

57 #i‚de‡
IFF_DORMANT


58 
	#IFF_DORMANT
 0x20000

	)

61 #i‚de‡
IF_OPER_DORMANT


62 
	#IF_OPER_DORMANT
 5

	)

64 #i‚de‡
IF_OPER_UP


65 
	#IF_OPER_UP
 6

	)

68 
	s∆80211_globÆ
 {

69 
dl_li°
 
	möãrÁ˚s
;

72 
	si802_bss
 {

73 
w∑_drivî_∆80211_d©a
 *
	mdrv
;

74 
i802_bss
 *
	m√xt
;

75 
	mifödex
;

76 
	mi‚ame
[
IFNAMSIZ
 + 1];

77 
	mb∫ame
[
IFNAMSIZ
];

78 
	mbóc⁄_£t
:1;

79 
	madded_if_öto_bridge
:1;

80 
	madded_bridge
:1;

83 
	sw∑_drivî_∆80211_d©a
 {

84 
∆80211_globÆ
 *
	mglobÆ
;

85 
dl_li°
 
	mli°
;

86 
u8
 
	maddr
[
ETH_ALEN
];

87 
	mphy«me
[32];

88 *
	m˘x
;

89 
√éök_d©a
 *
	m√éök
;

90 
	mio˘l_sock
;

91 
	mifödex
;

92 
	mif_ªmoved
;

93 
	mif_dißbÀd
;

94 
rfkûl_d©a
 *
	mrfkûl
;

95 
w∑_drivî_ˇ∑
 
	mˇ∑
;

96 
	mhas_ˇ∑bûôy
;

98 
	m›î°©e
;

100 
	msˇn_com∂ëe_evíts
;

102 
∆_h™dÀ
 *
	m∆_h™dÀ
;

103 
∆_h™dÀ
 *
	m∆_h™dÀ_evít
;

104 
∆_h™dÀ
 *
	m∆_h™dÀ_¥eq
;

105 
∆_ˇche
 *
	m∆_ˇche
;

106 
∆_ˇche
 *
	m∆_ˇche_evít
;

107 
∆_ˇche
 *
	m∆_ˇche_¥eq
;

108 
∆_cb
 *
	m∆_cb
;

109 
gíl_Ámûy
 *
	m∆80211
;

111 
u8
 
	mauth_bssid
[
ETH_ALEN
];

112 
u8
 
	mbssid
[
ETH_ALEN
];

113 
	massocüãd
;

114 
u8
 
	mssid
[32];

115 
size_t
 
	mssid_Àn
;

116 
	m∆mode
;

117 
	m≠_sˇn_as_°©i⁄
;

118 
	massoc_‰eq
;

120 
	mm⁄ô‹_sock
;

121 
	mm⁄ô‹_ifidx
;

122 
	mno_m⁄ô‹_iÁ˚_ˇ∑b
;

123 
	mdißbÀ_11b_øãs
;

125 
	m≥ndög_ªmaö_⁄_ch™
:1;

127 
u64
 
	mªmaö_⁄_ch™_cookõ
;

128 
u64
 
	m£nd_a˘i⁄_cookõ
;

130 
	mœ°_mgmt_‰eq
;

131 
	m≠_›î_‰eq
;

133 
w∑_drivî_sˇn_fûãr
 *
	mfûãr_ssids
;

134 
size_t
 
	mnum_fûãr_ssids
;

136 
i802_bss
 
	mfú°_bss
;

138 #ifde‡
HOSTAPD


139 
	mópﬁ_sock
;

141 
	mdeÁu…_if_ödi˚s
[16];

142 *
	mif_ödi˚s
;

143 
	mnum_if_ödi˚s
;

145 
	mœ°_‰eq
;

146 
	mœ°_‰eq_ht
;

	@/usr/include/arpa/inet.h

19 #i‚de‡
_ARPA_INET_H


20 
	#_ARPA_INET_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<√töë/ö.h
>

26 #i‚de‡
__sockÀn_t_deföed


27 
__sockÀn_t
 
	tsockÀn_t
;

28 
	#__sockÀn_t_deföed


	)

31 
__BEGIN_DECLS


35 
ö_addr_t
 
	$öë_addr
 (
__c⁄°
 *
__˝
Ë
__THROW
;

38 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

42 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

43 
__THROW
;

46 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

50 
ö_addr_t
 
	$öë_√tw‹k
 (
__c⁄°
 *
__˝
Ë
__THROW
;

54 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

59 
	$öë_±⁄
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

60 *
__ª°ri˘
 
__buf
Ë
__THROW
;

65 
__c⁄°
 *
	$öë_¡›
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

66 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

67 
__THROW
;

71 #ifde‡
__USE_MISC


74 
	$öë_©⁄
 (
__c⁄°
 *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

78 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

83 *
	$öë_√t_¡›
 (
__af
, 
__c⁄°
 *
__˝
, 
__bôs
,

84 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

89 
	$öë_√t_±⁄
 (
__af
, 
__c⁄°
 *
__˝
,

90 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

95 
	$öë_nßp_addr
 (
__c⁄°
 *
__˝
,

96 *
__buf
, 
__Àn
Ë
__THROW
;

100 *
	$öë_nßp_¡ﬂ
 (
__Àn
, 
__c⁄°
 *
__˝
,

101 *
__buf
Ë
__THROW
;

104 
__END_DECLS


	@/usr/include/assert.h

24 #ifdef 
_ASSERT_H


26 #unde‡
_ASSERT_H


27 #unde‡
as£π


28 #unde‡
__ASSERT_VOID_CAST


30 #ifdef 
__USE_GNU


31 #unde‡
as£π_≥º‹


36 
	#_ASSERT_H
 1

	)

37 
	~<„©uªs.h
>

39 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

40 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

42 
	#__ASSERT_VOID_CAST
 ()

	)

50 #ifdef 
NDEBUG


52 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

60 #ifdef 
__USE_GNU


61 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

66 #i‚de‡
_ASSERT_H_DECLS


67 
	#_ASSERT_H_DECLS


	)

68 
__BEGIN_DECLS


71 
	$__as£π_Áû
 (
__c⁄°
 *
__as£πi⁄
, __c⁄° *
__fûe
,

72 
__löe
, 
__c⁄°
 *
__fun˘i⁄
)

73 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

76 
	$__as£π_≥º‹_Áû
 (
__î∫um
, 
__c⁄°
 *
__fûe
,

77 
__löe
,

78 
__c⁄°
 *
__fun˘i⁄
)

79 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

84 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

85 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

88 
__END_DECLS


91 
	#as£π
(
ex¥
) \

92 ((
ex¥
) \

93 ? 
	`__ASSERT_VOID_CAST
 (0) \

94 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

96 #ifdef 
__USE_GNU


97 
	#as£π_≥º‹
(
î∫um
) \

98 (!(
î∫um
) \

99 ? 
	`__ASSERT_VOID_CAST
 (0) \

100 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

108 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

109 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

111 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

112 
	#__ASSERT_FUNCTION
 
__func__


	)

114 
	#__ASSERT_FUNCTION
 ((
__c⁄°
 *Ë0)

	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

92 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

94 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__ex˘y≥
 (
iß um
);

103 
	`__ex˘y≥
 (
ißÕha
);

104 
	`__ex˘y≥
 (
is˙ål
);

105 
	`__ex˘y≥
 (
isdigô
);

106 
	`__ex˘y≥
 (
i¶owî
);

107 
	`__ex˘y≥
 (
isgøph
);

108 
	`__ex˘y≥
 (
i•röt
);

109 
	`__ex˘y≥
 (
i•un˘
);

110 
	`__ex˘y≥
 (
is•a˚
);

111 
	`__ex˘y≥
 (
isuµî
);

112 
	`__ex˘y≥
 (
isxdigô
);

116 
	$tﬁowî
 (
__c
Ë
__THROW
;

119 
	$touµî
 (
__c
Ë
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__ex˘y≥
 (
isbœnk
);

130 
__END_NAMESPACE_C99


133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE
 && !deföed 
__˝lu•lus


173 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

174 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

175 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

176 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

177 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

178 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

179 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

180 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

181 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

182 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

183 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

185 #ifde‡
__USE_ISOC99


186 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

189 #ifde‡
__USE_EXTERN_INLINES


190 
__exã∫_ölöe
 

191 
__NTH
 (
	$tﬁowî
 (
__c
))

193  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

194 
	}
}

196 
__exã∫_ölöe
 

197 
__NTH
 (
	$touµî
 (
__c
))

199  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

200 
	}
}

203 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


204 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

205 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

208 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


209 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

210 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

212 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

213 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

219 #ifde‡
__USE_XOPEN2K8


233 
	~<xloˇÀ.h
>

237 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

238 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

240 
	#__ex˘y≥_l
(
«me
) \

241 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

247 
__ex˘y≥_l
 (
iß um_l
);

248 
__ex˘y≥_l
 (
ißÕha_l
);

249 
__ex˘y≥_l
 (
is˙ål_l
);

250 
__ex˘y≥_l
 (
isdigô_l
);

251 
__ex˘y≥_l
 (
i¶owî_l
);

252 
__ex˘y≥_l
 (
isgøph_l
);

253 
__ex˘y≥_l
 (
i•röt_l
);

254 
__ex˘y≥_l
 (
i•un˘_l
);

255 
__ex˘y≥_l
 (
is•a˚_l
);

256 
__ex˘y≥_l
 (
isuµî_l
);

257 
__ex˘y≥_l
 (
isxdigô_l
);

259 
__ex˘y≥_l
 (
isbœnk_l
);

263 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

264 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

267 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

270 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


271 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

272 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

273 
	#__touµî_l
(
c
, 
loˇÀ
) \

274 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

275 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

276 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

280 #i‚de‡
__NO_CTYPE


281 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

282 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

283 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

284 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

285 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

286 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

287 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

288 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

289 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

290 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

291 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

293 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

295 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


296 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

297 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

300 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

301 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

302 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

303 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

304 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

305 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

306 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

307 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

308 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

309 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

310 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

312 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

314 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


315 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

316 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/error.h

20 #i‚de‡
_ERROR_H


21 
	#_ERROR_H
 1

	)

23 
	~<„©uªs.h
>

26 
__BEGIN_DECLS


32 
	$îr‹
 (
__°©us
, 
__î∫um
, 
__c⁄°
 *
__f‹m©
, ...)

33 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

35 
	$îr‹_©_löe
 (
__°©us
, 
__î∫um
, 
__c⁄°
 *
__‚ame
,

36 
__löío
, 
__c⁄°
 *
__f‹m©
, ...)

37 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 5, 6)));

42 (*
îr‹_¥öt_¥og«me
) ();

45 
îr‹_mesßge_cou¡
;

49 
îr‹_⁄e_≥r_löe
;

52 #i‡
deföed
 
__exã∫_Æways_ölöe
 && deföed 
__va_¨g_∑ck


53 
	~<bôs/îr‹.h
>

56 
__END_DECLS


	@/usr/include/fcntl.h

24 #i‚def 
_FCNTL_H


25 
	#_FCNTL_H
 1

	)

27 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/f˙é.h
>

37 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


38 
	~<bôs/ty≥s.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

41 
	~<bôs/°©.h
>

43 
	#S_IFMT
 
__S_IFMT


	)

44 
	#S_IFDIR
 
__S_IFDIR


	)

45 
	#S_IFCHR
 
__S_IFCHR


	)

46 
	#S_IFBLK
 
__S_IFBLK


	)

47 
	#S_IFREG
 
__S_IFREG


	)

48 #ifde‡
__S_IFIFO


49 
	#S_IFIFO
 
__S_IFIFO


	)

51 #ifde‡
__S_IFLNK


52 
	#S_IFLNK
 
__S_IFLNK


	)

54 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


55 
	#S_IFSOCK
 
__S_IFSOCK


	)

60 
	#S_ISUID
 
__S_ISUID


	)

61 
	#S_ISGID
 
__S_ISGID


	)

63 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


65 
	#S_ISVTX
 
__S_ISVTX


	)

68 
	#S_IRUSR
 
__S_IREAD


	)

69 
	#S_IWUSR
 
__S_IWRITE


	)

70 
	#S_IXUSR
 
__S_IEXEC


	)

72 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

74 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

75 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

76 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

78 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

80 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

81 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

82 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

84 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

87 #ifdef 
__USE_MISC


88 #i‚de‡
R_OK


91 
	#R_OK
 4

	)

92 
	#W_OK
 2

	)

93 
	#X_OK
 1

	)

94 
	#F_OK
 0

	)

99 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


100 
	#SEEK_SET
 0

	)

101 
	#SEEK_CUR
 1

	)

102 
	#SEEK_END
 2

	)

110 
f˙é
 (
__fd
, 
__cmd
, ...);

118 #i‚de‡
__USE_FILE_OFFSET64


119 
	$›í
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

121 #ifde‡
__REDIRECT


122 
	`__REDIRECT
 (
›í
, (
__c⁄°
 *
__fûe
, 
__oÊag
, ...), 
›í64
)

123 
	`__n⁄nuŒ
 ((1));

125 
	#›í
 
›í64


	)

128 #ifde‡
__USE_LARGEFILE64


129 
	$›í64
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

132 #ifde‡
__USE_ATFILE


142 #i‚de‡
__USE_FILE_OFFSET64


143 
	$›í©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

144 
	`__n⁄nuŒ
 ((2));

146 #ifde‡
__REDIRECT


147 
	`__REDIRECT
 (
›í©
, (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
,

148 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

150 
	#›í©
 
›í©64


	)

153 #ifde‡
__USE_LARGEFILE64


154 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

155 
	`__n⁄nuŒ
 ((2));

164 #i‚de‡
__USE_FILE_OFFSET64


165 
	$¸ót
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

167 #ifde‡
__REDIRECT


168 
	`__REDIRECT
 (
¸ót
, (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
),

169 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

171 
	#¸ót
 
¸ót64


	)

174 #ifde‡
__USE_LARGEFILE64


175 
	$¸ót64
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

178 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

179 && !
deföed
 
__USE_POSIX
))

188 
	#F_ULOCK
 0

	)

189 
	#F_LOCK
 1

	)

190 
	#F_TLOCK
 2

	)

191 
	#F_TEST
 3

	)

193 #i‚de‡
__USE_FILE_OFFSET64


194 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

196 #ifde‡
__REDIRECT


197 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

199 
	#lockf
 
lockf64


	)

202 #ifde‡
__USE_LARGEFILE64


203 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

207 #ifde‡
__USE_XOPEN2K


210 #i‚de‡
__USE_FILE_OFFSET64


211 
	$posix_Ádvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
,

212 
__advi£
Ë
__THROW
;

214 #ifde‡
__REDIRECT_NTH


215 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

216 
__off64_t
 
__Àn
, 
__advi£
),

217 
posix_Ádvi£64
);

219 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

222 #ifde‡
__USE_LARGEFILE64


223 
	$posix_Ádvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
,

224 
__advi£
Ë
__THROW
;

232 #i‚de‡
__USE_FILE_OFFSET64


233 
	`posix_ÁŒoˇã
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
);

235 #ifde‡
__REDIRECT


236 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

237 
__off64_t
 
__Àn
),

238 
posix_ÁŒoˇã64
);

240 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

243 #ifde‡
__USE_LARGEFILE64


244 
	`posix_ÁŒoˇã64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
);

250 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
 \

251 && 
deföed
 
__va_¨g_∑ck_Àn


252 
	~<bôs/f˙é2.h
>

255 
__END_DECLS


	@/usr/include/linux/ethtool.h

13 #i‚de‡
_LINUX_ETHTOOL_H


14 
	#_LINUX_ETHTOOL_H


	)

16 
	~<löux/ty≥s.h
>

19 
	sëhtoﬁ_cmd
 {

20 
__u32
 
	mcmd
;

21 
__u32
 
	msuµ‹ãd
;

22 
__u32
 
	madvîtisög
;

23 
__u16
 
	m•ìd
;

24 
__u8
 
	mdu∂ex
;

25 
__u8
 
	mp‹t
;

26 
__u8
 
	mphy_addªss
;

27 
__u8
 
	må™s˚ivî
;

28 
__u8
 
	maut⁄eg
;

29 
__u8
 
	mmdio_suµ‹t
;

30 
__u32
 
	mmaxtxpkt
;

31 
__u32
 
	mmaxrxpkt
;

32 
__u16
 
	m•ìd_hi
;

33 
__u8
 
	mëh_ç_mdix
;

34 
__u8
 
	mª£rved2
;

35 
__u32
 
	mÕ_advîtisög
;

36 
__u32
 
	mª£rved
[2];

39 
__ölöe__
 
	$ëhtoﬁ_cmd_•ìd_£t
(
ëhtoﬁ_cmd
 *
ï
,

40 
__u32
 
•ìd
)

43 
ï
->
•ìd
 = (
__u16
)speed;

44 
ï
->
•ìd_hi
 = (
__u16
)(
•ìd
 >> 16);

45 
	}
}

47 
__ölöe__
 
__u32
 
	$ëhtoﬁ_cmd_•ìd
(
ëhtoﬁ_cmd
 *
ï
)

49  (
ï
->
•ìd_hi
 << 16Ë|Ép->
•ìd
;

50 
	}
}

52 
	#ETHTOOL_FWVERS_LEN
 32

	)

53 
	#ETHTOOL_BUSINFO_LEN
 32

	)

55 
	sëhtoﬁ_drvöfo
 {

56 
__u32
 
	mcmd
;

57 
	mdrivî
[32];

58 
	mvîsi⁄
[32];

59 
	mfw_vîsi⁄
[
ETHTOOL_FWVERS_LEN
];

60 
	mbus_öfo
[
ETHTOOL_BUSINFO_LEN
];

62 
	mª£rved1
[32];

63 
	mª£rved2
[12];

71 
__u32
 
	mn_¥iv_Êags
;

72 
__u32
 
	mn_°©s
;

73 
__u32
 
	mã°öfo_Àn
;

74 
__u32
 
	mìdump_Àn
;

75 
__u32
 
	mªgdump_Àn
;

78 
	#SOPASS_MAX
 6

	)

80 
	sëhtoﬁ_wﬁöfo
 {

81 
__u32
 
	mcmd
;

82 
__u32
 
	msuµ‹ãd
;

83 
__u32
 
	mwﬁ›ts
;

84 
__u8
 
	ms›ass
[
SOPASS_MAX
];

88 
	sëhtoﬁ_vÆue
 {

89 
__u32
 
	mcmd
;

90 
__u32
 
	md©a
;

94 
	sëhtoﬁ_ªgs
 {

95 
__u32
 
	mcmd
;

96 
__u32
 
	mvîsi⁄
;

97 
__u32
 
	mÀn
;

98 
__u8
 
	md©a
[0];

102 
	sëhtoﬁ_ì¥om
 {

103 
__u32
 
	mcmd
;

104 
__u32
 
	mmagic
;

105 
__u32
 
	moff£t
;

106 
__u32
 
	mÀn
;

107 
__u8
 
	md©a
[0];

111 
	sëhtoﬁ_cﬂÀs˚
 {

112 
__u32
 
	mcmd
;

118 
__u32
 
	mrx_cﬂÀs˚_u£cs
;

126 
__u32
 
	mrx_max_cﬂÀs˚d_‰ames
;

133 
__u32
 
	mrx_cﬂÀs˚_u£cs_úq
;

134 
__u32
 
	mrx_max_cﬂÀs˚d_‰ames_úq
;

140 
__u32
 
	mtx_cﬂÀs˚_u£cs
;

148 
__u32
 
	mtx_max_cﬂÀs˚d_‰ames
;

155 
__u32
 
	mtx_cﬂÀs˚_u£cs_úq
;

156 
__u32
 
	mtx_max_cﬂÀs˚d_‰ames_úq
;

163 
__u32
 
	m°©s_block_cﬂÀs˚_u£cs
;

172 
__u32
 
	mu£_ad≠tive_rx_cﬂÀs˚
;

173 
__u32
 
	mu£_ad≠tive_tx_cﬂÀs˚
;

179 
__u32
 
	mpkt_øã_low
;

180 
__u32
 
	mrx_cﬂÀs˚_u£cs_low
;

181 
__u32
 
	mrx_max_cﬂÀs˚d_‰ames_low
;

182 
__u32
 
	mtx_cﬂÀs˚_u£cs_low
;

183 
__u32
 
	mtx_max_cﬂÀs˚d_‰ames_low
;

194 
__u32
 
	mpkt_øã_high
;

195 
__u32
 
	mrx_cﬂÀs˚_u£cs_high
;

196 
__u32
 
	mrx_max_cﬂÀs˚d_‰ames_high
;

197 
__u32
 
	mtx_cﬂÀs˚_u£cs_high
;

198 
__u32
 
	mtx_max_cﬂÀs˚d_‰ames_high
;

203 
__u32
 
	møã_ßm∂e_öãrvÆ
;

207 
	sëhtoﬁ_rög∑øm
 {

208 
__u32
 
	mcmd
;

214 
__u32
 
	mrx_max_≥ndög
;

215 
__u32
 
	mrx_möi_max_≥ndög
;

216 
__u32
 
	mrx_jumbo_max_≥ndög
;

217 
__u32
 
	mtx_max_≥ndög
;

222 
__u32
 
	mrx_≥ndög
;

223 
__u32
 
	mrx_möi_≥ndög
;

224 
__u32
 
	mrx_jumbo_≥ndög
;

225 
__u32
 
	mtx_≥ndög
;

229 
	sëhtoﬁ_∑u£∑øm
 {

230 
__u32
 
	mcmd
;

242 
__u32
 
	maut⁄eg
;

243 
__u32
 
	mrx_∑u£
;

244 
__u32
 
	mtx_∑u£
;

247 
	#ETH_GSTRING_LEN
 32

	)

248 
	eëhtoﬁ_°rög£t
 {

249 
	mETH_SS_TEST
 = 0,

250 
	mETH_SS_STATS
,

251 
	mETH_SS_PRIV_FLAGS
,

252 
	mETH_SS_NTUPLE_FILTERS
,

256 
	sëhtoﬁ_g°rögs
 {

257 
__u32
 
	mcmd
;

258 
__u32
 
	m°rög_£t
;

259 
__u32
 
	mÀn
;

260 
__u8
 
	md©a
[0];

263 
	sëhtoﬁ_s£t_öfo
 {

264 
__u32
 
	mcmd
;

265 
__u32
 
	mª£rved
;

266 
__u64
 
	ms£t_mask
;

268 
__u32
 
	md©a
[0];

274 
	eëhtoﬁ_ã°_Êags
 {

275 
	mETH_TEST_FL_OFFLINE
 = (1 << 0),

276 
	mETH_TEST_FL_FAILED
 = (1 << 1),

280 
	sëhtoﬁ_ã°
 {

281 
__u32
 
	mcmd
;

282 
__u32
 
	mÊags
;

283 
__u32
 
	mª£rved
;

284 
__u32
 
	mÀn
;

285 
__u64
 
	md©a
[0];

289 
	sëhtoﬁ_°©s
 {

290 
__u32
 
	mcmd
;

291 
__u32
 
	mn_°©s
;

292 
__u64
 
	md©a
[0];

295 
	sëhtoﬁ_≥rm_addr
 {

296 
__u32
 
	mcmd
;

297 
__u32
 
	msize
;

298 
__u8
 
	md©a
[0];

310 
	eëhtoﬁ_Êags
 {

311 
	mETH_FLAG_LRO
 = (1 << 15),

312 
	mETH_FLAG_NTUPLE
 = (1 << 27),

313 
	mETH_FLAG_RXHASH
 = (1 << 28),

321 
	sëhtoﬁ_t˝ù4_•ec
 {

322 
__be32
 
	mù4§c
;

323 
__be32
 
	mù4d°
;

324 
__be16
 
	mp§c
;

325 
__be16
 
	mpd°
;

326 
__u8
 
	mtos
;

329 
	sëhtoﬁ_ah_e•ù4_•ec
 {

330 
__be32
 
	mù4§c
;

331 
__be32
 
	mù4d°
;

332 
__be32
 
	m•i
;

333 
__u8
 
	mtos
;

336 
	sëhtoﬁ_øwù4_•ec
 {

337 
__be32
 
	mù4§c
;

338 
__be32
 
	mù4d°
;

339 
__u8
 
	mhd©a
[64];

342 
	sëhtoﬁ_ëhî_•ec
 {

343 
__be16
 
	mëhî_ty≥
;

344 
__u8
 
	m‰ame_size
;

345 
__u8
 
	me‰ame
[16];

348 
	#ETH_RX_NFC_IP4
 1

	)

349 
	#ETH_RX_NFC_IP6
 2

	)

351 
	sëhtoﬁ_u§ù4_•ec
 {

352 
__be32
 
	mù4§c
;

353 
__be32
 
	mù4d°
;

354 
__be32
 
	ml4_4_byãs
;

355 
__u8
 
	mtos
;

356 
__u8
 
	mù_vî
;

357 
__u8
 
	m¥Ÿo
;

360 
	sëhtoﬁ_rx_Êow_•ec
 {

361 
__u32
 
	mÊow_ty≥
;

363 
ëhtoﬁ_t˝ù4_•ec
 
	mt˝_ù4_•ec
;

364 
ëhtoﬁ_t˝ù4_•ec
 
	mudp_ù4_•ec
;

365 
ëhtoﬁ_t˝ù4_•ec
 
	ms˘p_ù4_•ec
;

366 
ëhtoﬁ_ah_e•ù4_•ec
 
	mah_ù4_•ec
;

367 
ëhtoﬁ_ah_e•ù4_•ec
 
	me•_ù4_•ec
;

368 
ëhtoﬁ_øwù4_•ec
 
	møw_ù4_•ec
;

369 
ëhtoﬁ_ëhî_•ec
 
	mëhî_•ec
;

370 
ëhtoﬁ_u§ù4_•ec
 
	mu§_ù4_•ec
;

371 
__u8
 
	mhd©a
[64];

372 } 
	mh_u
, 
	mm_u
;

373 
__u64
 
	mrög_cookõ
;

374 
__u32
 
	mloˇti⁄
;

377 
	sëhtoﬁ_rxnfc
 {

378 
__u32
 
	mcmd
;

379 
__u32
 
	mÊow_ty≥
;

381 
__u64
 
	md©a
;

384 
ëhtoﬁ_rx_Êow_•ec
 
	mfs
;

385 
__u32
 
	mruÀ_˙t
;

386 
__u32
 
	mruÀ_locs
[0];

389 
	sëhtoﬁ_rx_¡u∂e_Êow_•ec
 {

390 
__u32
 
	mÊow_ty≥
;

392 
ëhtoﬁ_t˝ù4_•ec
 
	mt˝_ù4_•ec
;

393 
ëhtoﬁ_t˝ù4_•ec
 
	mudp_ù4_•ec
;

394 
ëhtoﬁ_t˝ù4_•ec
 
	ms˘p_ù4_•ec
;

395 
ëhtoﬁ_ah_e•ù4_•ec
 
	mah_ù4_•ec
;

396 
ëhtoﬁ_ah_e•ù4_•ec
 
	me•_ù4_•ec
;

397 
ëhtoﬁ_øwù4_•ec
 
	møw_ù4_•ec
;

398 
ëhtoﬁ_ëhî_•ec
 
	mëhî_•ec
;

399 
ëhtoﬁ_u§ù4_•ec
 
	mu§_ù4_•ec
;

400 
__u8
 
	mhd©a
[64];

401 } 
	mh_u
, 
	mm_u
;

403 
__u16
 
	mvœn_èg
;

404 
__u16
 
	mvœn_èg_mask
;

405 
__u64
 
	md©a
;

406 
__u64
 
	md©a_mask
;

409 
__s32
 
	ma˘i⁄
;

410 
	#ETHTOOL_RXNTUPLE_ACTION_DROP
 -1

	)

413 
	sëhtoﬁ_rx_¡u∂e
 {

414 
__u32
 
	mcmd
;

415 
ëhtoﬁ_rx_¡u∂e_Êow_•ec
 
	mfs
;

418 
	#ETHTOOL_FLASH_MAX_FILENAME
 128

	)

419 
	eëhtoﬁ_Êash_›_ty≥
 {

420 
	mETHTOOL_FLASH_ALL_REGIONS
 = 0,

424 
	sëhtoﬁ_Êash
 {

425 
__u32
 
	mcmd
;

426 
__u32
 
	mªgi⁄
;

427 
	md©a
[
ETHTOOL_FLASH_MAX_FILENAME
];

432 
	#ETHTOOL_GSET
 0x00000001

	)

433 
	#ETHTOOL_SSET
 0x00000002

	)

434 
	#ETHTOOL_GDRVINFO
 0x00000003

	)

435 
	#ETHTOOL_GREGS
 0x00000004

	)

436 
	#ETHTOOL_GWOL
 0x00000005

	)

437 
	#ETHTOOL_SWOL
 0x00000006

	)

438 
	#ETHTOOL_GMSGLVL
 0x00000007

	)

439 
	#ETHTOOL_SMSGLVL
 0x00000008

	)

440 
	#ETHTOOL_NWAY_RST
 0x00000009

	)

441 
	#ETHTOOL_GLINK
 0x0000000®

	)

442 
	#ETHTOOL_GEEPROM
 0x0000000b

	)

443 
	#ETHTOOL_SEEPROM
 0x0000000¯

	)

444 
	#ETHTOOL_GCOALESCE
 0x0000000ê

	)

445 
	#ETHTOOL_SCOALESCE
 0x0000000‡

	)

446 
	#ETHTOOL_GRINGPARAM
 0x00000010

	)

447 
	#ETHTOOL_SRINGPARAM
 0x00000011

	)

448 
	#ETHTOOL_GPAUSEPARAM
 0x00000012

	)

449 
	#ETHTOOL_SPAUSEPARAM
 0x00000013

	)

450 
	#ETHTOOL_GRXCSUM
 0x00000014

	)

451 
	#ETHTOOL_SRXCSUM
 0x00000015

	)

452 
	#ETHTOOL_GTXCSUM
 0x00000016

	)

453 
	#ETHTOOL_STXCSUM
 0x00000017

	)

454 
	#ETHTOOL_GSG
 0x00000018

	)

456 
	#ETHTOOL_SSG
 0x00000019

	)

458 
	#ETHTOOL_TEST
 0x0000001®

	)

459 
	#ETHTOOL_GSTRINGS
 0x0000001b

	)

460 
	#ETHTOOL_PHYS_ID
 0x0000001¯

	)

461 
	#ETHTOOL_GSTATS
 0x0000001d

	)

462 
	#ETHTOOL_GTSO
 0x0000001ê

	)

463 
	#ETHTOOL_STSO
 0x0000001‡

	)

464 
	#ETHTOOL_GPERMADDR
 0x00000020

	)

465 
	#ETHTOOL_GUFO
 0x00000021

	)

466 
	#ETHTOOL_SUFO
 0x00000022

	)

467 
	#ETHTOOL_GGSO
 0x00000023

	)

468 
	#ETHTOOL_SGSO
 0x00000024

	)

469 
	#ETHTOOL_GFLAGS
 0x00000025

	)

470 
	#ETHTOOL_SFLAGS
 0x00000026

	)

471 
	#ETHTOOL_GPFLAGS
 0x00000027

	)

472 
	#ETHTOOL_SPFLAGS
 0x00000028

	)

474 
	#ETHTOOL_GRXFH
 0x00000029

	)

475 
	#ETHTOOL_SRXFH
 0x0000002®

	)

476 
	#ETHTOOL_GGRO
 0x0000002b

	)

477 
	#ETHTOOL_SGRO
 0x0000002¯

	)

478 
	#ETHTOOL_GRXRINGS
 0x0000002d

	)

479 
	#ETHTOOL_GRXCLSRLCNT
 0x0000002ê

	)

480 
	#ETHTOOL_GRXCLSRULE
 0x0000002‡

	)

481 
	#ETHTOOL_GRXCLSRLALL
 0x00000030

	)

482 
	#ETHTOOL_SRXCLSRLDEL
 0x00000031

	)

483 
	#ETHTOOL_SRXCLSRLINS
 0x00000032

	)

484 
	#ETHTOOL_FLASHDEV
 0x00000033

	)

485 
	#ETHTOOL_RESET
 0x00000034

	)

486 
	#ETHTOOL_SRXNTUPLE
 0x00000035

	)

487 
	#ETHTOOL_GRXNTUPLE
 0x00000036

	)

488 
	#ETHTOOL_GSSET_INFO
 0x00000037

	)

491 
	#SPARC_ETH_GSET
 
ETHTOOL_GSET


	)

492 
	#SPARC_ETH_SSET
 
ETHTOOL_SSET


	)

495 
	#SUPPORTED_10ba£T_HÆf
 (1 << 0)

	)

496 
	#SUPPORTED_10ba£T_FuŒ
 (1 << 1)

	)

497 
	#SUPPORTED_100ba£T_HÆf
 (1 << 2)

	)

498 
	#SUPPORTED_100ba£T_FuŒ
 (1 << 3)

	)

499 
	#SUPPORTED_1000ba£T_HÆf
 (1 << 4)

	)

500 
	#SUPPORTED_1000ba£T_FuŒ
 (1 << 5)

	)

501 
	#SUPPORTED_Aut⁄eg
 (1 << 6)

	)

502 
	#SUPPORTED_TP
 (1 << 7)

	)

503 
	#SUPPORTED_AUI
 (1 << 8)

	)

504 
	#SUPPORTED_MII
 (1 << 9)

	)

505 
	#SUPPORTED_FIBRE
 (1 << 10)

	)

506 
	#SUPPORTED_BNC
 (1 << 11)

	)

507 
	#SUPPORTED_10000ba£T_FuŒ
 (1 << 12)

	)

508 
	#SUPPORTED_Pau£
 (1 << 13)

	)

509 
	#SUPPORTED_Asym_Pau£
 (1 << 14)

	)

510 
	#SUPPORTED_2500ba£X_FuŒ
 (1 << 15)

	)

511 
	#SUPPORTED_Back∂™e
 (1 << 16)

	)

512 
	#SUPPORTED_1000ba£KX_FuŒ
 (1 << 17)

	)

513 
	#SUPPORTED_10000ba£KX4_FuŒ
 (1 << 18)

	)

514 
	#SUPPORTED_10000ba£KR_FuŒ
 (1 << 19)

	)

515 
	#SUPPORTED_10000ba£R_FEC
 (1 << 20)

	)

518 
	#ADVERTISED_10ba£T_HÆf
 (1 << 0)

	)

519 
	#ADVERTISED_10ba£T_FuŒ
 (1 << 1)

	)

520 
	#ADVERTISED_100ba£T_HÆf
 (1 << 2)

	)

521 
	#ADVERTISED_100ba£T_FuŒ
 (1 << 3)

	)

522 
	#ADVERTISED_1000ba£T_HÆf
 (1 << 4)

	)

523 
	#ADVERTISED_1000ba£T_FuŒ
 (1 << 5)

	)

524 
	#ADVERTISED_Aut⁄eg
 (1 << 6)

	)

525 
	#ADVERTISED_TP
 (1 << 7)

	)

526 
	#ADVERTISED_AUI
 (1 << 8)

	)

527 
	#ADVERTISED_MII
 (1 << 9)

	)

528 
	#ADVERTISED_FIBRE
 (1 << 10)

	)

529 
	#ADVERTISED_BNC
 (1 << 11)

	)

530 
	#ADVERTISED_10000ba£T_FuŒ
 (1 << 12)

	)

531 
	#ADVERTISED_Pau£
 (1 << 13)

	)

532 
	#ADVERTISED_Asym_Pau£
 (1 << 14)

	)

533 
	#ADVERTISED_2500ba£X_FuŒ
 (1 << 15)

	)

534 
	#ADVERTISED_Back∂™e
 (1 << 16)

	)

535 
	#ADVERTISED_1000ba£KX_FuŒ
 (1 << 17)

	)

536 
	#ADVERTISED_10000ba£KX4_FuŒ
 (1 << 18)

	)

537 
	#ADVERTISED_10000ba£KR_FuŒ
 (1 << 19)

	)

538 
	#ADVERTISED_10000ba£R_FEC
 (1 << 20)

	)

547 
	#SPEED_10
 10

	)

548 
	#SPEED_100
 100

	)

549 
	#SPEED_1000
 1000

	)

550 
	#SPEED_2500
 2500

	)

551 
	#SPEED_10000
 10000

	)

554 
	#DUPLEX_HALF
 0x00

	)

555 
	#DUPLEX_FULL
 0x01

	)

558 
	#PORT_TP
 0x00

	)

559 
	#PORT_AUI
 0x01

	)

560 
	#PORT_MII
 0x02

	)

561 
	#PORT_FIBRE
 0x03

	)

562 
	#PORT_BNC
 0x04

	)

563 
	#PORT_DA
 0x05

	)

564 
	#PORT_NONE
 0xef

	)

565 
	#PORT_OTHER
 0xff

	)

568 
	#XCVR_INTERNAL
 0x00

	)

569 
	#XCVR_EXTERNAL
 0x01

	)

570 
	#XCVR_DUMMY1
 0x02

	)

571 
	#XCVR_DUMMY2
 0x03

	)

572 
	#XCVR_DUMMY3
 0x04

	)

577 
	#AUTONEG_DISABLE
 0x00

	)

578 
	#AUTONEG_ENABLE
 0x01

	)

581 
	#ETH_TP_MDI_INVALID
 0x00

	)

582 
	#ETH_TP_MDI
 0x01

	)

583 
	#ETH_TP_MDI_X
 0x02

	)

586 
	#WAKE_PHY
 (1 << 0)

	)

587 
	#WAKE_UCAST
 (1 << 1)

	)

588 
	#WAKE_MCAST
 (1 << 2)

	)

589 
	#WAKE_BCAST
 (1 << 3)

	)

590 
	#WAKE_ARP
 (1 << 4)

	)

591 
	#WAKE_MAGIC
 (1 << 5)

	)

592 
	#WAKE_MAGICSECURE
 (1 << 6Ë

	)

595 
	#TCP_V4_FLOW
 0x01

	)

596 
	#UDP_V4_FLOW
 0x02

	)

597 
	#SCTP_V4_FLOW
 0x03

	)

598 
	#AH_ESP_V4_FLOW
 0x04

	)

599 
	#TCP_V6_FLOW
 0x05

	)

600 
	#UDP_V6_FLOW
 0x06

	)

601 
	#SCTP_V6_FLOW
 0x07

	)

602 
	#AH_ESP_V6_FLOW
 0x08

	)

603 
	#AH_V4_FLOW
 0x09

	)

604 
	#ESP_V4_FLOW
 0x0a

	)

605 
	#AH_V6_FLOW
 0x0b

	)

606 
	#ESP_V6_FLOW
 0x0c

	)

607 
	#IP_USER_FLOW
 0x0d

	)

608 
	#IPV4_FLOW
 0x10

	)

609 
	#IPV6_FLOW
 0x11

	)

612 
	#RXH_L2DA
 (1 << 1)

	)

613 
	#RXH_VLAN
 (1 << 2)

	)

614 
	#RXH_L3_PROTO
 (1 << 3)

	)

615 
	#RXH_IP_SRC
 (1 << 4)

	)

616 
	#RXH_IP_DST
 (1 << 5)

	)

617 
	#RXH_L4_B_0_1
 (1 << 6Ë

	)

618 
	#RXH_L4_B_2_3
 (1 << 7Ë

	)

619 
	#RXH_DISCARD
 (1 << 31)

	)

621 
	#RX_CLS_FLOW_DISC
 0xffffffffffffffffULL

	)

630 
	eëhtoﬁ_ª£t_Êags
 {

636 
	mETH_RESET_MGMT
 = 1 << 0,

637 
	mETH_RESET_IRQ
 = 1 << 1,

638 
	mETH_RESET_DMA
 = 1 << 2,

639 
	mETH_RESET_FILTER
 = 1 << 3,

640 
	mETH_RESET_OFFLOAD
 = 1 << 4,

641 
	mETH_RESET_MAC
 = 1 << 5,

642 
	mETH_RESET_PHY
 = 1 << 6,

643 
	mETH_RESET_RAM
 = 1 << 7,

646 
	mETH_RESET_DEDICATED
 = 0x0000ffff,

648 
	mETH_RESET_ALL
 = 0xffffffff,

651 
	#ETH_RESET_SHARED_SHIFT
 16

	)

	@/usr/include/linux/filter.h

5 #i‚de‡
__LINUX_FILTER_H__


6 
	#__LINUX_FILTER_H__


	)

9 
	~<löux/ty≥s.h
>

15 
	#BPF_MAJOR_VERSION
 1

	)

16 
	#BPF_MINOR_VERSION
 1

	)

23 
	ssock_fûãr
 {

24 
__u16
 
	mcode
;

25 
__u8
 
	mjt
;

26 
__u8
 
	mjf
;

27 
__u32
 
	mk
;

30 
	ssock_Ârog
 {

31 
	mÀn
;

32 
sock_fûãr
 *
	mfûãr
;

39 
	#BPF_CLASS
(
code
Ë((codeË& 0x07)

	)

40 
	#BPF_LD
 0x00

	)

41 
	#BPF_LDX
 0x01

	)

42 
	#BPF_ST
 0x02

	)

43 
	#BPF_STX
 0x03

	)

44 
	#BPF_ALU
 0x04

	)

45 
	#BPF_JMP
 0x05

	)

46 
	#BPF_RET
 0x06

	)

47 
	#BPF_MISC
 0x07

	)

50 
	#BPF_SIZE
(
code
Ë((codeË& 0x18)

	)

51 
	#BPF_W
 0x00

	)

52 
	#BPF_H
 0x08

	)

53 
	#BPF_B
 0x10

	)

54 
	#BPF_MODE
(
code
Ë((codeË& 0xe0)

	)

55 
	#BPF_IMM
 0x00

	)

56 
	#BPF_ABS
 0x20

	)

57 
	#BPF_IND
 0x40

	)

58 
	#BPF_MEM
 0x60

	)

59 
	#BPF_LEN
 0x80

	)

60 
	#BPF_MSH
 0xa0

	)

63 
	#BPF_OP
(
code
Ë((codeË& 0xf0)

	)

64 
	#BPF_ADD
 0x00

	)

65 
	#BPF_SUB
 0x10

	)

66 
	#BPF_MUL
 0x20

	)

67 
	#BPF_DIV
 0x30

	)

68 
	#BPF_OR
 0x40

	)

69 
	#BPF_AND
 0x50

	)

70 
	#BPF_LSH
 0x60

	)

71 
	#BPF_RSH
 0x70

	)

72 
	#BPF_NEG
 0x80

	)

73 
	#BPF_JA
 0x00

	)

74 
	#BPF_JEQ
 0x10

	)

75 
	#BPF_JGT
 0x20

	)

76 
	#BPF_JGE
 0x30

	)

77 
	#BPF_JSET
 0x40

	)

78 
	#BPF_SRC
(
code
Ë((codeË& 0x08)

	)

79 
	#BPF_K
 0x00

	)

80 
	#BPF_X
 0x08

	)

83 
	#BPF_RVAL
(
code
Ë((codeË& 0x18)

	)

84 
	#BPF_A
 0x10

	)

87 
	#BPF_MISCOP
(
code
Ë((codeË& 0xf8)

	)

88 
	#BPF_TAX
 0x00

	)

89 
	#BPF_TXA
 0x80

	)

92 
	mBPF_S_RET_K
 = 0,

93 
	mBPF_S_RET_A
,

94 
	mBPF_S_ALU_ADD_K
,

95 
	mBPF_S_ALU_ADD_X
,

96 
	mBPF_S_ALU_SUB_K
,

97 
	mBPF_S_ALU_SUB_X
,

98 
	mBPF_S_ALU_MUL_K
,

99 
	mBPF_S_ALU_MUL_X
,

100 
	mBPF_S_ALU_DIV_X
,

101 
	mBPF_S_ALU_AND_K
,

102 
	mBPF_S_ALU_AND_X
,

103 
	mBPF_S_ALU_OR_K
,

104 
	mBPF_S_ALU_OR_X
,

105 
	mBPF_S_ALU_LSH_K
,

106 
	mBPF_S_ALU_LSH_X
,

107 
	mBPF_S_ALU_RSH_K
,

108 
	mBPF_S_ALU_RSH_X
,

109 
	mBPF_S_ALU_NEG
,

110 
	mBPF_S_LD_W_ABS
,

111 
	mBPF_S_LD_H_ABS
,

112 
	mBPF_S_LD_B_ABS
,

113 
	mBPF_S_LD_W_LEN
,

114 
	mBPF_S_LD_W_IND
,

115 
	mBPF_S_LD_H_IND
,

116 
	mBPF_S_LD_B_IND
,

117 
	mBPF_S_LD_IMM
,

118 
	mBPF_S_LDX_W_LEN
,

119 
	mBPF_S_LDX_B_MSH
,

120 
	mBPF_S_LDX_IMM
,

121 
	mBPF_S_MISC_TAX
,

122 
	mBPF_S_MISC_TXA
,

123 
	mBPF_S_ALU_DIV_K
,

124 
	mBPF_S_LD_MEM
,

125 
	mBPF_S_LDX_MEM
,

126 
	mBPF_S_ST
,

127 
	mBPF_S_STX
,

128 
	mBPF_S_JMP_JA
,

129 
	mBPF_S_JMP_JEQ_K
,

130 
	mBPF_S_JMP_JEQ_X
,

131 
	mBPF_S_JMP_JGE_K
,

132 
	mBPF_S_JMP_JGE_X
,

133 
	mBPF_S_JMP_JGT_K
,

134 
	mBPF_S_JMP_JGT_X
,

135 
	mBPF_S_JMP_JSET_K
,

136 
	mBPF_S_JMP_JSET_X
,

139 #i‚de‡
BPF_MAXINSNS


140 
	#BPF_MAXINSNS
 4096

	)

146 #i‚de‡
BPF_STMT


147 
	#BPF_STMT
(
code
, 
k
Ë{ ()(code), 0, 0, k }

	)

149 #i‚de‡
BPF_JUMP


150 
	#BPF_JUMP
(
code
, 
k
, 
jt
, 
jf
Ë{ ()(code), jt, jf, k }

	)

156 
	#BPF_MEMWORDS
 16

	)

163 
	#SKF_AD_OFF
 (-0x1000)

	)

164 
	#SKF_AD_PROTOCOL
 0

	)

165 
	#SKF_AD_PKTTYPE
 4

	)

166 
	#SKF_AD_IFINDEX
 8

	)

167 
	#SKF_AD_NLATTR
 12

	)

168 
	#SKF_AD_NLATTR_NEST
 16

	)

169 
	#SKF_AD_MARK
 20

	)

170 
	#SKF_AD_QUEUE
 24

	)

171 
	#SKF_AD_HATYPE
 28

	)

172 
	#SKF_AD_MAX
 32

	)

173 
	#SKF_NET_OFF
 (-0x100000)

	)

174 
	#SKF_LL_OFF
 (-0x200000)

	)

	@/usr/include/linux/rtnetlink.h

1 #i‚de‡
__LINUX_RTNETLINK_H


2 
	#__LINUX_RTNETLINK_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

6 
	~<löux/if_lök.h
>

7 
	~<löux/if_addr.h
>

8 
	~<löux/√ighbour.h
>

13 
	#RTNL_FAMILY_IPMR
 128

	)

14 
	#RTNL_FAMILY_IP6MR
 129

	)

15 
	#RTNL_FAMILY_MAX
 129

	)

24 
	mRTM_BASE
 = 16,

25 
	#RTM_BASE
 
RTM_BASE


	)

27 
	mRTM_NEWLINK
 = 16,

28 
	#RTM_NEWLINK
 
RTM_NEWLINK


	)

29 
	mRTM_DELLINK
,

30 
	#RTM_DELLINK
 
RTM_DELLINK


	)

31 
	mRTM_GETLINK
,

32 
	#RTM_GETLINK
 
RTM_GETLINK


	)

33 
	mRTM_SETLINK
,

34 
	#RTM_SETLINK
 
RTM_SETLINK


	)

36 
	mRTM_NEWADDR
 = 20,

37 
	#RTM_NEWADDR
 
RTM_NEWADDR


	)

38 
	mRTM_DELADDR
,

39 
	#RTM_DELADDR
 
RTM_DELADDR


	)

40 
	mRTM_GETADDR
,

41 
	#RTM_GETADDR
 
RTM_GETADDR


	)

43 
	mRTM_NEWROUTE
 = 24,

44 
	#RTM_NEWROUTE
 
RTM_NEWROUTE


	)

45 
	mRTM_DELROUTE
,

46 
	#RTM_DELROUTE
 
RTM_DELROUTE


	)

47 
	mRTM_GETROUTE
,

48 
	#RTM_GETROUTE
 
RTM_GETROUTE


	)

50 
	mRTM_NEWNEIGH
 = 28,

51 
	#RTM_NEWNEIGH
 
RTM_NEWNEIGH


	)

52 
	mRTM_DELNEIGH
,

53 
	#RTM_DELNEIGH
 
RTM_DELNEIGH


	)

54 
	mRTM_GETNEIGH
,

55 
	#RTM_GETNEIGH
 
RTM_GETNEIGH


	)

57 
	mRTM_NEWRULE
 = 32,

58 
	#RTM_NEWRULE
 
RTM_NEWRULE


	)

59 
	mRTM_DELRULE
,

60 
	#RTM_DELRULE
 
RTM_DELRULE


	)

61 
	mRTM_GETRULE
,

62 
	#RTM_GETRULE
 
RTM_GETRULE


	)

64 
	mRTM_NEWQDISC
 = 36,

65 
	#RTM_NEWQDISC
 
RTM_NEWQDISC


	)

66 
	mRTM_DELQDISC
,

67 
	#RTM_DELQDISC
 
RTM_DELQDISC


	)

68 
	mRTM_GETQDISC
,

69 
	#RTM_GETQDISC
 
RTM_GETQDISC


	)

71 
	mRTM_NEWTCLASS
 = 40,

72 
	#RTM_NEWTCLASS
 
RTM_NEWTCLASS


	)

73 
	mRTM_DELTCLASS
,

74 
	#RTM_DELTCLASS
 
RTM_DELTCLASS


	)

75 
	mRTM_GETTCLASS
,

76 
	#RTM_GETTCLASS
 
RTM_GETTCLASS


	)

78 
	mRTM_NEWTFILTER
 = 44,

79 
	#RTM_NEWTFILTER
 
RTM_NEWTFILTER


	)

80 
	mRTM_DELTFILTER
,

81 
	#RTM_DELTFILTER
 
RTM_DELTFILTER


	)

82 
	mRTM_GETTFILTER
,

83 
	#RTM_GETTFILTER
 
RTM_GETTFILTER


	)

85 
	mRTM_NEWACTION
 = 48,

86 
	#RTM_NEWACTION
 
RTM_NEWACTION


	)

87 
	mRTM_DELACTION
,

88 
	#RTM_DELACTION
 
RTM_DELACTION


	)

89 
	mRTM_GETACTION
,

90 
	#RTM_GETACTION
 
RTM_GETACTION


	)

92 
	mRTM_NEWPREFIX
 = 52,

93 
	#RTM_NEWPREFIX
 
RTM_NEWPREFIX


	)

95 
	mRTM_GETMULTICAST
 = 58,

96 
	#RTM_GETMULTICAST
 
RTM_GETMULTICAST


	)

98 
	mRTM_GETANYCAST
 = 62,

99 
	#RTM_GETANYCAST
 
RTM_GETANYCAST


	)

101 
	mRTM_NEWNEIGHTBL
 = 64,

102 
	#RTM_NEWNEIGHTBL
 
RTM_NEWNEIGHTBL


	)

103 
	mRTM_GETNEIGHTBL
 = 66,

104 
	#RTM_GETNEIGHTBL
 
RTM_GETNEIGHTBL


	)

105 
	mRTM_SETNEIGHTBL
,

106 
	#RTM_SETNEIGHTBL
 
RTM_SETNEIGHTBL


	)

108 
	mRTM_NEWNDUSEROPT
 = 68,

109 
	#RTM_NEWNDUSEROPT
 
RTM_NEWNDUSEROPT


	)

111 
	mRTM_NEWADDRLABEL
 = 72,

112 
	#RTM_NEWADDRLABEL
 
RTM_NEWADDRLABEL


	)

113 
	mRTM_DELADDRLABEL
,

114 
	#RTM_DELADDRLABEL
 
RTM_DELADDRLABEL


	)

115 
	mRTM_GETADDRLABEL
,

116 
	#RTM_GETADDRLABEL
 
RTM_GETADDRLABEL


	)

118 
	mRTM_GETDCB
 = 78,

119 
	#RTM_GETDCB
 
RTM_GETDCB


	)

120 
	mRTM_SETDCB
,

121 
	#RTM_SETDCB
 
RTM_SETDCB


	)

123 
	m__RTM_MAX
,

124 
	#RTM_MAX
 (((
__RTM_MAX
 + 3Ë& ~3Ë- 1)

	)

127 
	#RTM_NR_MSGTYPES
 (
RTM_MAX
 + 1 - 
RTM_BASE
)

	)

128 
	#RTM_NR_FAMILIES
 (
RTM_NR_MSGTYPES
 >> 2)

	)

129 
	#RTM_FAM
(
cmd
Ë(((cmdË- 
RTM_BASE
Ë>> 2)

	)

137 
	sπ©å
 {

138 
	mπa_Àn
;

139 
	mπa_ty≥
;

144 
	#RTA_ALIGNTO
 4

	)

145 
	#RTA_ALIGN
(
Àn
Ë–(÷í)+
RTA_ALIGNTO
-1Ë& ~(RTA_ALIGNTO-1Ë)

	)

146 
	#RTA_OK
(
πa
,
Àn
Ë(÷íË>()(
π©å
) && \

147 (
πa
)->
πa_Àn
 >(
π©å
) && \

148 (
πa
)->
πa_Àn
 <(
Àn
))

	)

149 
	#RTA_NEXT
(
πa
,
©åÀn
Ë(◊âæíË-
	`RTA_ALIGN
(‘è)->
πa_Àn
), \

150 (
π©å
*)(((*)(
πa
)Ë+ 
	`RTA_ALIGN
(‘è)->
πa_Àn
)))

	)

151 
	#RTA_LENGTH
(
Àn
Ë(
	`RTA_ALIGN
((
π©å
)Ë+ (Àn))

	)

152 
	#RTA_SPACE
(
Àn
Ë
	`RTA_ALIGN
(
	`RTA_LENGTH
÷í))

	)

153 
	#RTA_DATA
(
πa
Ë((*)(((*)‘è)Ë+ 
	`RTA_LENGTH
(0)))

	)

154 
	#RTA_PAYLOAD
(
πa
Ë(()(‘è)->
πa_Àn
Ë- 
	`RTA_LENGTH
(0))

	)

163 
	sπmsg
 {

164 
	mπm_Ámûy
;

165 
	mπm_d°_Àn
;

166 
	mπm_§c_Àn
;

167 
	mπm_tos
;

169 
	mπm_èbÀ
;

170 
	mπm_¥Ÿocﬁ
;

171 
	mπm_sc›e
;

172 
	mπm_ty≥
;

174 
	mπm_Êags
;

180 
	mRTN_UNSPEC
,

181 
	mRTN_UNICAST
,

182 
	mRTN_LOCAL
,

183 
	mRTN_BROADCAST
,

185 
	mRTN_ANYCAST
,

187 
	mRTN_MULTICAST
,

188 
	mRTN_BLACKHOLE
,

189 
	mRTN_UNREACHABLE
,

190 
	mRTN_PROHIBIT
,

191 
	mRTN_THROW
,

192 
	mRTN_NAT
,

193 
	mRTN_XRESOLVE
,

194 
	m__RTN_MAX


197 
	#RTN_MAX
 (
__RTN_MAX
 - 1)

	)

202 
	#RTPROT_UNSPEC
 0

	)

203 
	#RTPROT_REDIRECT
 1

	)

205 
	#RTPROT_KERNEL
 2

	)

206 
	#RTPROT_BOOT
 3

	)

207 
	#RTPROT_STATIC
 4

	)

216 
	#RTPROT_GATED
 8

	)

217 
	#RTPROT_RA
 9

	)

218 
	#RTPROT_MRT
 10

	)

219 
	#RTPROT_ZEBRA
 11

	)

220 
	#RTPROT_BIRD
 12

	)

221 
	#RTPROT_DNROUTED
 13

	)

222 
	#RTPROT_XORP
 14

	)

223 
	#RTPROT_NTK
 15

	)

224 
	#RTPROT_DHCP
 16

	)

237 
	eπ_sc›e_t
 {

238 
	mRT_SCOPE_UNIVERSE
=0,

240 
	mRT_SCOPE_SITE
=200,

241 
	mRT_SCOPE_LINK
=253,

242 
	mRT_SCOPE_HOST
=254,

243 
	mRT_SCOPE_NOWHERE
=255

248 
	#RTM_F_NOTIFY
 0x100

	)

249 
	#RTM_F_CLONED
 0x200

	)

250 
	#RTM_F_EQUALIZE
 0x400

	)

251 
	#RTM_F_PREFIX
 0x800

	)

255 
	eπ_˛ass_t
 {

256 
	mRT_TABLE_UNSPEC
=0,

258 
	mRT_TABLE_COMPAT
=252,

259 
	mRT_TABLE_DEFAULT
=253,

260 
	mRT_TABLE_MAIN
=254,

261 
	mRT_TABLE_LOCAL
=255,

262 
	mRT_TABLE_MAX
=0xFFFFFFFF

268 
	eπ©å_ty≥_t
 {

269 
	mRTA_UNSPEC
,

270 
	mRTA_DST
,

271 
	mRTA_SRC
,

272 
	mRTA_IIF
,

273 
	mRTA_OIF
,

274 
	mRTA_GATEWAY
,

275 
	mRTA_PRIORITY
,

276 
	mRTA_PREFSRC
,

277 
	mRTA_METRICS
,

278 
	mRTA_MULTIPATH
,

279 
	mRTA_PROTOINFO
,

280 
	mRTA_FLOW
,

281 
	mRTA_CACHEINFO
,

282 
	mRTA_SESSION
,

283 
	mRTA_MP_ALGO
,

284 
	mRTA_TABLE
,

285 
	m__RTA_MAX


288 
	#RTA_MAX
 (
__RTA_MAX
 - 1)

	)

290 
	#RTM_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
πmsg
))))

	)

291 
	#RTM_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
πmsg
))

	)

302 
	sπ√xth›
 {

303 
	mπnh_Àn
;

304 
	mπnh_Êags
;

305 
	mπnh_h›s
;

306 
	mπnh_ifödex
;

311 
	#RTNH_F_DEAD
 1

	)

312 
	#RTNH_F_PERVASIVE
 2

	)

313 
	#RTNH_F_ONLINK
 4

	)

317 
	#RTNH_ALIGNTO
 4

	)

318 
	#RTNH_ALIGN
(
Àn
Ë–(÷í)+
RTNH_ALIGNTO
-1Ë& ~(RTNH_ALIGNTO-1Ë)

	)

319 
	#RTNH_OK
(
πnh
,
Àn
Ë(‘äh)->
πnh_Àn
 >(
π√xth›
) && \

320 (()(
πnh
)->
πnh_Àn
Ë<(
Àn
))

	)

321 
	#RTNH_NEXT
(
πnh
Ë((
π√xth›
*)(((*)‘äh)Ë+ 
	`RTNH_ALIGN
(‘äh)->
πnh_Àn
)))

	)

322 
	#RTNH_LENGTH
(
Àn
Ë(
	`RTNH_ALIGN
((
π√xth›
)Ë+ (Àn))

	)

323 
	#RTNH_SPACE
(
Àn
Ë
	`RTNH_ALIGN
(
	`RTNH_LENGTH
÷í))

	)

324 
	#RTNH_DATA
(
πnh
Ë((
π©å
*)(((*)‘äh)Ë+ 
	`RTNH_LENGTH
(0)))

	)

328 
	sπa_ˇcheöfo
 {

329 
__u32
 
	mπa_˛¡ªf
;

330 
__u32
 
	mπa_œ°u£
;

331 
__s32
 
	mπa_expúes
;

332 
__u32
 
	mπa_îr‹
;

333 
__u32
 
	mπa_u£d
;

335 
	#RTNETLINK_HAVE_PEERINFO
 1

	)

336 
__u32
 
	mπa_id
;

337 
__u32
 
	mπa_ts
;

338 
__u32
 
	mπa_tßge
;

344 
	mRTAX_UNSPEC
,

345 
	#RTAX_UNSPEC
 
RTAX_UNSPEC


	)

346 
	mRTAX_LOCK
,

347 
	#RTAX_LOCK
 
RTAX_LOCK


	)

348 
	mRTAX_MTU
,

349 
	#RTAX_MTU
 
RTAX_MTU


	)

350 
	mRTAX_WINDOW
,

351 
	#RTAX_WINDOW
 
RTAX_WINDOW


	)

352 
	mRTAX_RTT
,

353 
	#RTAX_RTT
 
RTAX_RTT


	)

354 
	mRTAX_RTTVAR
,

355 
	#RTAX_RTTVAR
 
RTAX_RTTVAR


	)

356 
	mRTAX_SSTHRESH
,

357 
	#RTAX_SSTHRESH
 
RTAX_SSTHRESH


	)

358 
	mRTAX_CWND
,

359 
	#RTAX_CWND
 
RTAX_CWND


	)

360 
	mRTAX_ADVMSS
,

361 
	#RTAX_ADVMSS
 
RTAX_ADVMSS


	)

362 
	mRTAX_REORDERING
,

363 
	#RTAX_REORDERING
 
RTAX_REORDERING


	)

364 
	mRTAX_HOPLIMIT
,

365 
	#RTAX_HOPLIMIT
 
RTAX_HOPLIMIT


	)

366 
	mRTAX_INITCWND
,

367 
	#RTAX_INITCWND
 
RTAX_INITCWND


	)

368 
	mRTAX_FEATURES
,

369 
	#RTAX_FEATURES
 
RTAX_FEATURES


	)

370 
	mRTAX_RTO_MIN
,

371 
	#RTAX_RTO_MIN
 
RTAX_RTO_MIN


	)

372 
	mRTAX_INITRWND
,

373 
	#RTAX_INITRWND
 
RTAX_INITRWND


	)

374 
	m__RTAX_MAX


377 
	#RTAX_MAX
 (
__RTAX_MAX
 - 1)

	)

379 
	#RTAX_FEATURE_ECN
 0x00000001

	)

380 
	#RTAX_FEATURE_SACK
 0x00000002

	)

381 
	#RTAX_FEATURE_TIMESTAMP
 0x00000004

	)

382 
	#RTAX_FEATURE_ALLFRAG
 0x00000008

	)

384 
	sπa_£ssi⁄
 {

385 
__u8
 
	m¥Ÿo
;

386 
__u8
 
	m∑d1
;

387 
__u16
 
	m∑d2
;

391 
__u16
 
	m•‹t
;

392 
__u16
 
	mdp‹t
;

393 } 
	mp‹ts
;

396 
__u8
 
	mty≥
;

397 
__u8
 
	mcode
;

398 
__u16
 
	midít
;

399 } 
	micm±
;

401 
__u32
 
	m•i
;

402 } 
	mu
;

409 
	sπgímsg
 {

410 
	mπgí_Ámûy
;

422 
	siföfomsg
 {

423 
	mifi_Ámûy
;

424 
	m__ifi_∑d
;

425 
	mifi_ty≥
;

426 
	mifi_ödex
;

427 
	mifi_Êags
;

428 
	mifi_ch™ge
;

435 
	s¥efixmsg
 {

436 
	m¥efix_Ámûy
;

437 
	m¥efix_∑d1
;

438 
	m¥efix_∑d2
;

439 
	m¥efix_ifödex
;

440 
	m¥efix_ty≥
;

441 
	m¥efix_Àn
;

442 
	m¥efix_Êags
;

443 
	m¥efix_∑d3
;

448 
	mPREFIX_UNSPEC
,

449 
	mPREFIX_ADDRESS
,

450 
	mPREFIX_CACHEINFO
,

451 
	m__PREFIX_MAX


454 
	#PREFIX_MAX
 (
__PREFIX_MAX
 - 1)

	)

456 
	s¥efix_ˇcheöfo
 {

457 
__u32
 
	m¥e„ºed_time
;

458 
__u32
 
	mvÆid_time
;

466 
	stcmsg
 {

467 
	mtcm_Ámûy
;

468 
	mtcm__∑d1
;

469 
	mtcm__∑d2
;

470 
	mtcm_ifödex
;

471 
__u32
 
	mtcm_h™dÀ
;

472 
__u32
 
	mtcm_∑ª¡
;

473 
__u32
 
	mtcm_öfo
;

477 
	mTCA_UNSPEC
,

478 
	mTCA_KIND
,

479 
	mTCA_OPTIONS
,

480 
	mTCA_STATS
,

481 
	mTCA_XSTATS
,

482 
	mTCA_RATE
,

483 
	mTCA_FCNT
,

484 
	mTCA_STATS2
,

485 
	mTCA_STAB
,

486 
	m__TCA_MAX


489 
	#TCA_MAX
 (
__TCA_MAX
 - 1)

	)

491 
	#TCA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
tcmsg
))))

	)

492 
	#TCA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
tcmsg
))

	)

498 
	sndu£r›tmsg
 {

499 
	mndu£r›t_Ámûy
;

500 
	mndu£r›t_∑d1
;

501 
	mndu£r›t_›ts_Àn
;

502 
	mndu£r›t_ifödex
;

503 
__u8
 
	mndu£r›t_icmp_ty≥
;

504 
__u8
 
	mndu£r›t_icmp_code
;

505 
	mndu£r›t_∑d2
;

506 
	mndu£r›t_∑d3
;

511 
	mNDUSEROPT_UNSPEC
,

512 
	mNDUSEROPT_SRCADDR
,

513 
	m__NDUSEROPT_MAX


516 
	#NDUSEROPT_MAX
 (
__NDUSEROPT_MAX
 - 1)

	)

519 
	#RTMGRP_LINK
 1

	)

520 
	#RTMGRP_NOTIFY
 2

	)

521 
	#RTMGRP_NEIGH
 4

	)

522 
	#RTMGRP_TC
 8

	)

524 
	#RTMGRP_IPV4_IFADDR
 0x10

	)

525 
	#RTMGRP_IPV4_MROUTE
 0x20

	)

526 
	#RTMGRP_IPV4_ROUTE
 0x40

	)

527 
	#RTMGRP_IPV4_RULE
 0x80

	)

529 
	#RTMGRP_IPV6_IFADDR
 0x100

	)

530 
	#RTMGRP_IPV6_MROUTE
 0x200

	)

531 
	#RTMGRP_IPV6_ROUTE
 0x400

	)

532 
	#RTMGRP_IPV6_IFINFO
 0x800

	)

534 
	#RTMGRP_DEC√t_IFADDR
 0x1000

	)

535 
	#RTMGRP_DEC√t_ROUTE
 0x4000

	)

537 
	#RTMGRP_IPV6_PREFIX
 0x20000

	)

540 
	eπ√éök_groups
 {

541 
	mRTNLGRP_NONE
,

542 
	#RTNLGRP_NONE
 
RTNLGRP_NONE


	)

543 
	mRTNLGRP_LINK
,

544 
	#RTNLGRP_LINK
 
RTNLGRP_LINK


	)

545 
	mRTNLGRP_NOTIFY
,

546 
	#RTNLGRP_NOTIFY
 
RTNLGRP_NOTIFY


	)

547 
	mRTNLGRP_NEIGH
,

548 
	#RTNLGRP_NEIGH
 
RTNLGRP_NEIGH


	)

549 
	mRTNLGRP_TC
,

550 
	#RTNLGRP_TC
 
RTNLGRP_TC


	)

551 
	mRTNLGRP_IPV4_IFADDR
,

552 
	#RTNLGRP_IPV4_IFADDR
 
RTNLGRP_IPV4_IFADDR


	)

553 
	mRTNLGRP_IPV4_MROUTE
,

554 
	#RTNLGRP_IPV4_MROUTE
 
RTNLGRP_IPV4_MROUTE


	)

555 
	mRTNLGRP_IPV4_ROUTE
,

556 
	#RTNLGRP_IPV4_ROUTE
 
RTNLGRP_IPV4_ROUTE


	)

557 
	mRTNLGRP_IPV4_RULE
,

558 
	#RTNLGRP_IPV4_RULE
 
RTNLGRP_IPV4_RULE


	)

559 
	mRTNLGRP_IPV6_IFADDR
,

560 
	#RTNLGRP_IPV6_IFADDR
 
RTNLGRP_IPV6_IFADDR


	)

561 
	mRTNLGRP_IPV6_MROUTE
,

562 
	#RTNLGRP_IPV6_MROUTE
 
RTNLGRP_IPV6_MROUTE


	)

563 
	mRTNLGRP_IPV6_ROUTE
,

564 
	#RTNLGRP_IPV6_ROUTE
 
RTNLGRP_IPV6_ROUTE


	)

565 
	mRTNLGRP_IPV6_IFINFO
,

566 
	#RTNLGRP_IPV6_IFINFO
 
RTNLGRP_IPV6_IFINFO


	)

567 
	mRTNLGRP_DEC√t_IFADDR
,

568 
	#RTNLGRP_DEC√t_IFADDR
 
RTNLGRP_DEC√t_IFADDR


	)

569 
	mRTNLGRP_NOP2
,

570 
	mRTNLGRP_DEC√t_ROUTE
,

571 
	#RTNLGRP_DEC√t_ROUTE
 
RTNLGRP_DEC√t_ROUTE


	)

572 
	mRTNLGRP_DEC√t_RULE
,

573 
	#RTNLGRP_DEC√t_RULE
 
RTNLGRP_DEC√t_RULE


	)

574 
	mRTNLGRP_NOP4
,

575 
	mRTNLGRP_IPV6_PREFIX
,

576 
	#RTNLGRP_IPV6_PREFIX
 
RTNLGRP_IPV6_PREFIX


	)

577 
	mRTNLGRP_IPV6_RULE
,

578 
	#RTNLGRP_IPV6_RULE
 
RTNLGRP_IPV6_RULE


	)

579 
	mRTNLGRP_ND_USEROPT
,

580 
	#RTNLGRP_ND_USEROPT
 
RTNLGRP_ND_USEROPT


	)

581 
	mRTNLGRP_PHONET_IFADDR
,

582 
	#RTNLGRP_PHONET_IFADDR
 
RTNLGRP_PHONET_IFADDR


	)

583 
	mRTNLGRP_PHONET_ROUTE
,

584 
	#RTNLGRP_PHONET_ROUTE
 
RTNLGRP_PHONET_ROUTE


	)

585 
	m__RTNLGRP_MAX


587 
	#RTNLGRP_MAX
 (
__RTNLGRP_MAX
 - 1)

	)

590 
	stˇmsg
 {

591 
	mtˇ_Ámûy
;

592 
	mtˇ__∑d1
;

593 
	mtˇ__∑d2
;

595 
	#TA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
tˇmsg
))))

	)

596 
	#TA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
tˇmsg
))

	)

597 
	#TCA_ACT_TAB
 1

	)

598 
	#TCAA_MAX
 1

	)

	@/usr/include/linux/sockios.h

18 #i‚de‡
_LINUX_SOCKIOS_H


19 
	#_LINUX_SOCKIOS_H


	)

21 
	~<asm/sockios.h
>

24 
	#SIOCINQ
 
FIONREAD


	)

25 
	#SIOCOUTQ
 
TIOCOUTQ


	)

28 
	#SIOCADDRT
 0x890B

	)

29 
	#SIOCDELRT
 0x890C

	)

30 
	#SIOCRTMSG
 0x890D

	)

33 
	#SIOCGIFNAME
 0x8910

	)

34 
	#SIOCSIFLINK
 0x8911

	)

35 
	#SIOCGIFCONF
 0x8912

	)

36 
	#SIOCGIFFLAGS
 0x8913

	)

37 
	#SIOCSIFFLAGS
 0x8914

	)

38 
	#SIOCGIFADDR
 0x8915

	)

39 
	#SIOCSIFADDR
 0x8916

	)

40 
	#SIOCGIFDSTADDR
 0x8917

	)

41 
	#SIOCSIFDSTADDR
 0x8918

	)

42 
	#SIOCGIFBRDADDR
 0x8919

	)

43 
	#SIOCSIFBRDADDR
 0x891®

	)

44 
	#SIOCGIFNETMASK
 0x891b

	)

45 
	#SIOCSIFNETMASK
 0x891¯

	)

46 
	#SIOCGIFMETRIC
 0x891d

	)

47 
	#SIOCSIFMETRIC
 0x891ê

	)

48 
	#SIOCGIFMEM
 0x891‡

	)

49 
	#SIOCSIFMEM
 0x8920

	)

50 
	#SIOCGIFMTU
 0x8921

	)

51 
	#SIOCSIFMTU
 0x8922

	)

52 
	#SIOCSIFNAME
 0x8923

	)

53 
	#SIOCSIFHWADDR
 0x8924

	)

54 
	#SIOCGIFENCAP
 0x8925

	)

55 
	#SIOCSIFENCAP
 0x8926

	)

56 
	#SIOCGIFHWADDR
 0x8927

	)

57 
	#SIOCGIFSLAVE
 0x8929

	)

58 
	#SIOCSIFSLAVE
 0x8930

	)

59 
	#SIOCADDMULTI
 0x8931

	)

60 
	#SIOCDELMULTI
 0x8932

	)

61 
	#SIOCGIFINDEX
 0x8933

	)

62 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

63 
	#SIOCSIFPFLAGS
 0x8934

	)

64 
	#SIOCGIFPFLAGS
 0x8935

	)

65 
	#SIOCDIFADDR
 0x8936

	)

66 
	#SIOCSIFHWBROADCAST
 0x8937

	)

67 
	#SIOCGIFCOUNT
 0x8938

	)

69 
	#SIOCGIFBR
 0x8940

	)

70 
	#SIOCSIFBR
 0x8941

	)

72 
	#SIOCGIFTXQLEN
 0x8942

	)

73 
	#SIOCSIFTXQLEN
 0x8943

	)

78 
	#SIOCETHTOOL
 0x8946

	)

80 
	#SIOCGMIIPHY
 0x8947

	)

81 
	#SIOCGMIIREG
 0x8948

	)

82 
	#SIOCSMIIREG
 0x8949

	)

84 
	#SIOCWANDEV
 0x894A

	)

88 
	#SIOCDARP
 0x8953

	)

89 
	#SIOCGARP
 0x8954

	)

90 
	#SIOCSARP
 0x8955

	)

93 
	#SIOCDRARP
 0x8960

	)

94 
	#SIOCGRARP
 0x8961

	)

95 
	#SIOCSRARP
 0x8962

	)

99 
	#SIOCGIFMAP
 0x8970

	)

100 
	#SIOCSIFMAP
 0x8971

	)

104 
	#SIOCADDDLCI
 0x8980

	)

105 
	#SIOCDELDLCI
 0x8981

	)

107 
	#SIOCGIFVLAN
 0x8982

	)

108 
	#SIOCSIFVLAN
 0x8983

	)

112 
	#SIOCBONDENSLAVE
 0x8990

	)

113 
	#SIOCBONDRELEASE
 0x8991

	)

114 
	#SIOCBONDSETHWADDR
 0x8992

	)

115 
	#SIOCBONDSLAVEINFOQUERY
 0x8993

	)

116 
	#SIOCBONDINFOQUERY
 0x8994

	)

117 
	#SIOCBONDCHANGEACTIVE
 0x8995

	)

120 
	#SIOCBRADDBR
 0x89a0

	)

121 
	#SIOCBRDELBR
 0x89a1

	)

122 
	#SIOCBRADDIF
 0x89a2

	)

123 
	#SIOCBRDELIF
 0x89a3

	)

126 
	#SIOCSHWTSTAMP
 0x89b0

	)

139 
	#SIOCDEVPRIVATE
 0x89F0

	)

145 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

	@/usr/include/linux/version.h

1 
	#LINUX_VERSION_CODE
 132643

	)

2 
	#KERNEL_VERSION
(
a
,
b
,
c
Ë((◊Ë<< 16Ë+ ((bË<< 8Ë+ (c))

	)

	@/usr/include/net/if.h

20 #i‚de‡
_NET_IF_H


21 
	#_NET_IF_H
 1

	)

23 
	~<„©uªs.h
>

25 #ifde‡
__USE_MISC


26 
	~<sys/ty≥s.h
>

27 
	~<sys/sockë.h
>

32 
	#IF_NAMESIZE
 16

	)

34 
	sif_«meödex


36 
	mif_ödex
;

37 *
	mif_«me
;

41 #ifde‡
__USE_MISC


45 
	mIFF_UP
 = 0x1,

46 
	#IFF_UP
 
IFF_UP


	)

47 
	mIFF_BROADCAST
 = 0x2,

48 
	#IFF_BROADCAST
 
IFF_BROADCAST


	)

49 
	mIFF_DEBUG
 = 0x4,

50 
	#IFF_DEBUG
 
IFF_DEBUG


	)

51 
	mIFF_LOOPBACK
 = 0x8,

52 
	#IFF_LOOPBACK
 
IFF_LOOPBACK


	)

53 
	mIFF_POINTOPOINT
 = 0x10,

54 
	#IFF_POINTOPOINT
 
IFF_POINTOPOINT


	)

55 
	mIFF_NOTRAILERS
 = 0x20,

56 
	#IFF_NOTRAILERS
 
IFF_NOTRAILERS


	)

57 
	mIFF_RUNNING
 = 0x40,

58 
	#IFF_RUNNING
 
IFF_RUNNING


	)

59 
	mIFF_NOARP
 = 0x80,

60 
	#IFF_NOARP
 
IFF_NOARP


	)

61 
	mIFF_PROMISC
 = 0x100,

62 
	#IFF_PROMISC
 
IFF_PROMISC


	)

65 
	mIFF_ALLMULTI
 = 0x200,

66 
	#IFF_ALLMULTI
 
IFF_ALLMULTI


	)

68 
	mIFF_MASTER
 = 0x400,

69 
	#IFF_MASTER
 
IFF_MASTER


	)

70 
	mIFF_SLAVE
 = 0x800,

71 
	#IFF_SLAVE
 
IFF_SLAVE


	)

73 
	mIFF_MULTICAST
 = 0x1000,

74 
	#IFF_MULTICAST
 
IFF_MULTICAST


	)

76 
	mIFF_PORTSEL
 = 0x2000,

77 
	#IFF_PORTSEL
 
IFF_PORTSEL


	)

78 
	mIFF_AUTOMEDIA
 = 0x4000,

79 
	#IFF_AUTOMEDIA
 
IFF_AUTOMEDIA


	)

80 
	mIFF_DYNAMIC
 = 0x8000

81 
	#IFF_DYNAMIC
 
IFF_DYNAMIC


	)

89 
	siÁddr


91 
sockaddr
 
	miÁ_addr
;

94 
sockaddr
 
	mifu_brﬂdaddr
;

95 
sockaddr
 
	mifu_d°addr
;

96 } 
	miÁ_ifu
;

97 
iÁ˚
 *
	miÁ_iÂ
;

98 
iÁddr
 *
	miÁ_√xt
;

101 
	#iÁ_brﬂdaddr
 
iÁ_ifu
.
ifu_brﬂdaddr


	)

102 
	#iÁ_d°addr
 
iÁ_ifu
.
ifu_d°addr


	)

112 
	sifm≠


114 
	mmem_°¨t
;

115 
	mmem_íd
;

116 
	mba£_addr
;

117 
	múq
;

118 
	mdma
;

119 
	mp‹t
;

127 
	si‰eq


129 
	#IFHWADDRLEN
 6

	)

130 
	#IFNAMSIZ
 
IF_NAMESIZE


	)

133 
	mi‰n_«me
[
IFNAMSIZ
];

134 } 
	mi‰_i‰n
;

138 
sockaddr
 
	mi‰u_addr
;

139 
sockaddr
 
	mi‰u_d°addr
;

140 
sockaddr
 
	mi‰u_brﬂdaddr
;

141 
sockaddr
 
	mi‰u_√tmask
;

142 
sockaddr
 
	mi‰u_hwaddr
;

143 
	mi‰u_Êags
;

144 
	mi‰u_ivÆue
;

145 
	mi‰u_mtu
;

146 
ifm≠
 
	mi‰u_m≠
;

147 
	mi‰u_¶ave
[
IFNAMSIZ
];

148 
	mi‰u_√w«me
[
IFNAMSIZ
];

149 
__ˇddr_t
 
	mi‰u_d©a
;

150 } 
	mi‰_i‰u
;

152 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

153 
	#i‰_hwaddr
 
i‰_i‰u
.
i‰u_hwaddr


	)

154 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

155 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

156 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

157 
	#i‰_√tmask
 
i‰_i‰u
.
i‰u_√tmask


	)

158 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags


	)

159 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_ivÆue


	)

160 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

161 
	#i‰_m≠
 
i‰_i‰u
.
i‰u_m≠


	)

162 
	#i‰_¶ave
 
i‰_i‰u
.
i‰u_¶ave


	)

163 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

164 
	#i‰_ifödex
 
i‰_i‰u
.
i‰u_ivÆue


	)

165 
	#i‰_b™dwidth
 
i‰_i‰u
.
i‰u_ivÆue


	)

166 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_ivÆue


	)

167 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_√w«me


	)

168 
	#_IOT_i‰eq
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),16,0,0)

	)

169 
	#_IOT_i‰eq_sh‹t
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

170 
	#_IOT_i‰eq_öt
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

177 
	sifc⁄f


179 
	mifc_Àn
;

182 
__ˇddr_t
 
	mifcu_buf
;

183 
i‰eq
 *
	mifcu_ªq
;

184 } 
	mifc_ifcu
;

186 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

187 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

188 
	#_IOT_ifc⁄f
 
	`_IOT
(
	`_IOTS
(
ifc⁄f
),1,0,0,0,0Ë

	)

191 
__BEGIN_DECLS


194 
	$if_«mëoödex
 (
__c⁄°
 *
__i‚ame
Ë
__THROW
;

195 *
	$if_ödext⁄ame
 (
__ifödex
, *
__i‚ame
Ë
__THROW
;

198 
if_«meödex
 *
	$if_«meödex
 (Ë
__THROW
;

201 
	$if_‰ì«meödex
 (
if_«meödex
 *
__±r
Ë
__THROW
;

203 
__END_DECLS


	@/usr/include/net/if_arp.h

23 #i‚de‡
_NET_IF_ARP_H


25 
	#_NET_IF_ARP_H
 1

	)

26 
	~<sys/cdefs.h
>

28 
	~<sys/ty≥s.h
>

29 
	~<sys/sockë.h
>

31 
	g__BEGIN_DECLS


34 
	#MAX_ADDR_LEN
 7

	)

40 
	#ARPOP_REQUEST
 1

	)

41 
	#ARPOP_REPLY
 2

	)

42 
	#ARPOP_RREQUEST
 3

	)

43 
	#ARPOP_RREPLY
 4

	)

44 
	#ARPOP_InREQUEST
 8

	)

45 
	#ARPOP_InREPLY
 9

	)

46 
	#ARPOP_NAK
 10

	)

55 
	s¨phdr


57 
	m¨_hrd
;

58 
	m¨_¥o
;

59 
	m¨_h 
;

60 
	m¨_∂n
;

61 
	m¨_›
;

65 
	m__¨_sha
[
ETH_ALEN
];

66 
	m__¨_sù
[4];

67 
	m__¨_tha
[
ETH_ALEN
];

68 
	m__¨_tù
[4];

74 
	#ARPHRD_NETROM
 0

	)

75 
	#ARPHRD_ETHER
 1

	)

76 
	#ARPHRD_EETHER
 2

	)

77 
	#ARPHRD_AX25
 3

	)

78 
	#ARPHRD_PRONET
 4

	)

79 
	#ARPHRD_CHAOS
 5

	)

80 
	#ARPHRD_IEEE802
 6

	)

81 
	#ARPHRD_ARCNET
 7

	)

82 
	#ARPHRD_APPLETLK
 8

	)

83 
	#ARPHRD_DLCI
 15

	)

84 
	#ARPHRD_ATM
 19

	)

85 
	#ARPHRD_METRICOM
 23

	)

86 
	#ARPHRD_IEEE1394
 24

	)

87 
	#ARPHRD_EUI64
 27

	)

88 
	#ARPHRD_INFINIBAND
 32

	)

91 
	#ARPHRD_SLIP
 256

	)

92 
	#ARPHRD_CSLIP
 257

	)

93 
	#ARPHRD_SLIP6
 258

	)

94 
	#ARPHRD_CSLIP6
 259

	)

95 
	#ARPHRD_RSRVD
 260

	)

96 
	#ARPHRD_ADAPT
 264

	)

97 
	#ARPHRD_ROSE
 270

	)

98 
	#ARPHRD_X25
 271

	)

99 
	#ARPHRD_HWX25
 272

	)

100 
	#ARPHRD_PPP
 512

	)

101 
	#ARPHRD_CISCO
 513

	)

102 
	#ARPHRD_HDLC
 
ARPHRD_CISCO


	)

103 
	#ARPHRD_LAPB
 516

	)

104 
	#ARPHRD_DDCMP
 517

	)

105 
	#ARPHRD_RAWHDLC
 518

	)

107 
	#ARPHRD_TUNNEL
 768

	)

108 
	#ARPHRD_TUNNEL6
 769

	)

109 
	#ARPHRD_FRAD
 770

	)

110 
	#ARPHRD_SKIP
 771

	)

111 
	#ARPHRD_LOOPBACK
 772

	)

112 
	#ARPHRD_LOCALTLK
 773

	)

113 
	#ARPHRD_FDDI
 774

	)

114 
	#ARPHRD_BIF
 775

	)

115 
	#ARPHRD_SIT
 776

	)

116 
	#ARPHRD_IPDDP
 777

	)

117 
	#ARPHRD_IPGRE
 778

	)

118 
	#ARPHRD_PIMREG
 779

	)

119 
	#ARPHRD_HIPPI
 780

	)

120 
	#ARPHRD_ASH
 781

	)

121 
	#ARPHRD_ECONET
 782

	)

122 
	#ARPHRD_IRDA
 783

	)

123 
	#ARPHRD_FCPP
 784

	)

124 
	#ARPHRD_FCAL
 785

	)

125 
	#ARPHRD_FCPL
 786

	)

126 
	#ARPHRD_FCFABRIC
 787

	)

127 
	#ARPHRD_IEEE802_TR
 800

	)

128 
	#ARPHRD_IEEE80211
 801

	)

129 
	#ARPHRD_IEEE80211_PRISM
 802

	)

130 
	#ARPHRD_IEEE80211_RADIOTAP
 803

	)

131 
	#ARPHRD_IEEE802154
 804

	)

132 
	#ARPHRD_IEEE802154_PHY
 805

	)

134 
	#ARPHRD_VOID
 0xFFFF

	)

135 
	#ARPHRD_NONE
 0xFFFE

	)

139 
	s¨¥eq


141 
sockaddr
 
	m¨p_∑
;

142 
sockaddr
 
	m¨p_ha
;

143 
	m¨p_Êags
;

144 
sockaddr
 
	m¨p_√tmask
;

145 
	m¨p_dev
[16];

148 
	s¨¥eq_ﬁd


150 
sockaddr
 
	m¨p_∑
;

151 
sockaddr
 
	m¨p_ha
;

152 
	m¨p_Êags
;

153 
sockaddr
 
	m¨p_√tmask
;

157 
	#ATF_COM
 0x02

	)

158 
	#ATF_PERM
 0x04

	)

159 
	#ATF_PUBL
 0x08

	)

160 
	#ATF_USETRAILERS
 0x10

	)

161 
	#ATF_NETMASK
 0x20

	)

163 
	#ATF_DONTPUB
 0x40

	)

164 
	#ATF_MAGIC
 0x80

	)

168 
	#ARPD_UPDATE
 0x01

	)

169 
	#ARPD_LOOKUP
 0x02

	)

170 
	#ARPD_FLUSH
 0x03

	)

172 
	s¨pd_ªque°


174 
	mªq
;

175 
u_öt32_t
 
	mù
;

176 
	mdev
;

177 
	m°amp
;

178 
	mupd©ed
;

179 
	mha
[
MAX_ADDR_LEN
];

182 
	g__END_DECLS


	@/usr/include/netdb.h

23 #i‚def 
_NETDB_H


24 
	#_NETDB_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<√töë/ö.h
>

29 
	~<°döt.h
>

30 #ifde‡
__USE_MISC


33 
	~<Ωc/√tdb.h
>

36 #ifde‡
__USE_GNU


37 
	#__√ed_sigevít_t


	)

38 
	~<bôs/sigöfo.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

43 
	~<bôs/√tdb.h
>

46 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

47 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

48 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

49 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

50 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

51 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

54 
	g__BEGIN_DECLS


56 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


59 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

62 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

66 
	#HOST_NOT_FOUND
 1

	)

67 
	#TRY_AGAIN
 2

	)

69 
	#NO_RECOVERY
 3

	)

71 
	#NO_DATA
 4

	)

74 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


75 
	#NETDB_INTERNAL
 -1

	)

76 
	#NETDB_SUCCESS
 0

	)

77 
	#NO_ADDRESS
 
NO_DATA


	)

80 #ifde‡
__USE_XOPEN2K


82 
	#IPPORT_RESERVED
 1024

	)

85 #ifde‡
__USE_GNU


87 
	#SCOPE_DELIMITER
 '%'

	)

90 #ifde‡
__USE_MISC


93 
	$hîr‹
 (
__c⁄°
 *
__°r
Ë
__THROW
;

96 
__c⁄°
 *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

101 
	sho°ít


103 *
h_«me
;

104 **
h_Æü£s
;

105 
h_addπy≥
;

106 
h_Àngth
;

107 **
h_addr_li°
;

108 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


109 
	#h_addr
 
h_addr_li°
[0]

	)

118 
	`£tho°ít
 (
__°ay_›í
);

124 
	`ídho°ít
 ();

131 
ho°ít
 *
	`gëho°ít
 ();

138 
ho°ít
 *
	`gëho°byaddr
 (
__c⁄°
 *
__addr
, 
__sockÀn_t
 
__Àn
,

139 
__ty≥
);

145 
ho°ít
 *
	`gëho°by«me
 (
__c⁄°
 *
__«me
);

147 #ifde‡
__USE_MISC


156 
ho°ít
 *
	`gëho°by«me2
 (
__c⁄°
 *
__«me
, 
__af
);

168 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

169 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

170 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

171 *
__ª°ri˘
 
__h_î∫›
);

173 
	`gëho°byaddr_r
 (
__c⁄°
 *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

174 
__ty≥
,

175 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

176 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

177 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

178 *
__ª°ri˘
 
__h_î∫›
);

180 
	`gëho°by«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

181 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

182 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

183 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

184 *
__ª°ri˘
 
__h_î∫›
);

186 
	`gëho°by«me2_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, 
__af
,

187 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

188 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

189 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

190 *
__ª°ri˘
 
__h_î∫›
);

199 
	`£äëít
 (
__°ay_›í
);

205 
	`íd√ã¡
 ();

212 
√ã¡
 *
	`gë√ã¡
 ();

219 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

225 
√ã¡
 *
	`gë√tby«me
 (
__c⁄°
 *
__«me
);

227 #ifdef 
__USE_MISC


238 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

239 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

240 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

241 *
__ª°ri˘
 
__h_î∫›
);

243 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

244 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

245 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

246 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

247 *
__ª°ri˘
 
__h_î∫›
);

249 
	`gë√tby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

250 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

251 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

252 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

253 *
__ª°ri˘
 
__h_î∫›
);

258 
	s£rvít


260 *
s_«me
;

261 **
s_Æü£s
;

262 
s_p‹t
;

263 *
s_¥Ÿo
;

271 
	`£t£rvít
 (
__°ay_›í
);

277 
	`íd£rvít
 ();

284 
£rvít
 *
	`gë£rvít
 ();

291 
£rvít
 *
	`gë£rvby«me
 (
__c⁄°
 *
__«me
,

292 
__c⁄°
 *
__¥Ÿo
);

299 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, 
__c⁄°
 *
__¥Ÿo
);

302 #ifdef 
__USE_MISC


310 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

311 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

312 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

314 
	`gë£rvby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

315 
__c⁄°
 *
__ª°ri˘
 
__¥Ÿo
,

316 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

317 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

318 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

320 
	`gë£rvbyp‹t_r
 (
__p‹t
, 
__c⁄°
 *
__ª°ri˘
 
__¥Ÿo
,

321 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

322 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

323 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

328 
	s¥Ÿ€¡


330 *
p_«me
;

331 **
p_Æü£s
;

332 
p_¥Ÿo
;

340 
	`£çrŸ€¡
 (
__°ay_›í
);

346 
	`íd¥Ÿ€¡
 ();

353 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

359 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (
__c⁄°
 *
__«me
);

365 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

368 #ifdef 
__USE_MISC


376 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

377 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

378 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

380 
	`gë¥Ÿoby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

381 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

382 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

383 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

385 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

386 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

387 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

388 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

397 
	`£äëgª¡
 (
__c⁄°
 *
__√tgroup
);

405 
	`íd√tgª¡
 ();

414 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

415 **
__ª°ri˘
 
__u£Ω
,

416 **
__ª°ri˘
 
__domaöp
);

425 
	`ö√tgr
 (
__c⁄°
 *
__√tgroup
, __c⁄° *
__ho°
,

426 
__c⁄°
 *
__u£r
, __c⁄° *
__domaö
);

434 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

435 **
__ª°ri˘
 
__u£Ω
,

436 **
__ª°ri˘
 
__domaöp
,

437 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

441 #ifde‡
__USE_BSD


453 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

454 
__c⁄°
 *
__ª°ri˘
 
__locu£r
,

455 
__c⁄°
 *
__ª°ri˘
 
__ªmu£r
,

456 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

465 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

466 
__c⁄°
 *
__ª°ri˘
 
__locu£r
,

467 
__c⁄°
 *
__ª°ri˘
 
__ªmu£r
,

468 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

469 
ß_Ámûy_t
 
__af
);

481 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

482 
__c⁄°
 *
__ª°ri˘
 
__«me
,

483 
__c⁄°
 *
__ª°ri˘
 
__∑ss
,

484 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

493 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

494 
__c⁄°
 *
__ª°ri˘
 
__«me
,

495 
__c⁄°
 *
__ª°ri˘
 
__∑ss
,

496 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

497 
ß_Ámûy_t
 
__af
);

507 
	`ru£rok
 (
__c⁄°
 *
__rho°
, 
__su£r
,

508 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
);

517 
	`ru£rok_af
 (
__c⁄°
 *
__rho°
, 
__su£r
,

518 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
,

519 
ß_Ámûy_t
 
__af
);

530 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

531 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
);

541 
	`úu£rok_af
 (
__c⁄°
 *
__øddr
, 
__su£r
,

542 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
,

543 
ß_Ámûy_t
 
__af
);

553 
	`ºesvp‹t
 (*
__Æp‹t
);

562 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

567 #ifdef 
__USE_POSIX


569 
	saddröfo


571 
ai_Êags
;

572 
ai_Ámûy
;

573 
ai_sockty≥
;

574 
ai_¥Ÿocﬁ
;

575 
sockÀn_t
 
ai_addæí
;

576 
sockaddr
 *
ai_addr
;

577 *
ai_ˇn⁄«me
;

578 
addröfo
 *
ai_√xt
;

581 #ifde‡
__USE_GNU


583 
	sgaicb


585 c⁄° *
¨_«me
;

586 c⁄° *
¨_£rvi˚
;

587 c⁄° 
addröfo
 *
¨_ªque°
;

588 
addröfo
 *
¨_ªsu…
;

590 
__ªtu∫
;

591 
__unu£d
[5];

595 
	#GAI_WAIT
 0

	)

596 
	#GAI_NOWAIT
 1

	)

600 
	#AI_PASSIVE
 0x0001

	)

601 
	#AI_CANONNAME
 0x0002

	)

602 
	#AI_NUMERICHOST
 0x0004

	)

603 
	#AI_V4MAPPED
 0x0008

	)

604 
	#AI_ALL
 0x0010

	)

605 
	#AI_ADDRCONFIG
 0x0020

	)

607 #ifde‡
__USE_GNU


608 
	#AI_IDN
 0x0040

	)

611 
	#AI_CANONIDN
 0x0080

	)

612 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

614 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

617 
	#AI_NUMERICSERV
 0x0400

	)

620 
	#EAI_BADFLAGS
 -1

	)

621 
	#EAI_NONAME
 -2

	)

622 
	#EAI_AGAIN
 -3

	)

623 
	#EAI_FAIL
 -4

	)

624 
	#EAI_FAMILY
 -6

	)

625 
	#EAI_SOCKTYPE
 -7

	)

626 
	#EAI_SERVICE
 -8

	)

627 
	#EAI_MEMORY
 -10

	)

628 
	#EAI_SYSTEM
 -11

	)

629 
	#EAI_OVERFLOW
 -12

	)

630 #ifde‡
__USE_GNU


631 
	#EAI_NODATA
 -5

	)

632 
	#EAI_ADDRFAMILY
 -9

	)

633 
	#EAI_INPROGRESS
 -100

	)

634 
	#EAI_CANCELED
 -101

	)

635 
	#EAI_NOTCANCELED
 -102

	)

636 
	#EAI_ALLDONE
 -103

	)

637 
	#EAI_INTR
 -104

	)

638 
	#EAI_IDN_ENCODE
 -105

	)

641 #ifde‡
__USE_MISC


642 
	#NI_MAXHOST
 1025

	)

643 
	#NI_MAXSERV
 32

	)

646 
	#NI_NUMERICHOST
 1

	)

647 
	#NI_NUMERICSERV
 2

	)

648 
	#NI_NOFQDN
 4

	)

649 
	#NI_NAMEREQD
 8

	)

650 
	#NI_DGRAM
 16

	)

651 #ifde‡
__USE_GNU


652 
	#NI_IDN
 32

	)

653 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

655 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

664 
	`gëaddröfo
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

665 
__c⁄°
 *
__ª°ri˘
 
__£rvi˚
,

666 
__c⁄°
 
addröfo
 *
__ª°ri˘
 
__ªq
,

667 
addröfo
 **
__ª°ri˘
 
__∑i
);

670 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

673 
__c⁄°
 *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

679 
	`gë«meöfo
 (
__c⁄°
 
sockaddr
 *
__ª°ri˘
 
__ß
,

680 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

681 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

682 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

685 #ifde‡
__USE_GNU


694 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

695 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

705 
	`gai_su•íd
 (
__c⁄°
 
gaicb
 *__c⁄° 
__li°
[], 
__ít
,

706 
__c⁄°
 
time•ec
 *
__timeout
);

709 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

712 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

715 
__END_DECLS


	@/usr/include/netpacket/packet.h

20 #i‚de‡
__NETPACKET_PACKET_H


21 
	#__NETPACKET_PACKET_H
 1

	)

23 
	ssockaddr_Œ


25 
	m¶l_Ámûy
;

26 
	m¶l_¥Ÿocﬁ
;

27 
	m¶l_ifödex
;

28 
	m¶l_h©y≥
;

29 
	m¶l_pkây≥
;

30 
	m¶l_hÆí
;

31 
	m¶l_addr
[8];

36 
	#PACKET_HOST
 0

	)

37 
	#PACKET_BROADCAST
 1

	)

38 
	#PACKET_MULTICAST
 2

	)

39 
	#PACKET_OTHERHOST
 3

	)

40 
	#PACKET_OUTGOING
 4

	)

41 
	#PACKET_LOOPBACK
 5

	)

42 
	#PACKET_FASTROUTE
 6

	)

46 
	#PACKET_ADD_MEMBERSHIP
 1

	)

47 
	#PACKET_DROP_MEMBERSHIP
 2

	)

48 
	#PACKET_RECV_OUTPUT
 3

	)

49 
	#PACKET_RX_RING
 5

	)

50 
	#PACKET_STATISTICS
 6

	)

52 
	s∑ckë_mªq


54 
	mmr_ifödex
;

55 
	mmr_ty≥
;

56 
	mmr_Æí
;

57 
	mmr_addªss
[8];

60 
	#PACKET_MR_MULTICAST
 0

	)

61 
	#PACKET_MR_PROMISC
 1

	)

62 
	#PACKET_MR_ALLMULTI
 2

	)

	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

73 #ifde‡
__USE_POSIX199309


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

79 
	~<bôs/sigöfo.h
>

84 (*
	t__sigh™dÀr_t
) ();

89 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

90 
__THROW
;

91 #ifde‡
__USE_GNU


92 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

99 
__BEGIN_NAMESPACE_STD


100 #ifde‡
__USE_BSD


101 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

102 
__THROW
;

105 #ifde‡
__REDIRECT_NTH


106 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

107 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

108 
__sysv_sig«l
);

110 
	#sig«l
 
__sysv_sig«l


	)

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_XOPEN


118 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

119 
__THROW
;

125 #ifde‡
__USE_POSIX


126 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

129 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


133 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

136 
__BEGIN_NAMESPACE_STD


138 
	$øi£
 (
__sig
Ë
__THROW
;

139 
__END_NAMESPACE_STD


141 #ifde‡
__USE_SVID


143 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

144 
__THROW
;

145 
	$gsig«l
 (
__sig
Ë
__THROW
;

148 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


150 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 #ifde‡
__USE_XOPEN2K


155 
	`psigöfo
 (
__c⁄°
 
sigöfo_t
 *
__pöfo
, __c⁄° *
__s
);

168 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

170 #ifde‡
__FAVOR_BSD


173 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

175 #ifde‡
__USE_XOPEN


176 #ifde‡
__GNUC__


177 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

180 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

186 #ifde‡
__USE_BSD


193 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

196 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

202 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

206 #ifde‡
__USE_MISC


207 
	#NSIG
 
_NSIG


	)

210 #ifde‡
__USE_GNU


211 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

215 #ifde‡
__USE_BSD


216 
__sigh™dÀr_t
 
	tsig_t
;

219 #ifde‡
__USE_POSIX


222 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

235 
__THROW
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__USE_GNU


239 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

242 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

243 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

247 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

252 
	~<bôs/siga˘i⁄.h
>

255 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

256 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

263 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

266 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

267 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

270 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

277 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

278 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__USE_POSIX199309


285 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

286 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

293 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

294 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

295 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

296 
	`__n⁄nuŒ
 ((1));

300 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

301 
__THROW
;

306 #ifde‡
__USE_BSD


310 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

311 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

314 
	ssigvec


316 
__sigh™dÀr_t
 
sv_h™dÀr
;

317 
sv_mask
;

319 
sv_Êags
;

320 
	#sv_⁄°ack
 
sv_Êags


	)

324 
	#SV_ONSTACK
 (1 << 0)

	)

325 
	#SV_INTERRUPT
 (1 << 1)

	)

326 
	#SV_RESETHAND
 (1 << 2)

	)

334 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

335 
sigvec
 *
__ovec
Ë
__THROW
;

339 
	~<bôs/sigc⁄ãxt.h
>

342 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

347 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


348 
	#__√ed_size_t


	)

349 
	~<°ddef.h
>

354 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

356 
	~<bôs/sig°ack.h
>

357 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


359 
	~<sys/uc⁄ãxt.h
>

365 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

366 
__THROW
 
__©åibuã_dïªˇãd__
;

370 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

371 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

375 #ifde‡
__USE_XOPEN_EXTENDED


379 
	$sighﬁd
 (
__sig
Ë
__THROW
;

382 
	$sigªl£
 (
__sig
Ë
__THROW
;

385 
	$sigign‹e
 (
__sig
Ë
__THROW
;

388 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

391 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


394 
	~<bôs/±hªadty≥s.h
>

395 
	~<bôs/sigthªad.h
>

402 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

404 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

408 
__END_DECLS


	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

88 #ifde‡
__USE_XOPEN2K8


89 #i‚de‡
__off_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__off_t
 
	toff_t
;

93 
__off64_t
 
	toff_t
;

95 
	#__off_t_deföed


	)

97 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


98 
__off64_t
 
	toff64_t
;

99 
	#__off64_t_deföed


	)

102 #i‚de‡
__ssize_t_deföed


103 
__ssize_t
 
	tssize_t
;

104 
	#__ssize_t_deföed


	)

109 
__BEGIN_NAMESPACE_STD


110 #i‚de‡
__USE_FILE_OFFSET64


111 
_G_Âos_t
 
	tÂos_t
;

113 
_G_Âos64_t
 
	tÂos_t
;

115 
__END_NAMESPACE_STD


116 #ifde‡
__USE_LARGEFILE64


117 
_G_Âos64_t
 
	tÂos64_t
;

121 
	#_IOFBF
 0

	)

122 
	#_IOLBF
 1

	)

123 
	#_IONBF
 2

	)

127 #i‚de‡
BUFSIZ


128 
	#BUFSIZ
 
_IO_BUFSIZ


	)

134 #i‚de‡
EOF


135 
	#EOF
 (-1)

	)

141 
	#SEEK_SET
 0

	)

142 
	#SEEK_CUR
 1

	)

143 
	#SEEK_END
 2

	)

146 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


148 
	#P_tmpdú
 "/tmp"

	)

161 
	~<bôs/°dio_lim.h
>

165 
_IO_FILE
 *
°dö
;

166 
_IO_FILE
 *
°dout
;

167 
_IO_FILE
 *
°dîr
;

169 
	#°dö
 
°dö


	)

170 
	#°dout
 
°dout


	)

171 
	#°dîr
 
°dîr


	)

173 
__BEGIN_NAMESPACE_STD


175 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

177 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

178 
__END_NAMESPACE_STD


180 #ifde‡
__USE_ATFILE


182 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

183 
__c⁄°
 *
__√w
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


191 #i‚de‡
__USE_FILE_OFFSET64


192 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

194 #ifde‡
__REDIRECT


195 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

197 
	#tmpfûe
 
tmpfûe64


	)

201 #ifde‡
__USE_LARGEFILE64


202 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

206 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

207 
__END_NAMESPACE_STD


209 #ifde‡
__USE_MISC


212 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

216 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


224 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

225 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

229 
__BEGIN_NAMESPACE_STD


234 
	`f˛o£
 (
FILE
 *
__°ªam
);

239 
	`fÊush
 (
FILE
 *
__°ªam
);

240 
__END_NAMESPACE_STD


242 #ifde‡
__USE_MISC


249 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

252 #ifde‡
__USE_GNU


259 
	`f˛o£Æl
 ();

263 
__BEGIN_NAMESPACE_STD


264 #i‚de‡
__USE_FILE_OFFSET64


269 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

270 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

275 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

276 
__c⁄°
 *
__ª°ri˘
 
__modes
,

277 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

279 #ifde‡
__REDIRECT


280 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

281 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

282 
__wur
;

283 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

284 
__c⁄°
 *
__ª°ri˘
 
__modes
,

285 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

286 
__wur
;

288 
	#f›í
 
f›í64


	)

289 
	#‰e›í
 
‰e›í64


	)

292 
__END_NAMESPACE_STD


293 #ifde‡
__USE_LARGEFILE64


294 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

295 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

296 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

297 
__c⁄°
 *
__ª°ri˘
 
__modes
,

298 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

301 #ifdef 
__USE_POSIX


303 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

306 #ifdef 
__USE_GNU


309 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

310 
__c⁄°
 *
__ª°ri˘
 
__modes
,

311 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

314 #ifde‡
__USE_XOPEN2K8


316 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

317 
__THROW
 
__wur
;

322 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

326 
__BEGIN_NAMESPACE_STD


329 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

333 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

334 
__modes
, 
size_t
 
__n
Ë
__THROW
;

335 
__END_NAMESPACE_STD


337 #ifdef 
__USE_BSD


340 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

341 
size_t
 
__size
Ë
__THROW
;

344 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

348 
__BEGIN_NAMESPACE_STD


353 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

354 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

359 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

361 
	$•rötf
 (*
__ª°ri˘
 
__s
,

362 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

368 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

369 
_G_va_li°
 
__¨g
);

374 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

376 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

377 
_G_va_li°
 
__¨g
Ë
__THROW
;

378 
__END_NAMESPACE_STD


380 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


381 
__BEGIN_NAMESPACE_C99


383 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

384 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

385 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

387 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

388 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

389 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

390 
__END_NAMESPACE_C99


393 #ifde‡
__USE_GNU


396 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

397 
_G_va_li°
 
__¨g
)

398 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

399 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

400 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

401 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

402 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

403 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

404 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

407 #ifde‡
__USE_XOPEN2K8


414 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

415 
_G_va_li°
 
__¨g
)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

417 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

418 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

422 
__BEGIN_NAMESPACE_STD


427 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

428 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

435 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

436 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

438 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

439 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

440 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

441 #ifde‡
__REDIRECT


445 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

446 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_fsˇnf
Ë
__wur
;

448 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

449 
__isoc99_sˇnf
Ë
__wur
;

450 
	`__REDIRECT_NTH
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

451 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

452 
__isoc99_ssˇnf
);

454 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

455 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

456 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

457 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

458 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

459 
	#fsˇnf
 
__isoc99_fsˇnf


	)

460 
	#sˇnf
 
__isoc99_sˇnf


	)

461 
	#ssˇnf
 
__isoc99_ssˇnf


	)

465 
__END_NAMESPACE_STD


467 #ifdef 
__USE_ISOC99


468 
__BEGIN_NAMESPACE_C99


473 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

474 
_G_va_li°
 
__¨g
)

475 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

481 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

482 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

485 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

486 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

487 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

489 #i‡!
deföed
 
__USE_GNU
 \

490 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

491 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

492 #ifde‡
__REDIRECT


496 
	`__REDIRECT
 (
vfsˇnf
,

497 (
FILE
 *
__ª°ri˘
 
__s
,

498 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

499 
__isoc99_vfsˇnf
)

500 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

501 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

502 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

503 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

504 
	`__REDIRECT_NTH
 (
vssˇnf
,

505 (
__c⁄°
 *
__ª°ri˘
 
__s
,

506 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

507 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

508 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

510 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

511 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

514 
_G_va_li°
 
__¨g
Ë
__wur
;

515 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

516 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

517 
_G_va_li°
 
__¨g
Ë
__THROW
;

518 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

519 
	#vsˇnf
 
__isoc99_vsˇnf


	)

520 
	#vssˇnf
 
__isoc99_vssˇnf


	)

524 
__END_NAMESPACE_C99


528 
__BEGIN_NAMESPACE_STD


533 
	`fgëc
 (
FILE
 *
__°ªam
);

534 
	`gëc
 (
FILE
 *
__°ªam
);

540 
	`gëch¨
 ();

541 
__END_NAMESPACE_STD


545 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

547 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


552 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

553 
	`gëch¨_u∆ocked
 ();

556 #ifde‡
__USE_MISC


563 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

567 
__BEGIN_NAMESPACE_STD


575 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

576 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

582 
	`putch¨
 (
__c
);

583 
__END_NAMESPACE_STD


587 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

589 #ifde‡
__USE_MISC


596 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

599 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


604 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

605 
	`putch¨_u∆ocked
 (
__c
);

609 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

610 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

612 
	`gëw
 (
FILE
 *
__°ªam
);

615 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

619 
__BEGIN_NAMESPACE_STD


624 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

625 
__wur
;

632 *
	$gës
 (*
__s
Ë
__wur
;

633 
__END_NAMESPACE_STD


635 #ifde‡
__USE_GNU


642 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

643 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

647 #ifdef 
__USE_XOPEN2K8


658 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

659 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

660 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

661 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

662 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

663 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

671 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

672 
size_t
 *
__ª°ri˘
 
__n
,

673 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

677 
__BEGIN_NAMESPACE_STD


682 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

688 
	`puts
 (
__c⁄°
 *
__s
);

695 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

702 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

703 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

708 
size_t
 
	`fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

709 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

710 
__END_NAMESPACE_STD


712 #ifde‡
__USE_GNU


719 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

720 
FILE
 *
__ª°ri˘
 
__°ªam
);

723 #ifde‡
__USE_MISC


730 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

731 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

732 
size_t
 
	`fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

733 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

737 
__BEGIN_NAMESPACE_STD


742 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

747 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

752 
	`ªwöd
 (
FILE
 *
__°ªam
);

753 
__END_NAMESPACE_STD


760 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


761 #i‚de‡
__USE_FILE_OFFSET64


766 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

771 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

773 #ifde‡
__REDIRECT


774 
	`__REDIRECT
 (
f£eko
,

775 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

776 
f£eko64
);

777 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

779 
	#f£eko
 
f£eko64


	)

780 
	#·ñlo
 
·ñlo64


	)

785 
__BEGIN_NAMESPACE_STD


786 #i‚de‡
__USE_FILE_OFFSET64


791 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

796 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

798 #ifde‡
__REDIRECT


799 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

800 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

801 
	`__REDIRECT
 (
f£ços
,

802 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

804 
	#fgëpos
 
fgëpos64


	)

805 
	#f£ços
 
f£ços64


	)

808 
__END_NAMESPACE_STD


810 #ifde‡
__USE_LARGEFILE64


811 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

812 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

813 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

814 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

817 
__BEGIN_NAMESPACE_STD


819 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

821 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

823 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

824 
__END_NAMESPACE_STD


826 #ifde‡
__USE_MISC


828 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

829 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

834 
__BEGIN_NAMESPACE_STD


839 
	`≥º‹
 (
__c⁄°
 *
__s
);

840 
__END_NAMESPACE_STD


846 
	~<bôs/sys_îæi°.h
>

849 #ifdef 
__USE_POSIX


851 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

854 #ifde‡
__USE_MISC


856 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

860 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

861 
deföed
 
__USE_MISC
)

866 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

872 
	`p˛o£
 (
FILE
 *
__°ªam
);

876 #ifdef 
__USE_POSIX


878 *
	$˘îmid
 (*
__s
Ë
__THROW
;

882 #ifde‡
__USE_XOPEN


884 *
	`cu£rid
 (*
__s
);

888 #ifdef 
__USE_GNU


889 
ob°ack
;

892 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

893 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

894 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

895 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

896 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

897 
_G_va_li°
 
__¨gs
)

898 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

902 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


906 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

910 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

913 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

916 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


920 
	#__√ed_gë›t


	)

921 
	~<gë›t.h
>

926 #ifde‡
__USE_EXTERN_INLINES


927 
	~<bôs/°dio.h
>

929 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


930 
	~<bôs/°dio2.h
>

932 #ifde‡
__LDBL_COMPAT


933 
	~<bôs/°dio-ldbl.h
>

936 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

501 || 
deföed
 
__USE_BSD


503 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

506 #ifde‡
__USE_XOPEN2K


508 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #ifde‡
__USE_GNU


524 #ifde‡
__˝lu•lus


525 "C++" 
	`©_quick_exô
 ((*
__func
) ())

526 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

528 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
__END_NAMESPACE_STD


533 #ifdef 
__USE_MISC


536 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

537 
__THROW
 
	`__n⁄nuŒ
 ((1));

540 
__BEGIN_NAMESPACE_STD


544 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

546 #ifde‡
__USE_GNU


552 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
__END_NAMESPACE_STD


556 #ifde‡
__USE_ISOC99


557 
__BEGIN_NAMESPACE_C99


560 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

561 
__END_NAMESPACE_C99


565 
__BEGIN_NAMESPACE_STD


567 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

568 
__END_NAMESPACE_STD


572 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

573 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

575 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


579 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


585 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

586 
__THROW
 
	`__n⁄nuŒ
 ((2));

589 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #ifdef 
__USE_MISC


596 
	$˛óªnv
 (Ë
__THROW
;

600 #i‡
deföed
 
__USE_MISC
 \

601 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

761 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

762 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

763 #ifde‡
__USE_GNU


764 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

766 
	`__n⁄nuŒ
 ((1, 4));

771 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

773 
__END_NAMESPACE_STD


775 #ifde‡
__USE_ISOC99


776 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

777 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

781 
__BEGIN_NAMESPACE_STD


785 
div_t
 
	$div
 (
__numî
, 
__díom
)

786 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

787 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

788 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

789 
__END_NAMESPACE_STD


791 #ifde‡
__USE_ISOC99


792 
__BEGIN_NAMESPACE_C99


793 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

794 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

796 
__END_NAMESPACE_C99


800 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

801 || 
deföed
 
__USE_SVID


808 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

820 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

821 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

824 #ifde‡
__USE_MISC


826 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

827 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

828 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

829 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

833 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

838 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

839 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

840 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

841 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

846 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

847 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

848 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

857 
__BEGIN_NAMESPACE_STD


860 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

863 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

864 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

867 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

871 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

872 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

874 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

875 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

876 
__THROW
;

877 
__END_NAMESPACE_STD


880 #ifde‡
__USE_SVID


885 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


896 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

897 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

898 **
__ª°ri˘
 
__vÆuï
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

903 #ifde‡
__USE_XOPEN


905 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

911 #ifde‡
__USE_XOPEN2KXSI


913 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

916 #ifde‡
__USE_XOPEN


921 
	$gø¡±
 (
__fd
Ë
__THROW
;

925 
	$u∆ock±
 (
__fd
Ë
__THROW
;

930 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

933 #ifde‡
__USE_GNU


937 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

938 
__THROW
 
	`__n⁄nuŒ
 ((2));

941 
	`gë±
 ();

944 #ifde‡
__USE_BSD


948 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/sys/ioctl.h

19 #i‚def 
_SYS_IOCTL_H


20 
	#_SYS_IOCTL_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


27 
	~<bôs/io˘ls.h
>

30 
	~<bôs/io˘l-ty≥s.h
>

37 
	~<sys/âydeÁu…s.h
>

42 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

44 
__END_DECLS


	@/usr/include/sys/socket.h

21 #i‚def 
_SYS_SOCKET_H


22 
	#_SYS_SOCKET_H
 1

	)

24 
	~<„©uªs.h
>

26 
	g__BEGIN_DECLS


28 
	~<sys/uio.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

31 #ifde‡
__USE_GNU


33 
	~<bôs/sig£t.h
>

40 
	~<bôs/sockë.h
>

42 #ifde‡
__USE_BSD


45 
	sosockaddr


47 
	mß_Ámûy
;

48 
	mß_d©a
[14];

56 
	mSHUT_RD
 = 0,

57 
	#SHUT_RD
 
SHUT_RD


	)

58 
	mSHUT_WR
,

59 
	#SHUT_WR
 
SHUT_WR


	)

60 
	mSHUT_RDWR


61 
	#SHUT_RDWR
 
SHUT_RDWR


	)

70 #i‡
deföed
 
__˝lu•lus
 || !
__GNUC_PREREQ
 (2, 7Ë|| !deföed 
__USE_GNU


71 
	#__SOCKADDR_ARG
 
sockaddr
 *
__ª°ri˘


	)

72 
	#__CONST_SOCKADDR_ARG
 
__c⁄°
 
sockaddr
 *

	)

76 
	#__SOCKADDR_ALLTYPES
 \

77 
	`__SOCKADDR_ONETYPE
 (
sockaddr
) \

78 
	`__SOCKADDR_ONETYPE
 (
sockaddr_©
) \

79 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ax25
) \

80 
	`__SOCKADDR_ONETYPE
 (
sockaddr_dl
) \

81 
	`__SOCKADDR_ONETYPE
 (
sockaddr_e⁄
) \

82 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö
) \

83 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö6
) \

84 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö¨p
) \

85 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ùx
) \

86 
	`__SOCKADDR_ONETYPE
 (
sockaddr_iso
) \

87 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ns
) \

88 
	`__SOCKADDR_ONETYPE
 (
sockaddr_un
) \

89 
	`__SOCKADDR_ONETYPE
 (
sockaddr_x25
)

	)

91 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

92 uni⁄ { 
	m__SOCKADDR_ALLTYPES


93 } 
	t__SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

94 #unde‡
__SOCKADDR_ONETYPE


95 
	#__SOCKADDR_ONETYPE
(
ty≥
Ë
__c⁄°
 ty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

96 uni⁄ { 
	m__SOCKADDR_ALLTYPES


97 } 
	t__CONST_SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

98 #unde‡
__SOCKADDR_ONETYPE


105 
	$sockë
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
Ë
__THROW
;

111 
	$sockë∑ú
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
,

112 
__fds
[2]Ë
__THROW
;

115 
	$böd
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
)

116 
__THROW
;

119 
	$gësock«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

120 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

129 
	`c⁄√˘
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
);

133 
	$gë≥î«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

134 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

141 
ssize_t
 
	`£nd
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
, 
__Êags
);

148 
ssize_t
 
	`ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
);

155 
ssize_t
 
	`£ndto
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

156 
__Êags
, 
__CONST_SOCKADDR_ARG
 
__addr
,

157 
sockÀn_t
 
__addr_Àn
);

166 
ssize_t
 
	`ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

167 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

168 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

176 
ssize_t
 
	`£ndmsg
 (
__fd
, 
__c⁄°
 
msghdr
 *
__mesßge
,

177 
__Êags
);

184 
ssize_t
 
	`ªcvmsg
 (
__fd
, 
msghdr
 *
__mesßge
, 
__Êags
);

190 
	$gësock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

191 *
__ª°ri˘
 
__›tvÆ
,

192 
sockÀn_t
 *
__ª°ri˘
 
__›éí
Ë
__THROW
;

197 
	$£tsock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

198 
__c⁄°
 *
__›tvÆ
, 
sockÀn_t
 
__›éí
Ë
__THROW
;

204 
	$li°í
 (
__fd
, 
__n
Ë
__THROW
;

214 
	`ac˚±
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

215 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

217 #ifde‡
__USE_GNU


222 
	`ac˚±4
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

223 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
, 
__Êags
);

232 
	$shutdown
 (
__fd
, 
__how
Ë
__THROW
;

235 #ifde‡
__USE_XOPEN2K


237 
	$sock©m¨k
 (
__fd
Ë
__THROW
;

241 #ifde‡
__USE_MISC


245 
	$isfdty≥
 (
__fd
, 
__fdty≥
Ë
__THROW
;

250 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


251 
	~<bôs/sockë2.h
>

254 
__END_DECLS


	@/usr/include/sys/stat.h

24 #i‚def 
_SYS_STAT_H


25 
	#_SYS_STAT_H
 1

	)

27 
	~<„©uªs.h
>

29 
	~<bôs/ty≥s.h
>

31 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_MISC
 \

32 || 
deföed
 
	g__USE_ATFILE


33 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_time_t


	)

36 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ATFILE


37 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


45 #i‚de‡
__dev_t_deföed


46 
__dev_t
 
	tdev_t
;

47 
	#__dev_t_deföed


	)

50 #i‚de‡
__gid_t_deföed


51 
__gid_t
 
	tgid_t
;

52 
	#__gid_t_deföed


	)

55 #i‚de‡
__öo_t_deföed


56 #i‚de‡
__USE_FILE_OFFSET64


57 
__öo_t
 
	töo_t
;

59 
__öo64_t
 
	töo_t
;

61 
	#__öo_t_deföed


	)

64 #i‚de‡
__mode_t_deföed


65 
__mode_t
 
	tmode_t
;

66 
	#__mode_t_deföed


	)

69 #i‚de‡
__∆ök_t_deföed


70 
__∆ök_t
 
	t∆ök_t
;

71 
	#__∆ök_t_deföed


	)

74 #i‚de‡
__off_t_deföed


75 #i‚de‡
__USE_FILE_OFFSET64


76 
__off_t
 
	toff_t
;

78 
__off64_t
 
	toff_t
;

80 
	#__off_t_deföed


	)

83 #i‚de‡
__uid_t_deföed


84 
__uid_t
 
	tuid_t
;

85 
	#__uid_t_deföed


	)

89 #ifde‡
__USE_UNIX98


90 #i‚de‡
__blk˙t_t_deföed


91 #i‚de‡
__USE_FILE_OFFSET64


92 
__blk˙t_t
 
	tblk˙t_t
;

94 
__blk˙t64_t
 
	tblk˙t_t
;

96 
	#__blk˙t_t_deföed


	)

99 #i‚de‡
__blksize_t_deföed


100 
__blksize_t
 
	tblksize_t
;

101 
	#__blksize_t_deföed


	)

105 
	g__BEGIN_DECLS


107 
	~<bôs/°©.h
>

109 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


110 
	#S_IFMT
 
__S_IFMT


	)

111 
	#S_IFDIR
 
__S_IFDIR


	)

112 
	#S_IFCHR
 
__S_IFCHR


	)

113 
	#S_IFBLK
 
__S_IFBLK


	)

114 
	#S_IFREG
 
__S_IFREG


	)

115 #ifde‡
__S_IFIFO


116 
	#S_IFIFO
 
__S_IFIFO


	)

118 #ifde‡
__S_IFLNK


119 
	#S_IFLNK
 
__S_IFLNK


	)

121 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

122 && 
deföed
 
	g__S_IFSOCK


123 
	#S_IFSOCK
 
__S_IFSOCK


	)

129 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

131 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

132 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

133 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

134 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

135 #ifde‡
__S_IFIFO


136 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

138 #ifde‡
__S_IFLNK


139 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

142 #i‡
deföed
 
__USE_BSD
 && !deföed 
__S_IFLNK


143 
	#S_ISLNK
(
mode
Ë0

	)

146 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K
) \

147 && 
deföed
 
	g__S_IFSOCK


148 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

149 #ñi‡
deföed
 
__USE_XOPEN2K


150 
	#S_ISSOCK
(
mode
Ë0

	)

157 #ifdef 
__USE_POSIX199309


158 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

159 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

160 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

166 
	#S_ISUID
 
__S_ISUID


	)

167 
	#S_ISGID
 
__S_ISGID


	)

169 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


171 
	#S_ISVTX
 
__S_ISVTX


	)

174 
	#S_IRUSR
 
__S_IREAD


	)

175 
	#S_IWUSR
 
__S_IWRITE


	)

176 
	#S_IXUSR
 
__S_IEXEC


	)

178 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

180 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_BSD


181 
	#S_IREAD
 
S_IRUSR


	)

182 
	#S_IWRITE
 
S_IWUSR


	)

183 
	#S_IEXEC
 
S_IXUSR


	)

186 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

187 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

188 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

190 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

192 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

193 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

194 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

196 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

199 #ifdef 
__USE_BSD


201 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

202 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

203 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

205 
	#S_BLKSIZE
 512

	)

209 #i‚de‡
__USE_FILE_OFFSET64


211 
	$°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

212 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

216 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

218 #ifde‡
__REDIRECT_NTH


219 
	`__REDIRECT_NTH
 (
°©
, (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

220 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

221 
	`__n⁄nuŒ
 ((1, 2));

222 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

223 
	`__n⁄nuŒ
 ((2));

225 
	#°©
 
°©64


	)

226 
	#f°©
 
f°©64


	)

229 #ifde‡
__USE_LARGEFILE64


230 
	$°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

231 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

232 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

235 #ifde‡
__USE_ATFILE


239 #i‚de‡
__USE_FILE_OFFSET64


240 
	$f°©©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

241 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

242 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

244 #ifde‡
__REDIRECT_NTH


245 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

246 
°©
 *
__ª°ri˘
 
__buf
,

247 
__Êag
),

248 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

250 
	#f°©©
 
f°©©64


	)

254 #ifde‡
__USE_LARGEFILE64


255 
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

256 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

257 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

261 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


262 #i‚de‡
__USE_FILE_OFFSET64


265 
	$l°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

266 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

268 #ifde‡
__REDIRECT_NTH


269 
	`__REDIRECT_NTH
 (
l°©
,

270 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

271 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

272 
	`__n⁄nuŒ
 ((1, 2));

274 
	#l°©
 
l°©64


	)

277 #ifde‡
__USE_LARGEFILE64


278 
	$l°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

279 
°©64
 *
__ª°ri˘
 
__buf
)

280 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

286 
	$chmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_BSD


293 
	$lchmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

298 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


299 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

302 #ifde‡
__USE_ATFILE


305 
	$fchmod©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
,

306 
__Êag
)

307 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

314 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

316 #ifdef 
__USE_GNU


319 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

323 
	$mkdú
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1));

326 #ifde‡
__USE_ATFILE


330 
	$mkdú©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

331 
__THROW
 
	`__n⁄nuŒ
 ((2));

337 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


338 
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

339 
__THROW
 
	`__n⁄nuŒ
 ((1));

341 #ifde‡
__USE_ATFILE


345 
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

346 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

352 
	$mkfifo
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

353 
__THROW
 
	`__n⁄nuŒ
 ((1));

355 #ifde‡
__USE_ATFILE


359 
	$mkfifﬂt
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

360 
__THROW
 
	`__n⁄nuŒ
 ((2));

363 #ifde‡
__USE_ATFILE


366 
	$utimíßt
 (
__fd
, 
__c⁄°
 *
__∑th
,

367 
__c⁄°
 
time•ec
 
__times
[2],

368 
__Êags
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2));

372 #ifde‡
__USE_XOPEN2K8


374 
	$futimís
 (
__fd
, 
__c⁄°
 
time•ec
 
__times
[2]Ë
__THROW
;

392 #i‚de‡
_STAT_VER


393 
	#_STAT_VER
 0

	)

395 #i‚de‡
_MKNOD_VER


396 
	#_MKNOD_VER
 0

	)

400 #i‚de‡
__USE_FILE_OFFSET64


401 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

402 
__THROW
 
	`__n⁄nuŒ
 ((3));

403 
	$__x°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

404 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

405 
	$__lx°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

406 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

407 
	$__fx°©©
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

408 
°©
 *
__°©_buf
, 
__Êag
)

409 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

411 #ifde‡
__REDIRECT_NTH


412 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

413 
°©
 *
__°©_buf
), 
__fx°©64
)

414 
	`__n⁄nuŒ
 ((3));

415 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

416 
°©
 *
__°©_buf
), 
__x°©64
)

417 
	`__n⁄nuŒ
 ((2, 3));

418 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

419 
°©
 *
__°©_buf
), 
__lx°©64
)

420 
	`__n⁄nuŒ
 ((2, 3));

421 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

422 
__c⁄°
 *
__fûíame
,

423 
°©
 *
__°©_buf
, 
__Êag
),

424 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

427 
	#__fx°©
 
__fx°©64


	)

428 
	#__x°©
 
__x°©64


	)

429 
	#__lx°©
 
__lx°©64


	)

433 #ifde‡
__USE_LARGEFILE64


434 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

435 
__THROW
 
	`__n⁄nuŒ
 ((3));

436 
	$__x°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

437 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

438 
	$__lx°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

439 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

440 
	$__fx°©©64
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

441 
°©64
 *
__°©_buf
, 
__Êag
)

442 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

444 
	$__xmknod
 (
__vî
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

445 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

447 
	$__xmknod©
 (
__vî
, 
__fd
, 
__c⁄°
 *
__∑th
,

448 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

449 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

451 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES_IN_LIBC


454 
__exã∫_ölöe
 

455 
	`__NTH
 (
	$°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

457  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

458 
	}
}

460 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


461 
__exã∫_ölöe
 

462 
__NTH
 (
	$l°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

464  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

465 
	}
}

468 
__exã∫_ölöe
 

469 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

471  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

472 
	}
}

474 #ifde‡
__USE_ATFILE


475 
__exã∫_ölöe
 

476 
__NTH
 (
	$f°©©
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©
 *
__°©buf
,

477 
__Êag
))

479  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

480 
	}
}

483 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD


484 
__exã∫_ölöe
 

485 
__NTH
 (
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

487  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

488 
	}
}

491 #ifde‡
__USE_ATFILE


492 
__exã∫_ölöe
 

493 
__NTH
 (
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

494 
__dev_t
 
__dev
))

496  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

497 
	}
}

500 #i‡
deföed
 
__USE_LARGEFILE64
 \

501 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

502 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

503 
__exã∫_ölöe
 

504 
__NTH
 (
	$°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

506  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

507 
	}
}

509 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


510 
__exã∫_ölöe
 

511 
__NTH
 (
	$l°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

513  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

514 
	}
}

517 
__exã∫_ölöe
 

518 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

520  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

521 
	}
}

523 #ifde‡
__USE_ATFILE


524 
__exã∫_ölöe
 

525 
__NTH
 (
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©64
 *
__°©buf
,

526 
__Êag
))

528  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

529 
	}
}

536 
	g__END_DECLS


	@/usr/include/sys/types.h

23 #i‚def 
_SYS_TYPES_H


24 
	#_SYS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 #ifdef 
__USE_BSD


33 #i‚de‡
__u_ch¨_deföed


34 
__u_ch¨
 
	tu_ch¨
;

35 
__u_sh‹t
 
	tu_sh‹t
;

36 
__u_öt
 
	tu_öt
;

37 
__u_l⁄g
 
	tu_l⁄g
;

38 
__quad_t
 
	tquad_t
;

39 
__u_quad_t
 
	tu_quad_t
;

40 
__fsid_t
 
	tfsid_t
;

41 
	#__u_ch¨_deföed


	)

45 
__loff_t
 
	tloff_t
;

47 #i‚de‡
__öo_t_deföed


48 #i‚de‡
__USE_FILE_OFFSET64


49 
__öo_t
 
	töo_t
;

51 
__öo64_t
 
	töo_t
;

53 
	#__öo_t_deföed


	)

55 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


56 
__öo64_t
 
	töo64_t
;

57 
	#__öo64_t_deföed


	)

60 #i‚de‡
__dev_t_deföed


61 
__dev_t
 
	tdev_t
;

62 
	#__dev_t_deföed


	)

65 #i‚de‡
__gid_t_deföed


66 
__gid_t
 
	tgid_t
;

67 
	#__gid_t_deföed


	)

70 #i‚de‡
__mode_t_deföed


71 
__mode_t
 
	tmode_t
;

72 
	#__mode_t_deföed


	)

75 #i‚de‡
__∆ök_t_deföed


76 
__∆ök_t
 
	t∆ök_t
;

77 
	#__∆ök_t_deföed


	)

80 #i‚de‡
__uid_t_deföed


81 
__uid_t
 
	tuid_t
;

82 
	#__uid_t_deföed


	)

85 #i‚de‡
__off_t_deföed


86 #i‚de‡
__USE_FILE_OFFSET64


87 
__off_t
 
	toff_t
;

89 
__off64_t
 
	toff_t
;

91 
	#__off_t_deföed


	)

93 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


94 
__off64_t
 
	toff64_t
;

95 
	#__off64_t_deföed


	)

98 #i‚de‡
__pid_t_deföed


99 
__pid_t
 
	tpid_t
;

100 
	#__pid_t_deföed


	)

103 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

104 && !
deföed
 
__id_t_deföed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_deföed


	)

109 #i‚de‡
__ssize_t_deföed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_deföed


	)

114 #ifdef 
__USE_BSD


115 #i‚de‡
__daddr_t_deföed


116 
__daddr_t
 
	tdaddr_t
;

117 
__ˇddr_t
 
	tˇddr_t
;

118 
	#__daddr_t_deföed


	)

122 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_deföed


	)

127 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


128 
	#__√ed_˛ock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timî_t


	)

132 
	#__√ed_˛ockid_t


	)

133 
	~<time.h
>

135 #ifde‡
__USE_XOPEN


136 #i‚de‡
__u£c⁄ds_t_deföed


137 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

138 
	#__u£c⁄ds_t_deföed


	)

140 #i‚de‡
__su£c⁄ds_t_deföed


141 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

142 
	#__su£c⁄ds_t_deföed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifde‡
__USE_MISC


151 
	tul⁄g
;

152 
	tush‹t
;

153 
	tuöt
;

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 #i‚de‡
__öt8_t_deföed


162 
	#__öt8_t_deföed


	)

163 
	töt8_t
;

164 
	töt16_t
;

165 
	töt32_t
;

166 #i‡
__WORDSIZE
 == 64

167 
	töt64_t
;

168 #ñi‡
__GLIBC_HAVE_LONG_LONG


169 
__exãnsi⁄__
 
	töt64_t
;

174 
	tu_öt8_t
;

175 
	tu_öt16_t
;

176 
	tu_öt32_t
;

177 #i‡
__WORDSIZE
 == 64

178 
	tu_öt64_t
;

179 #ñi‡
__GLIBC_HAVE_LONG_LONG


180 
__exãnsi⁄__
 
	tu_öt64_t
;

183 
	tªgi°î_t
;

188 
	#__ötN_t
(
N
, 
MODE
) \

189 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

190 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

191 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

193 #i‚de‡
	t__öt8_t_deföed


194 
	t__öt8_t_deföed


	)

195 
	t__ötN_t
 (8, 
	t__QI__
);

196 
__ötN_t
 (16, 
__HI__
);

197 
__ötN_t
 (32, 
__SI__
);

198 
__ötN_t
 (64, 
__DI__
);

201 
__u_ötN_t
 (8, 
__QI__
);

202 
__u_ötN_t
 (16, 
__HI__
);

203 
__u_ötN_t
 (32, 
__SI__
);

204 
__u_ötN_t
 (64, 
__DI__
);

206 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

212 
	#__BIT_TYPES_DEFINED__
 1

	)

215 #ifdef 
__USE_BSD


217 
	~<ídün.h
>

220 
	~<sys/£À˘.h
>

223 
	~<sys/sysma¸os.h
>

227 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

228 && !
deföed
 
__blksize_t_deföed


229 
__blksize_t
 
	tblksize_t
;

230 
	#__blksize_t_deföed


	)

234 #i‚de‡
__USE_FILE_OFFSET64


235 #i‚de‡
__blk˙t_t_deföed


236 
__blk˙t_t
 
	tblk˙t_t
;

237 
	#__blk˙t_t_deföed


	)

239 #i‚de‡
__fsblk˙t_t_deföed


240 
__fsblk˙t_t
 
	tfsblk˙t_t
;

241 
	#__fsblk˙t_t_deföed


	)

243 #i‚de‡
__fsfû˙t_t_deföed


244 
__fsfû˙t_t
 
	tfsfû˙t_t
;

245 
	#__fsfû˙t_t_deföed


	)

248 #i‚de‡
__blk˙t_t_deföed


249 
__blk˙t64_t
 
	tblk˙t_t
;

250 
	#__blk˙t_t_deföed


	)

252 #i‚de‡
__fsblk˙t_t_deföed


253 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

254 
	#__fsblk˙t_t_deföed


	)

256 #i‚de‡
__fsfû˙t_t_deföed


257 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

258 
	#__fsfû˙t_t_deföed


	)

262 #ifde‡
__USE_LARGEFILE64


263 
__blk˙t64_t
 
	tblk˙t64_t
;

264 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

265 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

270 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


271 
	~<bôs/±hªadty≥s.h
>

274 
	g__END_DECLS


	@/usr/include/sys/wait.h

24 #i‚def 
_SYS_WAIT_H


25 
	#_SYS_WAIT_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<sig«l.h
>

32 
	~<sys/ªsour˚.h
>

35 #i‡!
deföed
 
_STDLIB_H
 || (!deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K8
)

38 
	~<bôs/waôÊags.h
>

40 #ifdef 
__USE_BSD


45 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


46 
	#__WAIT_INT
(
°©us
) \

47 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

48 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

50 
	#__WAIT_INT
(
°©us
Ë(*(
__c⁄°
 *Ë&(°©us))

	)

58 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


59 
	#__WAIT_STATUS
 *

	)

60 
	#__WAIT_STATUS_DEFN
 *

	)

65 
waô
 *
	m__u±r
;

66 *
	m__ùå
;

67 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

68 
	#__WAIT_STATUS_DEFN
 *

	)

73 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

74 
	#__WAIT_STATUS
 *

	)

75 
	#__WAIT_STATUS_DEFN
 *

	)

80 
	~<bôs/waô°©us.h
>

82 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

83 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

84 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

88 #ifde‡
__WIFCONTINUED


89 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

93 #ifdef 
__USE_BSD


94 
	#WCOREFLAG
 
__WCOREFLAG


	)

95 
	#WCOREDUMP
(
°©us
Ë
	`__WCOREDUMP
 (
	`__WAIT_INT
 (°©us))

	)

96 
	#W_EXITCODE
(
ªt
, 
sig
Ë
	`__W_EXITCODE
 (ªt, sig)

	)

97 
	#W_STOPCODE
(
sig
Ë
	`__W_STOPCODE
 (sig)

	)

101 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


104 
	mP_ALL
,

105 
	mP_PID
,

106 
	mP_PGID


107 } 
	tidty≥_t
;

116 
__pid_t
 
waô
 (
__WAIT_STATUS
 
__°©_loc
);

118 #ifdef 
__USE_BSD


120 
	#WAIT_ANY
 (-1Ë

	)

121 
	#WAIT_MYPGRP
 0

	)

139 
__pid_t
 
waôpid
 (__pid_à
__pid
, *
__°©_loc
, 
__›ti⁄s
);

141 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


142 
	#__√ed_sigöfo_t


	)

143 
	~<bôs/sigöfo.h
>

155 
waôid
 (
idty≥_t
 
__idty≥
, 
__id_t
 
__id
, 
sigöfo_t
 *
__öf›
,

156 
__›ti⁄s
);

159 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


162 
	grußge
;

169 
__pid_t
 
	$waô3
 (
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

170 
rußge
 * 
__ußge
Ë
__THROW
;

173 #ifde‡
__USE_BSD


175 
__pid_t
 
	$waô4
 (
__pid_t
 
__pid
, 
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

176 
rußge
 *
__ußge
Ë
__THROW
;

180 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


33 #ifde‡
__USE_XOPEN2K8


35 
	#_POSIX_VERSION
 200809L

	)

36 #ñi‡
deföed
 
__USE_XOPEN2K


38 
	#_POSIX_VERSION
 200112L

	)

39 #ñi‡
deföed
 
__USE_POSIX199506


41 
	#_POSIX_VERSION
 199506L

	)

42 #ñi‡
deföed
 
__USE_POSIX199309


44 
	#_POSIX_VERSION
 199309L

	)

47 
	#_POSIX_VERSION
 199009L

	)

53 #ifde‡
__USE_XOPEN2K8


54 
	#__POSIX2_THIS_VERSION
 200809L

	)

56 #ñi‡
deföed
 
__USE_XOPEN2K


58 
	#__POSIX2_THIS_VERSION
 200112L

	)

59 #ñi‡
deföed
 
__USE_POSIX199506


61 
	#__POSIX2_THIS_VERSION
 199506L

	)

64 
	#__POSIX2_THIS_VERSION
 199209L

	)

68 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

72 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

76 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

80 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

84 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

87 #ifde‡
__USE_XOPEN2K8


88 
	#_XOPEN_VERSION
 700

	)

89 #ñi‡
deföed
 
__USE_XOPEN2K


90 
	#_XOPEN_VERSION
 600

	)

91 #ñi‡
deföed
 
__USE_UNIX98


92 
	#_XOPEN_VERSION
 500

	)

94 
	#_XOPEN_VERSION
 4

	)

98 
	#_XOPEN_XCU_VERSION
 4

	)

101 
	#_XOPEN_XPG2
 1

	)

102 
	#_XOPEN_XPG3
 1

	)

103 
	#_XOPEN_XPG4
 1

	)

106 
	#_XOPEN_UNIX
 1

	)

109 
	#_XOPEN_CRYPT
 1

	)

113 
	#_XOPEN_ENH_I18N
 1

	)

116 
	#_XOPEN_LEGACY
 1

	)

203 
	~<bôs/posix_›t.h
>

206 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


207 
	~<bôs/ívú⁄míts.h
>

211 
	#STDIN_FILENO
 0

	)

212 
	#STDOUT_FILENO
 1

	)

213 
	#STDERR_FILENO
 2

	)

218 
	~<bôs/ty≥s.h
>

220 #i‚def 
__ssize_t_deföed


221 
__ssize_t
 
	tssize_t
;

222 
	#__ssize_t_deföed


	)

225 
	#__√ed_size_t


	)

226 
	#__√ed_NULL


	)

227 
	~<°ddef.h
>

229 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


232 #i‚de‡
__gid_t_deföed


233 
__gid_t
 
	tgid_t
;

234 
	#__gid_t_deföed


	)

237 #i‚de‡
__uid_t_deföed


238 
__uid_t
 
	tuid_t
;

239 
	#__uid_t_deföed


	)

242 #i‚de‡
__off_t_deföed


243 #i‚de‡
__USE_FILE_OFFSET64


244 
__off_t
 
	toff_t
;

246 
__off64_t
 
	toff_t
;

248 
	#__off_t_deföed


	)

250 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


251 
__off64_t
 
	toff64_t
;

252 
	#__off64_t_deföed


	)

255 #i‚de‡
__u£c⁄ds_t_deföed


256 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

257 
	#__u£c⁄ds_t_deföed


	)

260 #i‚de‡
__pid_t_deföed


261 
__pid_t
 
	tpid_t
;

262 
	#__pid_t_deföed


	)

266 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


267 #i‚de‡
__öçå_t_deföed


268 
__öçå_t
 
	töçå_t
;

269 
	#__öçå_t_deföed


	)

273 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


274 #i‚de‡
__sockÀn_t_deföed


275 
__sockÀn_t
 
	tsockÀn_t
;

276 
	#__sockÀn_t_deföed


	)

282 
	#R_OK
 4

	)

283 
	#W_OK
 2

	)

284 
	#X_OK
 1

	)

285 
	#F_OK
 0

	)

288 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_GNU


293 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1));

301 #ifde‡
__USE_ATFILE


305 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 #i‚def 
_STDIO_H


312 
	#SEEK_SET
 0

	)

313 
	#SEEK_CUR
 1

	)

314 
	#SEEK_END
 2

	)

317 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


319 
	#L_SET
 
SEEK_SET


	)

320 
	#L_INCR
 
SEEK_CUR


	)

321 
	#L_XTND
 
SEEK_END


	)

330 #i‚de‡
__USE_FILE_OFFSET64


331 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

333 #ifde‡
__REDIRECT_NTH


334 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

335 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

336 
l£ek64
);

338 
	#l£ek
 
l£ek64


	)

341 #ifde‡
__USE_LARGEFILE64


342 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

343 
__THROW
;

350 
	`˛o£
 (
__fd
);

357 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

363 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

365 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


366 #i‚de‡
__USE_FILE_OFFSET64


373 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

374 
__off_t
 
__off£t
Ë
__wur
;

381 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

382 
__off_t
 
__off£t
Ë
__wur
;

384 #ifde‡
__REDIRECT


385 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

386 
__off64_t
 
__off£t
),

387 
¥ód64
Ë
__wur
;

388 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

389 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

390 
pwrôe64
Ë
__wur
;

392 
	#¥ód
 
¥ód64


	)

393 
	#pwrôe
 
pwrôe64


	)

397 #ifde‡
__USE_LARGEFILE64


401 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

402 
__off64_t
 
__off£t
Ë
__wur
;

405 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

406 
__off64_t
 
__off£t
Ë
__wur
;

414 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

416 #ifde‡
__USE_GNU


419 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

429 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

441 
	`¶ìp
 (
__£c⁄ds
);

443 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

444 || 
deföed
 
__USE_BSD


449 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

450 
__THROW
;

457 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

466 
	`∑u£
 ();

470 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

471 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

473 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


475 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

480 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

481 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

485 #ifde‡
__USE_ATFILE


488 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

489 
__gid_t
 
__group
, 
__Êag
)

490 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

494 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

496 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


498 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

508 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

510 #ifdef 
__USE_GNU


514 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

517 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

518 || 
deföed
 
__USE_BSD


522 *
	$gëwd
 (*
__buf
)

523 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

528 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

531 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

533 #ifde‡
__USE_GNU


536 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

540 **
__ívú⁄
;

541 #ifde‡
__USE_GNU


542 **
ívú⁄
;

548 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

549 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

551 #ifde‡
__USE_XOPEN2K8


554 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

555 
__THROW
 
	`__n⁄nuŒ
 ((2));

560 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

565 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

566 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

570 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

571 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

575 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifde‡
__USE_GNU


587 
	$execv≥
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[],

588 *
__c⁄°
 
__ívp
[])

589 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

593 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


595 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

600 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

606 
	~<bôs/c⁄‚ame.h
>

609 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

610 
__THROW
 
	`__n⁄nuŒ
 ((1));

613 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

616 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

618 #ifdef 
__USE_POSIX2


620 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

625 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

628 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

632 #i‚de‡
__FAVOR_BSD


633 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

635 #ifde‡
__REDIRECT_NTH


636 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

638 
	#gëpgΩ
 
__gëpgid


	)

643 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

644 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


645 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

652 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

654 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


665 #i‚de‡
__FAVOR_BSD


669 
	$£çgΩ
 (Ë
__THROW
;

674 #ifde‡
__REDIRECT_NTH


675 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

677 
	#£çgΩ
 
£çgid


	)

686 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

688 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


690 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

694 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

697 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

700 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

703 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

708 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

710 #ifdef 
__USE_GNU


712 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

719 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

721 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


724 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

727 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


729 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

736 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

738 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


741 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

744 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


746 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

749 #ifde‡
__USE_GNU


752 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

753 
__THROW
;

757 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

758 
__THROW
;

762 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

763 
__THROW
;

767 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

768 
__THROW
;

775 
__pid_t
 
	$f‹k
 (Ë
__THROW
;

777 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

778 || 
deföed
 
__USE_BSD


783 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

789 *
	$ây«me
 (
__fd
Ë
__THROW
;

793 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

794 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

798 
	$ißây
 (
__fd
Ë
__THROW
;

800 #i‡
deföed
 
__USE_BSD
 \

801 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

804 
	$ây¶Ÿ
 (Ë
__THROW
;

809 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

810 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

812 #ifde‡
__USE_ATFILE


815 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

816 
__c⁄°
 *
__to
, 
__Êags
)

817 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

820 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


822 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

823 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

828 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

829 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

830 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

833 #ifde‡
__USE_ATFILE


835 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

836 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

839 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

840 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

841 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

845 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

847 #ifde‡
__USE_ATFILE


849 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

850 
__THROW
 
	`__n⁄nuŒ
 ((2));

854 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

858 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

861 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

868 *
	`gëlogö
 ();

869 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


876 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

879 #ifdef 
__USE_BSD


881 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

885 #ifdef 
__USE_POSIX2


889 
	#__√ed_gë›t


	)

890 
	~<gë›t.h
>

894 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


898 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

902 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

905 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

906 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

910 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

916 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

917 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

918 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

925 
	$vh™gup
 (Ë
__THROW
;

928 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

936 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

937 
size_t
 
__off£t
, 
__sˇÀ
)

938 
__THROW
 
	`__n⁄nuŒ
 ((1));

944 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

948 *
	$gëu£rshñl
 (Ë
__THROW
;

949 
	$ídu£rshñl
 (Ë
__THROW
;

950 
	$£tu£rshñl
 (Ë
__THROW
;

956 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

960 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

963 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

967 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

971 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


976 
	`fsync
 (
__fd
);

980 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


983 
	`gëho°id
 ();

986 
	$sync
 (Ë
__THROW
;

989 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


992 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

997 
	$gëdèbÀsize
 (Ë
__THROW
;

1003 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1006 #i‚de‡
__USE_FILE_OFFSET64


1007 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

1008 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1010 #ifde‡
__REDIRECT_NTH


1011 
	`__REDIRECT_NTH
 (
åunˇã
,

1012 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

1013 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1015 
	#åunˇã
 
åunˇã64


	)

1018 #ifde‡
__USE_LARGEFILE64


1019 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

1020 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1025 #i‚de‡
__USE_FILE_OFFSET64


1026 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1028 #ifde‡
__REDIRECT_NTH


1029 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1030 
·runˇã64
Ë
__wur
;

1032 
	#·runˇã
 
·runˇã64


	)

1035 #ifde‡
__USE_LARGEFILE64


1036 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1042 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1043 || 
deföed
 
__USE_MISC


1047 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1053 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1057 #ifde‡
__USE_MISC


1068 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1073 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1085 
	#F_ULOCK
 0

	)

1086 
	#F_LOCK
 1

	)

1087 
	#F_TLOCK
 2

	)

1088 
	#F_TEST
 3

	)

1090 #i‚de‡
__USE_FILE_OFFSET64


1091 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1093 #ifde‡
__REDIRECT


1094 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1095 
lockf64
Ë
__wur
;

1097 
	#lockf
 
lockf64


	)

1100 #ifde‡
__USE_LARGEFILE64


1101 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1106 #ifde‡
__USE_GNU


1111 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1112 (
__exãnsi⁄__
 \

1113 ({ 
__ªsu…
; \

1114 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1115 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1116 
__ªsu…
; 
	}
}))

	)

1119 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1122 
fd©async
 (
__fûdes
);

1128 #ifdef 
__USE_XOPEN


1130 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1131 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1135 
	$í¸y±
 (*
__libc_block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1142 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1143 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1149 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


1151 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1156 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1157 
	~<bôs/uni°d.h
>

1160 
__END_DECLS


	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/asm/sockios.h

1 
	~<asm-gíîic/sockios.h
>

	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 
	#dma_addr_t
 
dma_addr_t


	)

6 
	~<asm-gíîic/ty≥s.h
>

	@/usr/include/bits/confname.h

21 #i‚de‡
_UNISTD_H


28 
	m_PC_LINK_MAX
,

29 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

30 
	m_PC_MAX_CANON
,

31 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

32 
	m_PC_MAX_INPUT
,

33 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

34 
	m_PC_NAME_MAX
,

35 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

36 
	m_PC_PATH_MAX
,

37 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

38 
	m_PC_PIPE_BUF
,

39 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

40 
	m_PC_CHOWN_RESTRICTED
,

41 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

42 
	m_PC_NO_TRUNC
,

43 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

44 
	m_PC_VDISABLE
,

45 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

46 
	m_PC_SYNC_IO
,

47 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

48 
	m_PC_ASYNC_IO
,

49 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

50 
	m_PC_PRIO_IO
,

51 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

52 
	m_PC_SOCK_MAXBUF
,

53 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

54 
	m_PC_FILESIZEBITS
,

55 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

56 
	m_PC_REC_INCR_XFER_SIZE
,

57 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

58 
	m_PC_REC_MAX_XFER_SIZE
,

59 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

60 
	m_PC_REC_MIN_XFER_SIZE
,

61 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

62 
	m_PC_REC_XFER_ALIGN
,

63 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

64 
	m_PC_ALLOC_SIZE_MIN
,

65 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

66 
	m_PC_SYMLINK_MAX
,

67 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

68 
	m_PC_2_SYMLINKS


69 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

75 
	m_SC_ARG_MAX
,

76 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

77 
	m_SC_CHILD_MAX
,

78 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

79 
	m_SC_CLK_TCK
,

80 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

81 
	m_SC_NGROUPS_MAX
,

82 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

83 
	m_SC_OPEN_MAX
,

84 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

85 
	m_SC_STREAM_MAX
,

86 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

87 
	m_SC_TZNAME_MAX
,

88 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

89 
	m_SC_JOB_CONTROL
,

90 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

91 
	m_SC_SAVED_IDS
,

92 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

93 
	m_SC_REALTIME_SIGNALS
,

94 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

95 
	m_SC_PRIORITY_SCHEDULING
,

96 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

97 
	m_SC_TIMERS
,

98 
	#_SC_TIMERS
 
_SC_TIMERS


	)

99 
	m_SC_ASYNCHRONOUS_IO
,

100 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

101 
	m_SC_PRIORITIZED_IO
,

102 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

103 
	m_SC_SYNCHRONIZED_IO
,

104 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

105 
	m_SC_FSYNC
,

106 
	#_SC_FSYNC
 
_SC_FSYNC


	)

107 
	m_SC_MAPPED_FILES
,

108 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

109 
	m_SC_MEMLOCK
,

110 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

111 
	m_SC_MEMLOCK_RANGE
,

112 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

113 
	m_SC_MEMORY_PROTECTION
,

114 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

115 
	m_SC_MESSAGE_PASSING
,

116 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

117 
	m_SC_SEMAPHORES
,

118 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

119 
	m_SC_SHARED_MEMORY_OBJECTS
,

120 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

121 
	m_SC_AIO_LISTIO_MAX
,

122 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

123 
	m_SC_AIO_MAX
,

124 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

125 
	m_SC_AIO_PRIO_DELTA_MAX
,

126 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

127 
	m_SC_DELAYTIMER_MAX
,

128 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

129 
	m_SC_MQ_OPEN_MAX
,

130 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

131 
	m_SC_MQ_PRIO_MAX
,

132 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

133 
	m_SC_VERSION
,

134 
	#_SC_VERSION
 
_SC_VERSION


	)

135 
	m_SC_PAGESIZE
,

136 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

137 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

138 
	m_SC_RTSIG_MAX
,

139 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

140 
	m_SC_SEM_NSEMS_MAX
,

141 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

142 
	m_SC_SEM_VALUE_MAX
,

143 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

144 
	m_SC_SIGQUEUE_MAX
,

145 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

146 
	m_SC_TIMER_MAX
,

147 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

151 
	m_SC_BC_BASE_MAX
,

152 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

153 
	m_SC_BC_DIM_MAX
,

154 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

155 
	m_SC_BC_SCALE_MAX
,

156 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

157 
	m_SC_BC_STRING_MAX
,

158 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

159 
	m_SC_COLL_WEIGHTS_MAX
,

160 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

161 
	m_SC_EQUIV_CLASS_MAX
,

162 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

163 
	m_SC_EXPR_NEST_MAX
,

164 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

165 
	m_SC_LINE_MAX
,

166 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

167 
	m_SC_RE_DUP_MAX
,

168 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

169 
	m_SC_CHARCLASS_NAME_MAX
,

170 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

172 
	m_SC_2_VERSION
,

173 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

174 
	m_SC_2_C_BIND
,

175 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

176 
	m_SC_2_C_DEV
,

177 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

178 
	m_SC_2_FORT_DEV
,

179 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

180 
	m_SC_2_FORT_RUN
,

181 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

182 
	m_SC_2_SW_DEV
,

183 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

184 
	m_SC_2_LOCALEDEF
,

185 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

187 
	m_SC_PII
,

188 
	#_SC_PII
 
_SC_PII


	)

189 
	m_SC_PII_XTI
,

190 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

191 
	m_SC_PII_SOCKET
,

192 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

193 
	m_SC_PII_INTERNET
,

194 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

195 
	m_SC_PII_OSI
,

196 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

197 
	m_SC_POLL
,

198 
	#_SC_POLL
 
_SC_POLL


	)

199 
	m_SC_SELECT
,

200 
	#_SC_SELECT
 
_SC_SELECT


	)

201 
	m_SC_UIO_MAXIOV
,

202 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

203 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

204 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

205 
	m_SC_PII_INTERNET_STREAM
,

206 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

207 
	m_SC_PII_INTERNET_DGRAM
,

208 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

209 
	m_SC_PII_OSI_COTS
,

210 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

211 
	m_SC_PII_OSI_CLTS
,

212 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

213 
	m_SC_PII_OSI_M
,

214 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

215 
	m_SC_T_IOV_MAX
,

216 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

219 
	m_SC_THREADS
,

220 
	#_SC_THREADS
 
_SC_THREADS


	)

221 
	m_SC_THREAD_SAFE_FUNCTIONS
,

222 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

223 
	m_SC_GETGR_R_SIZE_MAX
,

224 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

225 
	m_SC_GETPW_R_SIZE_MAX
,

226 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

227 
	m_SC_LOGIN_NAME_MAX
,

228 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

229 
	m_SC_TTY_NAME_MAX
,

230 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

231 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

232 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

233 
	m_SC_THREAD_KEYS_MAX
,

234 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

235 
	m_SC_THREAD_STACK_MIN
,

236 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

237 
	m_SC_THREAD_THREADS_MAX
,

238 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

239 
	m_SC_THREAD_ATTR_STACKADDR
,

240 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

241 
	m_SC_THREAD_ATTR_STACKSIZE
,

242 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

243 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

244 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

245 
	m_SC_THREAD_PRIO_INHERIT
,

246 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

247 
	m_SC_THREAD_PRIO_PROTECT
,

248 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

249 
	m_SC_THREAD_PROCESS_SHARED
,

250 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

252 
	m_SC_NPROCESSORS_CONF
,

253 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

254 
	m_SC_NPROCESSORS_ONLN
,

255 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

256 
	m_SC_PHYS_PAGES
,

257 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

258 
	m_SC_AVPHYS_PAGES
,

259 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

260 
	m_SC_ATEXIT_MAX
,

261 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

262 
	m_SC_PASS_MAX
,

263 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

265 
	m_SC_XOPEN_VERSION
,

266 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

267 
	m_SC_XOPEN_XCU_VERSION
,

268 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

269 
	m_SC_XOPEN_UNIX
,

270 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

271 
	m_SC_XOPEN_CRYPT
,

272 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

273 
	m_SC_XOPEN_ENH_I18N
,

274 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

275 
	m_SC_XOPEN_SHM
,

276 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

278 
	m_SC_2_CHAR_TERM
,

279 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

280 
	m_SC_2_C_VERSION
,

281 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

282 
	m_SC_2_UPE
,

283 
	#_SC_2_UPE
 
_SC_2_UPE


	)

285 
	m_SC_XOPEN_XPG2
,

286 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

287 
	m_SC_XOPEN_XPG3
,

288 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

289 
	m_SC_XOPEN_XPG4
,

290 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

292 
	m_SC_CHAR_BIT
,

293 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

294 
	m_SC_CHAR_MAX
,

295 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

296 
	m_SC_CHAR_MIN
,

297 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

298 
	m_SC_INT_MAX
,

299 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

300 
	m_SC_INT_MIN
,

301 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

302 
	m_SC_LONG_BIT
,

303 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

304 
	m_SC_WORD_BIT
,

305 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

306 
	m_SC_MB_LEN_MAX
,

307 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

308 
	m_SC_NZERO
,

309 
	#_SC_NZERO
 
_SC_NZERO


	)

310 
	m_SC_SSIZE_MAX
,

311 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

312 
	m_SC_SCHAR_MAX
,

313 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

314 
	m_SC_SCHAR_MIN
,

315 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

316 
	m_SC_SHRT_MAX
,

317 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

318 
	m_SC_SHRT_MIN
,

319 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

320 
	m_SC_UCHAR_MAX
,

321 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

322 
	m_SC_UINT_MAX
,

323 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

324 
	m_SC_ULONG_MAX
,

325 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

326 
	m_SC_USHRT_MAX
,

327 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

329 
	m_SC_NL_ARGMAX
,

330 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

331 
	m_SC_NL_LANGMAX
,

332 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

333 
	m_SC_NL_MSGMAX
,

334 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

335 
	m_SC_NL_NMAX
,

336 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

337 
	m_SC_NL_SETMAX
,

338 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

339 
	m_SC_NL_TEXTMAX
,

340 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

342 
	m_SC_XBS5_ILP32_OFF32
,

343 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

344 
	m_SC_XBS5_ILP32_OFFBIG
,

345 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

346 
	m_SC_XBS5_LP64_OFF64
,

347 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

348 
	m_SC_XBS5_LPBIG_OFFBIG
,

349 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

351 
	m_SC_XOPEN_LEGACY
,

352 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

353 
	m_SC_XOPEN_REALTIME
,

354 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

355 
	m_SC_XOPEN_REALTIME_THREADS
,

356 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

358 
	m_SC_ADVISORY_INFO
,

359 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

360 
	m_SC_BARRIERS
,

361 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

362 
	m_SC_BASE
,

363 
	#_SC_BASE
 
_SC_BASE


	)

364 
	m_SC_C_LANG_SUPPORT
,

365 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

366 
	m_SC_C_LANG_SUPPORT_R
,

367 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

368 
	m_SC_CLOCK_SELECTION
,

369 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

370 
	m_SC_CPUTIME
,

371 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

372 
	m_SC_THREAD_CPUTIME
,

373 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

374 
	m_SC_DEVICE_IO
,

375 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

376 
	m_SC_DEVICE_SPECIFIC
,

377 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

378 
	m_SC_DEVICE_SPECIFIC_R
,

379 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

380 
	m_SC_FD_MGMT
,

381 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

382 
	m_SC_FIFO
,

383 
	#_SC_FIFO
 
_SC_FIFO


	)

384 
	m_SC_PIPE
,

385 
	#_SC_PIPE
 
_SC_PIPE


	)

386 
	m_SC_FILE_ATTRIBUTES
,

387 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

388 
	m_SC_FILE_LOCKING
,

389 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

390 
	m_SC_FILE_SYSTEM
,

391 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

392 
	m_SC_MONOTONIC_CLOCK
,

393 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

394 
	m_SC_MULTI_PROCESS
,

395 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

396 
	m_SC_SINGLE_PROCESS
,

397 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

398 
	m_SC_NETWORKING
,

399 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

400 
	m_SC_READER_WRITER_LOCKS
,

401 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

402 
	m_SC_SPIN_LOCKS
,

403 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

404 
	m_SC_REGEXP
,

405 
	#_SC_REGEXP
 
_SC_REGEXP


	)

406 
	m_SC_REGEX_VERSION
,

407 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

408 
	m_SC_SHELL
,

409 
	#_SC_SHELL
 
_SC_SHELL


	)

410 
	m_SC_SIGNALS
,

411 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

412 
	m_SC_SPAWN
,

413 
	#_SC_SPAWN
 
_SC_SPAWN


	)

414 
	m_SC_SPORADIC_SERVER
,

415 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

416 
	m_SC_THREAD_SPORADIC_SERVER
,

417 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

418 
	m_SC_SYSTEM_DATABASE
,

419 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

420 
	m_SC_SYSTEM_DATABASE_R
,

421 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

422 
	m_SC_TIMEOUTS
,

423 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

424 
	m_SC_TYPED_MEMORY_OBJECTS
,

425 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

426 
	m_SC_USER_GROUPS
,

427 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

428 
	m_SC_USER_GROUPS_R
,

429 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

430 
	m_SC_2_PBS
,

431 
	#_SC_2_PBS
 
_SC_2_PBS


	)

432 
	m_SC_2_PBS_ACCOUNTING
,

433 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

434 
	m_SC_2_PBS_LOCATE
,

435 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

436 
	m_SC_2_PBS_MESSAGE
,

437 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

438 
	m_SC_2_PBS_TRACK
,

439 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

440 
	m_SC_SYMLOOP_MAX
,

441 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

442 
	m_SC_STREAMS
,

443 
	#_SC_STREAMS
 
_SC_STREAMS


	)

444 
	m_SC_2_PBS_CHECKPOINT
,

445 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

447 
	m_SC_V6_ILP32_OFF32
,

448 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

449 
	m_SC_V6_ILP32_OFFBIG
,

450 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

451 
	m_SC_V6_LP64_OFF64
,

452 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

453 
	m_SC_V6_LPBIG_OFFBIG
,

454 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

456 
	m_SC_HOST_NAME_MAX
,

457 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

458 
	m_SC_TRACE
,

459 
	#_SC_TRACE
 
_SC_TRACE


	)

460 
	m_SC_TRACE_EVENT_FILTER
,

461 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

462 
	m_SC_TRACE_INHERIT
,

463 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

464 
	m_SC_TRACE_LOG
,

465 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

467 
	m_SC_LEVEL1_ICACHE_SIZE
,

468 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

469 
	m_SC_LEVEL1_ICACHE_ASSOC
,

470 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

471 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

472 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

473 
	m_SC_LEVEL1_DCACHE_SIZE
,

474 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

475 
	m_SC_LEVEL1_DCACHE_ASSOC
,

476 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

477 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

478 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

479 
	m_SC_LEVEL2_CACHE_SIZE
,

480 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

481 
	m_SC_LEVEL2_CACHE_ASSOC
,

482 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

483 
	m_SC_LEVEL2_CACHE_LINESIZE
,

484 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

485 
	m_SC_LEVEL3_CACHE_SIZE
,

486 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

487 
	m_SC_LEVEL3_CACHE_ASSOC
,

488 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

489 
	m_SC_LEVEL3_CACHE_LINESIZE
,

490 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

491 
	m_SC_LEVEL4_CACHE_SIZE
,

492 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

493 
	m_SC_LEVEL4_CACHE_ASSOC
,

494 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

495 
	m_SC_LEVEL4_CACHE_LINESIZE
,

496 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

499 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

500 
	#_SC_IPV6
 
_SC_IPV6


	)

501 
	m_SC_RAW_SOCKETS
,

502 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

504 
	m_SC_V7_ILP32_OFF32
,

505 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

506 
	m_SC_V7_ILP32_OFFBIG
,

507 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

508 
	m_SC_V7_LP64_OFF64
,

509 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

510 
	m_SC_V7_LPBIG_OFFBIG
,

511 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

513 
	m_SC_SS_REPL_MAX
,

514 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

516 
	m_SC_TRACE_EVENT_NAME_MAX
,

517 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

518 
	m_SC_TRACE_NAME_MAX
,

519 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

520 
	m_SC_TRACE_SYS_MAX
,

521 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

522 
	m_SC_TRACE_USER_EVENT_MAX
,

523 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

525 
	m_SC_XOPEN_STREAMS
,

526 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

528 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

529 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

530 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


531 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

537 
	m_CS_PATH
,

538 
	#_CS_PATH
 
_CS_PATH


	)

540 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

541 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

544 
	m_CS_GNU_LIBC_VERSION
,

545 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

546 
	m_CS_GNU_LIBPTHREAD_VERSION
,

547 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

549 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

550 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

553 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

554 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

557 
	m_CS_LFS_CFLAGS
 = 1000,

558 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

559 
	m_CS_LFS_LDFLAGS
,

560 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

561 
	m_CS_LFS_LIBS
,

562 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

563 
	m_CS_LFS_LINTFLAGS
,

564 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

565 
	m_CS_LFS64_CFLAGS
,

566 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

567 
	m_CS_LFS64_LDFLAGS
,

568 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

569 
	m_CS_LFS64_LIBS
,

570 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

571 
	m_CS_LFS64_LINTFLAGS
,

572 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

575 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

577 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

579 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

580 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

581 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

588 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

589 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

593 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

594 
	m_CS_XBS5_LP64_OFF64_LIBS
,

595 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

596 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

597 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

604 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

605 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

613 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

621 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

622 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

629 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

630 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

637 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

638 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

646 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

654 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

655 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

662 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

663 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

670 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

671 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

673 
	m_CS_V6_ENV
,

674 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

675 
	m_CS_V7_ENV


676 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/environments.h

19 #i‚de‡
_UNISTD_H


23 
	~<bôs/w‹dsize.h
>

43 #i‡
__WORDSIZE
 == 64

57 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

58 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

59 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

62 
	#_POSIX_V7_LP64_OFF64
 1

	)

63 
	#_POSIX_V6_LP64_OFF64
 1

	)

64 
	#_XBS5_LP64_OFF64
 1

	)

70 
	#_POSIX_V7_ILP32_OFF32
 1

	)

71 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

72 
	#_POSIX_V6_ILP32_OFF32
 1

	)

73 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

74 
	#_XBS5_ILP32_OFF32
 1

	)

75 
	#_XBS5_ILP32_OFFBIG
 1

	)

92 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

93 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

94 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

95 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

96 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

97 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

20 #ifde‡
_ERRNO_H


22 #unde‡
EDOM


23 #unde‡
EILSEQ


24 #unde‡
ERANGE


25 
	~<löux/î∫o.h
>

28 
	#ENOTSUP
 
EOPNOTSUPP


	)

31 #i‚de‡
ECANCELED


32 
	#ECANCELED
 125

	)

36 #i‚de‡
EOWNERDEAD


37 
	#EOWNERDEAD
 130

	)

38 
	#ENOTRECOVERABLE
 131

	)

41 #i‚de‡
ERFKILL


42 
	#ERFKILL
 132

	)

45 #i‚de‡
__ASSEMBLER__


47 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

49 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


51 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

56 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


60 
	#EDOM
 33

	)

61 
	#EILSEQ
 84

	)

62 
	#ERANGE
 34

	)

	@/usr/include/bits/error.h

20 #i‚def 
_ERROR_H


25 
__REDIRECT
 (
__îr‹_Æüs
, (
__°©us
, 
__î∫um
,

26 
__c⁄°
 *
__f‹m©
, ...),

27 
îr‹
)

28 
__©åibuã__
 ((
__f‹m©__
 (
__¥ötf__
, 3, 4)));

29 
__REDIRECT
 (
__îr‹_n‹ëu∫
, (
__°©us
, 
__î∫um
,

30 
__c⁄°
 *
__f‹m©
, ...),

31 
îr‹
)

32 
__©åibuã__
 ((
__n‹ëu∫__
, 
__f‹m©__
 (
__¥ötf__
, 3, 4)));

37 
__exã∫_Æways_ölöe
 

38 
	$îr‹
 (
__°©us
, 
__î∫um
, 
__c⁄°
 *
__f‹m©
, ...)

40 i‡(
	`__buûtö_c⁄°™t_p
 (
__°©us
) && __status != 0)

41 
	`__îr‹_n‹ëu∫
 (
__°©us
, 
__î∫um
, 
__f‹m©
, 
	`__va_¨g_∑ck
 ());

43 
	`__îr‹_Æüs
 (
__°©us
, 
__î∫um
, 
__f‹m©
, 
	`__va_¨g_∑ck
 ());

44 
	}
}

47 
__REDIRECT
 (
__îr‹_©_löe_Æüs
, (
__°©us
, 
__î∫um
,

48 
__c⁄°
 *
__‚ame
,

49 
__löe
,

50 
__c⁄°
 *
__f‹m©
, ...),

51 
îr‹_©_löe
)

52 
__©åibuã__
 ((
__f‹m©__
 (
__¥ötf__
, 5, 6)));

53 
__REDIRECT
 (
__îr‹_©_löe_n‹ëu∫
, (
__°©us
, 
__î∫um
,

54 
__c⁄°
 *
__‚ame
,

55 
__löe
,

56 
__c⁄°
 *
__f‹m©
,

58 
îr‹_©_löe
)

59 
__©åibuã__
 ((
__n‹ëu∫__
, 
__f‹m©__
 (
__¥ötf__
, 5, 6)));

64 
__exã∫_Æways_ölöe
 

65 
	$îr‹_©_löe
 (
__°©us
, 
__î∫um
, 
__c⁄°
 *
__‚ame
,

66 
__löe
,
__c⁄°
 *
__f‹m©
, ...)

68 i‡(
	`__buûtö_c⁄°™t_p
 (
__°©us
) && __status != 0)

69 
	`__îr‹_©_löe_n‹ëu∫
 (
__°©us
, 
__î∫um
, 
__‚ame
, 
__löe
, 
__f‹m©
,

70 
	`__va_¨g_∑ck
 ());

72 
	`__îr‹_©_löe_Æüs
 (
__°©us
, 
__î∫um
, 
__‚ame
, 
__löe
,

73 
__f‹m©
, 
	`__va_¨g_∑ck
 ());

74 
	}
}

	@/usr/include/bits/fcntl.h

21 #i‚def 
_FCNTL_H


25 
	~<sys/ty≥s.h
>

26 
	~<bôs/w‹dsize.h
>

27 #ifde‡
__USE_GNU


28 
	~<bôs/uio.h
>

34 
	#O_ACCMODE
 0003

	)

35 
	#O_RDONLY
 00

	)

36 
	#O_WRONLY
 01

	)

37 
	#O_RDWR
 02

	)

38 
	#O_CREAT
 0100

	)

39 
	#O_EXCL
 0200

	)

40 
	#O_NOCTTY
 0400

	)

41 
	#O_TRUNC
 01000

	)

42 
	#O_APPEND
 02000

	)

43 
	#O_NONBLOCK
 04000

	)

44 
	#O_NDELAY
 
O_NONBLOCK


	)

45 
	#O_SYNC
 04010000

	)

46 
	#O_FSYNC
 
O_SYNC


	)

47 
	#O_ASYNC
 020000

	)

49 #ifde‡
__USE_XOPEN2K8


50 
	#O_DIRECTORY
 0200000

	)

51 
	#O_NOFOLLOW
 0400000

	)

52 
	#O_CLOEXEC
 02000000

	)

54 #ifde‡
__USE_GNU


55 
	#O_DIRECT
 040000

	)

56 
	#O_NOATIME
 01000000

	)

62 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


63 
	#O_DSYNC
 010000

	)

64 
	#O_RSYNC
 
O_SYNC


	)

67 #ifde‡
__USE_LARGEFILE64


68 #i‡
__WORDSIZE
 == 64

69 
	#O_LARGEFILE
 0

	)

71 
	#O_LARGEFILE
 0100000

	)

76 
	#F_DUPFD
 0

	)

77 
	#F_GETFD
 1

	)

78 
	#F_SETFD
 2

	)

79 
	#F_GETFL
 3

	)

80 
	#F_SETFL
 4

	)

81 #i‡
__WORDSIZE
 == 64

82 
	#F_GETLK
 5

	)

83 
	#F_SETLK
 6

	)

84 
	#F_SETLKW
 7

	)

86 
	#F_GETLK64
 5

	)

87 
	#F_SETLK64
 6

	)

88 
	#F_SETLKW64
 7

	)

90 #i‚de‡
__USE_FILE_OFFSET64


91 
	#F_GETLK
 5

	)

92 
	#F_SETLK
 6

	)

93 
	#F_SETLKW
 7

	)

95 
	#F_GETLK
 
F_GETLK64


	)

96 
	#F_SETLK
 
F_SETLK64


	)

97 
	#F_SETLKW
 
F_SETLKW64


	)

99 
	#F_GETLK64
 12

	)

100 
	#F_SETLK64
 13

	)

101 
	#F_SETLKW64
 14

	)

104 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


105 
	#F_SETOWN
 8

	)

106 
	#F_GETOWN
 9

	)

109 #ifde‡
__USE_GNU


110 
	#F_SETSIG
 10

	)

111 
	#F_GETSIG
 11

	)

112 
	#F_SETOWN_EX
 15

	)

113 
	#F_GETOWN_EX
 16

	)

116 #ifde‡
__USE_GNU


117 
	#F_SETLEASE
 1024

	)

118 
	#F_GETLEASE
 1025

	)

119 
	#F_NOTIFY
 1026

	)

121 #ifde‡
__USE_XOPEN2K8


122 
	#F_DUPFD_CLOEXEC
 1030

	)

127 
	#FD_CLOEXEC
 1

	)

130 
	#F_RDLCK
 0

	)

131 
	#F_WRLCK
 1

	)

132 
	#F_UNLCK
 2

	)

135 
	#F_EXLCK
 4

	)

136 
	#F_SHLCK
 8

	)

138 #ifde‡
__USE_BSD


140 
	#LOCK_SH
 1

	)

141 
	#LOCK_EX
 2

	)

142 
	#LOCK_NB
 4

	)

144 
	#LOCK_UN
 8

	)

147 #ifde‡
__USE_GNU


148 
	#LOCK_MAND
 32

	)

149 
	#LOCK_READ
 64

	)

150 
	#LOCK_WRITE
 128

	)

151 
	#LOCK_RW
 192

	)

154 #ifde‡
__USE_GNU


156 
	#DN_ACCESS
 0x00000001

	)

157 
	#DN_MODIFY
 0x00000002

	)

158 
	#DN_CREATE
 0x00000004

	)

159 
	#DN_DELETE
 0x00000008

	)

160 
	#DN_RENAME
 0x00000010

	)

161 
	#DN_ATTRIB
 0x00000020

	)

162 
	#DN_MULTISHOT
 0x80000000

	)

165 
	sÊock


167 
	ml_ty≥
;

168 
	ml_whí˚
;

169 #i‚de‡
__USE_FILE_OFFSET64


170 
__off_t
 
	ml_°¨t
;

171 
__off_t
 
	ml_Àn
;

173 
__off64_t
 
	ml_°¨t
;

174 
__off64_t
 
	ml_Àn
;

176 
__pid_t
 
	ml_pid
;

179 #ifde‡
__USE_LARGEFILE64


180 
	sÊock64


182 
	ml_ty≥
;

183 
	ml_whí˚
;

184 
__off64_t
 
	ml_°¨t
;

185 
__off64_t
 
	ml_Àn
;

186 
__pid_t
 
	ml_pid
;

190 #ifde‡
__USE_GNU


192 
	e__pid_ty≥


194 
	mF_OWNER_TID
 = 0,

195 
	mF_OWNER_PID
,

196 
	mF_OWNER_PGRP
,

197 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


201 
	sf_ow√r_ex


203 
__pid_ty≥
 
	mty≥
;

204 
__pid_t
 
	mpid
;

210 #ifdef 
__USE_BSD


211 
	#FAPPEND
 
O_APPEND


	)

212 
	#FFSYNC
 
O_FSYNC


	)

213 
	#FASYNC
 
O_ASYNC


	)

214 
	#FNONBLOCK
 
O_NONBLOCK


	)

215 
	#FNDELAY
 
O_NDELAY


	)

219 #ifde‡
__USE_XOPEN2K


220 
	#POSIX_FADV_NORMAL
 0

	)

221 
	#POSIX_FADV_RANDOM
 1

	)

222 
	#POSIX_FADV_SEQUENTIAL
 2

	)

223 
	#POSIX_FADV_WILLNEED
 3

	)

224 
	#POSIX_FADV_DONTNEED
 4

	)

225 
	#POSIX_FADV_NOREUSE
 5

	)

229 #ifde‡
__USE_GNU


231 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

234 
	#SYNC_FILE_RANGE_WRITE
 2

	)

237 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

242 
	#SPLICE_F_MOVE
 1

	)

243 
	#SPLICE_F_NONBLOCK
 2

	)

246 
	#SPLICE_F_MORE
 4

	)

247 
	#SPLICE_F_GIFT
 8

	)

251 #ifde‡
__USE_ATFILE


252 
	#AT_FDCWD
 -100

	)

255 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

256 
	#AT_REMOVEDIR
 0x200

	)

258 
	#AT_SYMLINK_FOLLOW
 0x400

	)

259 
	#AT_EACCESS
 0x200

	)

263 
	g__BEGIN_DECLS


265 #ifde‡
__USE_GNU


268 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

269 
__THROW
;

273 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

274 
__Êags
);

278 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

279 
size_t
 
__cou¡
, 
__Êags
);

282 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

283 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

284 
__Êags
);

287 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

288 
__Êags
);

291 #i‚de‡
__USE_FILE_OFFSET64


292 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

294 #ifde‡
__REDIRECT


295 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

296 
__off64_t
 
__Àn
),

297 
ÁŒoˇã64
);

299 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

302 #ifde‡
__USE_LARGEFILE64


303 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

304 
__off64_t
 
__Àn
);

308 
__END_DECLS


	@/usr/include/bits/fcntl2.h

20 #i‚def 
_FCNTL_H


26 #i‚de‡
__USE_FILE_OFFSET64


27 
	$__›í_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

28 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

29 
›í
Ë
	`__n⁄nuŒ
 ((1));

31 
	`__REDIRECT
 (
__›í_2
, (
__c⁄°
 *
__∑th
, 
__oÊag
),

32 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

33 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

34 
›í64
Ë
	`__n⁄nuŒ
 ((1));

36 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

38 
	`__îr‹de˛
 (
__›í_missög_mode
,

41 
__exã∫_Æways_ölöe
 

42 
	$›í
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

44 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

45 
	`__›í_too_m™y_¨gs
 ();

47 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

49 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

51 
	`__›í_missög_mode
 ();

52  
	`__›í_2
 (
__∑th
, 
__oÊag
);

54  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

57 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

58  
	`__›í_2
 (
__∑th
, 
__oÊag
);

60  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

61 
	}
}

64 #ifde‡
__USE_LARGEFILE64


65 
	$__›í64_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

66 
	`__REDIRECT
 (
__›í64_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
,

67 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

68 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

70 
	`__îr‹de˛
 (
__›í64_missög_mode
,

73 
__exã∫_Æways_ölöe
 

74 
	$›í64
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

76 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

77 
	`__›í64_too_m™y_¨gs
 ();

79 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

81 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

83 
	`__›í64_missög_mode
 ();

84  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

86  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

89 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

90  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

92  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

93 
	}
}

97 #ifde‡
__USE_ATFILE


98 #i‚de‡
__USE_FILE_OFFSET64


99 
	$__›í©_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

100 
	`__n⁄nuŒ
 ((2));

101 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

102 
__oÊag
, ...), 
›í©
)

103 
	`__n⁄nuŒ
 ((2));

105 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, 
__c⁄°
 *
__∑th
,

106 
__oÊag
), 
__›í©64_2
)

107 
	`__n⁄nuŒ
 ((2));

108 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

109 
__oÊag
, ...), 
›í©64
)

110 
	`__n⁄nuŒ
 ((2));

112 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

114 
	`__îr‹de˛
 (
__›í©_missög_mode
,

117 
__exã∫_Æways_ölöe
 

118 
	$›í©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

120 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

121 
	`__›í©_too_m™y_¨gs
 ();

123 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

125 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

127 
	`__›í©_missög_mode
 ();

128  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

130  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

133 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

134  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

136  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

137 
	}
}

140 #ifde‡
__USE_LARGEFILE64


141 
	$__›í©64_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

142 
	`__n⁄nuŒ
 ((2));

143 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

144 
__oÊag
, ...), 
›í©64
)

145 
	`__n⁄nuŒ
 ((2));

146 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

148 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

151 
__exã∫_Æways_ölöe
 

152 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

154 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

155 
	`__›í©64_too_m™y_¨gs
 ();

157 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

159 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

161 
	`__›í©64_missög_mode
 ();

162  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

164  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

167 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

168  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

170  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

171 
	}
}

	@/usr/include/bits/ioctl-types.h

20 #i‚de‡
_SYS_IOCTL_H


25 
	~<asm/io˘ls.h
>

28 
	swösize


30 
	mws_row
;

31 
	mws_cﬁ
;

32 
	mws_xpixñ
;

33 
	mws_ypixñ
;

36 
	#NCC
 8

	)

37 
	sãrmio


39 
	mc_iÊag
;

40 
	mc_oÊag
;

41 
	mc_cÊag
;

42 
	mc_lÊag
;

43 
	mc_löe
;

44 
	mc_cc
[
NCC
];

48 
	#TIOCM_LE
 0x001

	)

49 
	#TIOCM_DTR
 0x002

	)

50 
	#TIOCM_RTS
 0x004

	)

51 
	#TIOCM_ST
 0x008

	)

52 
	#TIOCM_SR
 0x010

	)

53 
	#TIOCM_CTS
 0x020

	)

54 
	#TIOCM_CAR
 0x040

	)

55 
	#TIOCM_RNG
 0x080

	)

56 
	#TIOCM_DSR
 0x100

	)

57 
	#TIOCM_CD
 
TIOCM_CAR


	)

58 
	#TIOCM_RI
 
TIOCM_RNG


	)

63 
	#N_TTY
 0

	)

64 
	#N_SLIP
 1

	)

65 
	#N_MOUSE
 2

	)

66 
	#N_PPP
 3

	)

67 
	#N_STRIP
 4

	)

68 
	#N_AX25
 5

	)

69 
	#N_X25
 6

	)

70 
	#N_6PACK
 7

	)

71 
	#N_MASC
 8

	)

72 
	#N_R3964
 9

	)

73 
	#N_PROFIBUS_FDL
 10

	)

74 
	#N_IRDA
 11

	)

75 
	#N_SMSBLOCK
 12

	)

76 
	#N_HDLC
 13

	)

77 
	#N_SYNC_PPP
 14

	)

78 
	#N_HCI
 15

	)

	@/usr/include/bits/ioctls.h

19 #i‚de‡
_SYS_IOCTL_H


24 
	~<asm/io˘ls.h
>

27 
	#SIOCADDRT
 0x890B

	)

28 
	#SIOCDELRT
 0x890C

	)

29 
	#SIOCRTMSG
 0x890D

	)

32 
	#SIOCGIFNAME
 0x8910

	)

33 
	#SIOCSIFLINK
 0x8911

	)

34 
	#SIOCGIFCONF
 0x8912

	)

35 
	#SIOCGIFFLAGS
 0x8913

	)

36 
	#SIOCSIFFLAGS
 0x8914

	)

37 
	#SIOCGIFADDR
 0x8915

	)

38 
	#SIOCSIFADDR
 0x8916

	)

39 
	#SIOCGIFDSTADDR
 0x8917

	)

40 
	#SIOCSIFDSTADDR
 0x8918

	)

41 
	#SIOCGIFBRDADDR
 0x8919

	)

42 
	#SIOCSIFBRDADDR
 0x891®

	)

43 
	#SIOCGIFNETMASK
 0x891b

	)

44 
	#SIOCSIFNETMASK
 0x891¯

	)

45 
	#SIOCGIFMETRIC
 0x891d

	)

46 
	#SIOCSIFMETRIC
 0x891ê

	)

47 
	#SIOCGIFMEM
 0x891‡

	)

48 
	#SIOCSIFMEM
 0x8920

	)

49 
	#SIOCGIFMTU
 0x8921

	)

50 
	#SIOCSIFMTU
 0x8922

	)

51 
	#SIOCSIFNAME
 0x8923

	)

52 
	#SIOCSIFHWADDR
 0x8924

	)

53 
	#SIOCGIFENCAP
 0x8925

	)

54 
	#SIOCSIFENCAP
 0x8926

	)

55 
	#SIOCGIFHWADDR
 0x8927

	)

56 
	#SIOCGIFSLAVE
 0x8929

	)

57 
	#SIOCSIFSLAVE
 0x8930

	)

58 
	#SIOCADDMULTI
 0x8931

	)

59 
	#SIOCDELMULTI
 0x8932

	)

60 
	#SIOCGIFINDEX
 0x8933

	)

61 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

62 
	#SIOCSIFPFLAGS
 0x8934

	)

63 
	#SIOCGIFPFLAGS
 0x8935

	)

64 
	#SIOCDIFADDR
 0x8936

	)

65 
	#SIOCSIFHWBROADCAST
 0x8937

	)

66 
	#SIOCGIFCOUNT
 0x8938

	)

68 
	#SIOCGIFBR
 0x8940

	)

69 
	#SIOCSIFBR
 0x8941

	)

71 
	#SIOCGIFTXQLEN
 0x8942

	)

72 
	#SIOCSIFTXQLEN
 0x8943

	)

77 
	#SIOCDARP
 0x8953

	)

78 
	#SIOCGARP
 0x8954

	)

79 
	#SIOCSARP
 0x8955

	)

82 
	#SIOCDRARP
 0x8960

	)

83 
	#SIOCGRARP
 0x8961

	)

84 
	#SIOCSRARP
 0x8962

	)

88 
	#SIOCGIFMAP
 0x8970

	)

89 
	#SIOCSIFMAP
 0x8971

	)

93 
	#SIOCADDDLCI
 0x8980

	)

94 
	#SIOCDELDLCI
 0x8981

	)

103 
	#SIOCDEVPRIVATE
 0x89F0

	)

109 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/bits/netdb.h

19 #i‚de‡
_NETDB_H


27 
	s√ã¡


29 *
	mn_«me
;

30 **
	mn_Æü£s
;

31 
	mn_addπy≥
;

32 
uöt32_t
 
	mn_√t
;

	@/usr/include/bits/posix_opt.h

20 #i‚def 
_BITS_POSIX_OPT_H


21 
	#_BITS_POSIX_OPT_H
 1

	)

24 
	#_POSIX_JOB_CONTROL
 1

	)

27 
	#_POSIX_SAVED_IDS
 1

	)

30 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

33 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

36 
	#_POSIX_FSYNC
 200809L

	)

39 
	#_POSIX_MAPPED_FILES
 200809L

	)

42 
	#_POSIX_MEMLOCK
 200809L

	)

45 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

48 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

51 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

55 
	#_POSIX_VDISABLE
 '\0'

	)

58 
	#_POSIX_NO_TRUNC
 1

	)

61 
	#_XOPEN_REALTIME
 1

	)

64 
	#_XOPEN_REALTIME_THREADS
 1

	)

67 
	#_XOPEN_SHM
 1

	)

70 
	#_POSIX_THREADS
 200809L

	)

73 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

74 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

77 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

80 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

83 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

86 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

90 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

92 #ifde‡
__USE_XOPEN2K8


94 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

97 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

101 
	#_POSIX_SEMAPHORES
 200809L

	)

104 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

107 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

108 
	#_POSIX_ASYNC_IO
 1

	)

110 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

112 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

115 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

118 
	#_LFS_LARGEFILE
 1

	)

119 
	#_LFS64_LARGEFILE
 1

	)

120 
	#_LFS64_STDIO
 1

	)

123 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

126 
	#_POSIX_CPUTIME
 0

	)

129 
	#_POSIX_THREAD_CPUTIME
 0

	)

132 
	#_POSIX_REGEXP
 1

	)

135 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

138 
	#_POSIX_SHELL
 1

	)

141 
	#_POSIX_TIMEOUTS
 200809L

	)

144 
	#_POSIX_SPIN_LOCKS
 200809L

	)

147 
	#_POSIX_SPAWN
 200809L

	)

150 
	#_POSIX_TIMERS
 200809L

	)

153 
	#_POSIX_BARRIERS
 200809L

	)

156 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

159 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

162 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

165 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

168 
	#_POSIX_ADVISORY_INFO
 200809L

	)

171 
	#_POSIX_IPV6
 200809L

	)

174 
	#_POSIX_RAW_SOCKETS
 200809L

	)

177 
	#_POSIX2_CHAR_TERM
 200809L

	)

180 
	#_POSIX_SPORADIC_SERVER
 -1

	)

181 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

184 
	#_POSIX_TRACE
 -1

	)

185 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

186 
	#_POSIX_TRACE_INHERIT
 -1

	)

187 
	#_POSIX_TRACE_LOG
 -1

	)

190 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

20 #i‚de‡
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hªad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Æign
;

57 } 
	t±hªad_©å_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	s__±hªad_öã∫Æ_li°


63 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

64 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

65 } 
	t__±hªad_li°_t
;

67 
	s__±hªad_öã∫Æ_¶i°


69 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

70 } 
	t__±hªad_¶i°_t
;

78 
	s__±hªad_muãx_s


80 
	m__lock
;

81 
	m__cou¡
;

82 
	m__ow√r
;

83 #i‡
__WORDSIZE
 == 64

84 
	m__nu£rs
;

88 
	m__köd
;

89 #i‡
__WORDSIZE
 == 64

90 
	m__•ös
;

91 
__±hªad_li°_t
 
	m__li°
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu£rs
;

95 
__exãnsi⁄__
 union

97 
	m__•ös
;

98 
__±hªad_¶i°_t
 
	m__li°
;

101 } 
	m__d©a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__Æign
;

104 } 
	t±hªad_muãx_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__Æign
;

110 } 
	t±hªad_muãx©å_t
;

119 
	m__lock
;

120 
	m__fuãx
;

121 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

122 
__exãnsi⁄__
 
	m__wakeup_£q
;

123 
__exãnsi⁄__
 
	m__wokí_£q
;

124 *
	m__muãx
;

125 
	m__nwaôîs
;

126 
	m__brﬂdˇ°_£q
;

127 } 
	m__d©a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129 
__exãnsi⁄__
 
	m__Æign
;

130 } 
	t±hªad_c⁄d_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__Æign
;

136 } 
	t±hªad_c⁄d©å_t
;

140 
	t±hªad_key_t
;

144 
	t±hªad_⁄˚_t
;

147 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


152 #i‡
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__ƒ_ªadîs
;

157 
	m__ªadîs_wakeup
;

158 
	m__wrôî_wakeup
;

159 
	m__ƒ_ªadîs_queued
;

160 
	m__ƒ_wrôîs_queued
;

161 
	m__wrôî
;

162 
	m__sh¨ed
;

163 
	m__∑d1
;

164 
	m__∑d2
;

167 
	m__Êags
;

168 } 
	m__d©a
;

172 
	m__lock
;

173 
	m__ƒ_ªadîs
;

174 
	m__ªadîs_wakeup
;

175 
	m__wrôî_wakeup
;

176 
	m__ƒ_ªadîs_queued
;

177 
	m__ƒ_wrôîs_queued
;

180 
	m__Êags
;

181 
	m__sh¨ed
;

182 
	m__∑d1
;

183 
	m__∑d2
;

184 
	m__wrôî
;

185 } 
	m__d©a
;

187 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

188 
	m__Æign
;

189 } 
	t±hªad_rwlock_t
;

193 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

194 
	m__Æign
;

195 } 
	t±hªad_rwlock©å_t
;

199 #ifde‡
__USE_XOPEN2K


201 vﬁ©ûê
	t±hªad_•ölock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

209 
	m__Æign
;

210 } 
	t±hªad_b¨rõr_t
;

214 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

215 
	m__Æign
;

216 } 
	t±hªad_b¨rõøâr_t
;

220 #i‡
__WORDSIZE
 == 32

222 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/sigaction.h

20 #i‚de‡
_SIGNAL_H


25 
	ssiga˘i⁄


28 #ifde‡
__USE_POSIX199309


32 
__sigh™dÀr_t
 
	mß_h™dÀr
;

34 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

36 
	m__siga˘i⁄_h™dÀr
;

37 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

38 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

40 
__sigh™dÀr_t
 
	mß_h™dÀr
;

44 
__sig£t_t
 
	mß_mask
;

47 
	mß_Êags
;

50 (*
	mß_ª°‹î
) ();

54 
	#SA_NOCLDSTOP
 1

	)

55 
	#SA_NOCLDWAIT
 2

	)

56 
	#SA_SIGINFO
 4

	)

58 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


59 
	#SA_ONSTACK
 0x08000000

	)

61 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


62 
	#SA_RESTART
 0x10000000

	)

63 
	#SA_NODEFER
 0x40000000

	)

65 
	#SA_RESETHAND
 0x80000000

	)

67 #ifde‡
__USE_MISC


68 
	#SA_INTERRUPT
 0x20000000

	)

71 
	#SA_NOMASK
 
SA_NODEFER


	)

72 
	#SA_ONESHOT
 
SA_RESETHAND


	)

73 
	#SA_STACK
 
SA_ONSTACK


	)

77 
	#SIG_BLOCK
 0

	)

78 
	#SIG_UNBLOCK
 1

	)

79 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

19 #i‚de‡
_BITS_SIGCONTEXT_H


20 
	#_BITS_SIGCONTEXT_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


26 
	~<bôs/w‹dsize.h
>

28 
	s_Âªg


30 
	msignifiˇnd
[4];

31 
	mexp⁄ít
;

34 
	s_Âxªg


36 
	msignifiˇnd
[4];

37 
	mexp⁄ít
;

38 
	m∑ddög
[3];

41 
	s_xmmªg


43 
__uöt32_t
 
	mñemít
[4];

48 #i‡
__WORDSIZE
 == 32

50 
	s_Â°©e


53 
__uöt32_t
 
	mcw
;

54 
__uöt32_t
 
	msw
;

55 
__uöt32_t
 
	mèg
;

56 
__uöt32_t
 
	mùoff
;

57 
__uöt32_t
 
	mcs£l
;

58 
__uöt32_t
 
	md©aoff
;

59 
__uöt32_t
 
	md©a£l
;

60 
_Âªg
 
	m_°
[8];

61 
	m°©us
;

62 
	mmagic
;

65 
__uöt32_t
 
	m_fx§_ív
[6];

66 
__uöt32_t
 
	mmxc§
;

67 
__uöt32_t
 
	mª£rved
;

68 
_Âxªg
 
	m_fx§_°
[8];

69 
_xmmªg
 
	m_xmm
[8];

70 
__uöt32_t
 
	m∑ddög
[56];

73 #i‚de‡
sigc⁄ãxt_°ru˘


78 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

81 
	ssigc⁄ãxt


83 
	mgs
, 
	m__gsh
;

84 
	mfs
, 
	m__fsh
;

85 
	mes
, 
	m__esh
;

86 
	mds
, 
	m__dsh
;

87 
	medi
;

88 
	mesi
;

89 
	mebp
;

90 
	me•
;

91 
	mebx
;

92 
	medx
;

93 
	mecx
;

94 
	móx
;

95 
	må≠no
;

96 
	mîr
;

97 
	meù
;

98 
	mcs
, 
	m__csh
;

99 
	meÊags
;

100 
	me•_©_sig«l
;

101 
	mss
, 
	m__ssh
;

102 
_Â°©e
 * 
	mÂ°©e
;

103 
	mﬁdmask
;

104 
	m¸2
;

109 
	s_Â°©e


112 
__uöt16_t
 
	mcwd
;

113 
__uöt16_t
 
	mswd
;

114 
__uöt16_t
 
	m·w
;

115 
__uöt16_t
 
	mf›
;

116 
__uöt64_t
 
	mrù
;

117 
__uöt64_t
 
	mrdp
;

118 
__uöt32_t
 
	mmxc§
;

119 
__uöt32_t
 
	mmx¸_mask
;

120 
_Âxªg
 
	m_°
[8];

121 
_xmmªg
 
	m_xmm
[16];

122 
__uöt32_t
 
	m∑ddög
[24];

125 
	ssigc⁄ãxt


127 
	mr8
;

128 
	mr9
;

129 
	mr10
;

130 
	mr11
;

131 
	mr12
;

132 
	mr13
;

133 
	mr14
;

134 
	mr15
;

135 
	mrdi
;

136 
	mrsi
;

137 
	mrbp
;

138 
	mrbx
;

139 
	mrdx
;

140 
	møx
;

141 
	mrcx
;

142 
	mr•
;

143 
	mrù
;

144 
	meÊags
;

145 
	mcs
;

146 
	mgs
;

147 
	mfs
;

148 
	m__∑d0
;

149 
	mîr
;

150 
	må≠no
;

151 
	mﬁdmask
;

152 
	m¸2
;

153 
_Â°©e
 * 
	mÂ°©e
;

154 
	m__ª£rved1
 [8];

	@/usr/include/bits/siginfo.h

20 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

21 && !
deföed
 
	g__√ed_sigevít_t


25 
	~<bôs/w‹dsize.h
>

27 #i‡(!
deföed
 
__have_sigvÆ_t
 \

28 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

29 || 
deföed
 
	g__√ed_sigevít_t
))

30 
	#__have_sigvÆ_t
 1

	)

33 
	usigvÆ


35 
	msivÆ_öt
;

36 *
	msivÆ_±r
;

37 } 
	tsigvÆ_t
;

40 #i‡(!
deföed
 
__have_sigöfo_t
 \

41 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

42 
	#__have_sigöfo_t
 1

	)

44 
	#__SI_MAX_SIZE
 128

	)

45 #i‡
__WORDSIZE
 == 64

46 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

48 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

51 
	ssigöfo


53 
	msi_signo
;

54 
	msi_î∫o
;

56 
	msi_code
;

60 
	m_∑d
[
__SI_PAD_SIZE
];

65 
__pid_t
 
	msi_pid
;

66 
__uid_t
 
	msi_uid
;

67 } 
	m_kûl
;

72 
	msi_tid
;

73 
	msi_ovîrun
;

74 
sigvÆ_t
 
	msi_sigvÆ
;

75 } 
	m_timî
;

80 
__pid_t
 
	msi_pid
;

81 
__uid_t
 
	msi_uid
;

82 
sigvÆ_t
 
	msi_sigvÆ
;

83 } 
	m_π
;

88 
__pid_t
 
	msi_pid
;

89 
__uid_t
 
	msi_uid
;

90 
	msi_°©us
;

91 
__˛ock_t
 
	msi_utime
;

92 
__˛ock_t
 
	msi_°ime
;

93 } 
	m_sigchld
;

98 *
	msi_addr
;

99 } 
	m_sigÁu…
;

104 
	msi_b™d
;

105 
	msi_fd
;

106 } 
	m_sigpﬁl
;

107 } 
	m_sifõlds
;

108 } 
	tsigöfo_t
;

112 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

113 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

114 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

115 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

116 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

117 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

118 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

119 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

120 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

121 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

122 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

123 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

124 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

131 
	mSI_ASYNCNL
 = -60,

132 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

133 
	mSI_TKILL
 = -6,

134 
	#SI_TKILL
 
SI_TKILL


	)

135 
	mSI_SIGIO
,

136 
	#SI_SIGIO
 
SI_SIGIO


	)

137 
	mSI_ASYNCIO
,

138 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

139 
	mSI_MESGQ
,

140 
	#SI_MESGQ
 
SI_MESGQ


	)

141 
	mSI_TIMER
,

142 
	#SI_TIMER
 
SI_TIMER


	)

143 
	mSI_QUEUE
,

144 
	#SI_QUEUE
 
SI_QUEUE


	)

145 
	mSI_USER
,

146 
	#SI_USER
 
SI_USER


	)

147 
	mSI_KERNEL
 = 0x80

148 
	#SI_KERNEL
 
SI_KERNEL


	)

155 
	mILL_ILLOPC
 = 1,

156 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

157 
	mILL_ILLOPN
,

158 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

159 
	mILL_ILLADR
,

160 
	#ILL_ILLADR
 
ILL_ILLADR


	)

161 
	mILL_ILLTRP
,

162 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

163 
	mILL_PRVOPC
,

164 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

165 
	mILL_PRVREG
,

166 
	#ILL_PRVREG
 
ILL_PRVREG


	)

167 
	mILL_COPROC
,

168 
	#ILL_COPROC
 
ILL_COPROC


	)

169 
	mILL_BADSTK


170 
	#ILL_BADSTK
 
ILL_BADSTK


	)

176 
	mFPE_INTDIV
 = 1,

177 
	#FPE_INTDIV
 
FPE_INTDIV


	)

178 
	mFPE_INTOVF
,

179 
	#FPE_INTOVF
 
FPE_INTOVF


	)

180 
	mFPE_FLTDIV
,

181 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

182 
	mFPE_FLTOVF
,

183 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

184 
	mFPE_FLTUND
,

185 
	#FPE_FLTUND
 
FPE_FLTUND


	)

186 
	mFPE_FLTRES
,

187 
	#FPE_FLTRES
 
FPE_FLTRES


	)

188 
	mFPE_FLTINV
,

189 
	#FPE_FLTINV
 
FPE_FLTINV


	)

190 
	mFPE_FLTSUB


191 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

197 
	mSEGV_MAPERR
 = 1,

198 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

199 
	mSEGV_ACCERR


200 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

206 
	mBUS_ADRALN
 = 1,

207 
	#BUS_ADRALN
 
BUS_ADRALN


	)

208 
	mBUS_ADRERR
,

209 
	#BUS_ADRERR
 
BUS_ADRERR


	)

210 
	mBUS_OBJERR


211 
	#BUS_OBJERR
 
BUS_OBJERR


	)

217 
	mTRAP_BRKPT
 = 1,

218 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

219 
	mTRAP_TRACE


220 
	#TRAP_TRACE
 
TRAP_TRACE


	)

226 
	mCLD_EXITED
 = 1,

227 
	#CLD_EXITED
 
CLD_EXITED


	)

228 
	mCLD_KILLED
,

229 
	#CLD_KILLED
 
CLD_KILLED


	)

230 
	mCLD_DUMPED
,

231 
	#CLD_DUMPED
 
CLD_DUMPED


	)

232 
	mCLD_TRAPPED
,

233 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

234 
	mCLD_STOPPED
,

235 
	#CLD_STOPPED
 
CLD_STOPPED


	)

236 
	mCLD_CONTINUED


237 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

243 
	mPOLL_IN
 = 1,

244 
	#POLL_IN
 
POLL_IN


	)

245 
	mPOLL_OUT
,

246 
	#POLL_OUT
 
POLL_OUT


	)

247 
	mPOLL_MSG
,

248 
	#POLL_MSG
 
POLL_MSG


	)

249 
	mPOLL_ERR
,

250 
	#POLL_ERR
 
POLL_ERR


	)

251 
	mPOLL_PRI
,

252 
	#POLL_PRI
 
POLL_PRI


	)

253 
	mPOLL_HUP


254 
	#POLL_HUP
 
POLL_HUP


	)

257 #unde‡
__√ed_sigöfo_t


261 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

262 && !
deföed
 
	g__have_sigevít_t


263 
	#__have_sigevít_t
 1

	)

266 
	#__SIGEV_MAX_SIZE
 64

	)

267 #i‡
__WORDSIZE
 == 64

268 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

270 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

273 
	ssigevít


275 
sigvÆ_t
 
	msigev_vÆue
;

276 
	msigev_signo
;

277 
	msigev_nŸify
;

281 
	m_∑d
[
__SIGEV_PAD_SIZE
];

285 
__pid_t
 
	m_tid
;

289 (*
	m_fun˘i⁄
Ë(
	msigvÆ_t
);

290 *
	m_©åibuã
;

291 } 
	m_sigev_thªad
;

292 } 
	m_sigev_un
;

293 } 
	tsigevít_t
;

296 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

297 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

302 
	mSIGEV_SIGNAL
 = 0,

303 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

304 
	mSIGEV_NONE
,

305 
	#SIGEV_NONE
 
SIGEV_NONE


	)

306 
	mSIGEV_THREAD
,

307 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

309 
	mSIGEV_THREAD_ID
 = 4

310 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

20 #ifdef 
_SIGNAL_H


23 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

24 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

25 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

27 #ifde‡
__USE_UNIX98


28 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

33 
	#SIGHUP
 1

	)

34 
	#SIGINT
 2

	)

35 
	#SIGQUIT
 3

	)

36 
	#SIGILL
 4

	)

37 
	#SIGTRAP
 5

	)

38 
	#SIGABRT
 6

	)

39 
	#SIGIOT
 6

	)

40 
	#SIGBUS
 7

	)

41 
	#SIGFPE
 8

	)

42 
	#SIGKILL
 9

	)

43 
	#SIGUSR1
 10

	)

44 
	#SIGSEGV
 11

	)

45 
	#SIGUSR2
 12

	)

46 
	#SIGPIPE
 13

	)

47 
	#SIGALRM
 14

	)

48 
	#SIGTERM
 15

	)

49 
	#SIGSTKFLT
 16

	)

50 
	#SIGCLD
 
SIGCHLD


	)

51 
	#SIGCHLD
 17

	)

52 
	#SIGCONT
 18

	)

53 
	#SIGSTOP
 19

	)

54 
	#SIGTSTP
 20

	)

55 
	#SIGTTIN
 21

	)

56 
	#SIGTTOU
 22

	)

57 
	#SIGURG
 23

	)

58 
	#SIGXCPU
 24

	)

59 
	#SIGXFSZ
 25

	)

60 
	#SIGVTALRM
 26

	)

61 
	#SIGPROF
 27

	)

62 
	#SIGWINCH
 28

	)

63 
	#SIGPOLL
 
SIGIO


	)

64 
	#SIGIO
 29

	)

65 
	#SIGPWR
 30

	)

66 
	#SIGSYS
 31

	)

67 
	#SIGUNUSED
 31

	)

69 
	#_NSIG
 65

	)

72 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

73 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

77 
	#__SIGRTMIN
 32

	)

78 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

21 #i‚def 
_SIGSET_H_ty≥s


22 
	#_SIGSET_H_ty≥s
 1

	)

24 
	t__sig_©omic_t
;

28 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

31 
	m__vÆ
[
_SIGSET_NWORDS
];

32 } 
	t__sig£t_t
;

43 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


44 
	#_SIGSET_H_‚s
 1

	)

46 #i‚de‡
_EXTERN_INLINE


47 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

51 
	#__sigmask
(
sig
) \

52 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

55 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

57 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

58 
	#__sigem±y£t
(
£t
) \

59 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

60 
sig£t_t
 *
__£t
 = (
£t
); \

61 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

62 0; }))

	)

63 
	#__sigfûl£t
(
£t
) \

64 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

65 
sig£t_t
 *
__£t
 = (
£t
); \

66 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

67 0; }))

	)

69 #ifde‡
__USE_GNU


73 
	#__sigi£m±y£t
(
£t
) \

74 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

75 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

76 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

77 !
__ªt
 && --
__˙t
 >= 0) \

78 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

79 
__ªt
 =0; }))

	)

80 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

81 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

82 
sig£t_t
 *
__de°
 = (
de°
); \

83 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

84 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

85 --
__˙t
 >= 0) \

86 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

87 & 
__right
->
__vÆ
[
__˙t
]); \

88 0; }))

	)

89 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

90 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

91 
sig£t_t
 *
__de°
 = (
de°
); \

92 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

93 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

94 --
__˙t
 >= 0) \

95 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

96 | 
__right
->
__vÆ
[
__˙t
]); \

97 0; }))

	)

104 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

105 
__sigadd£t
 (
__sig£t_t
 *, );

106 
__sigdñ£t
 (
__sig£t_t
 *, );

108 #ifde‡
__USE_EXTERN_INLINES


109 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

110 
_EXTERN_INLINE
 \

111 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

113 
__mask
 = 
	`__sigmask
 (
__sig
); \

114 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

115  
BODY
; \

116 }

	)

118 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

119 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

120 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

122 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

20 #i‚de‡
_SIGNAL_H


26 
	ssig°ack


28 *
	mss_•
;

29 
	mss_⁄°ack
;

36 
	mSS_ONSTACK
 = 1,

37 
	#SS_ONSTACK
 
SS_ONSTACK


	)

38 
	mSS_DISABLE


39 
	#SS_DISABLE
 
SS_DISABLE


	)

43 
	#MINSIGSTKSZ
 2048

	)

46 
	#SIGSTKSZ
 8192

	)

50 
	ssigÆt°ack


52 *
	mss_•
;

53 
	mss_Êags
;

54 
size_t
 
	mss_size
;

55 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

20 #i‚de‡
_BITS_SIGTHREAD_H


21 
	#_BITS_SIGTHREAD_H
 1

	)

23 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


31 
	$±hªad_sigmask
 (
__how
,

32 
__c⁄°
 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

33 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

36 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

38 #ifde‡
__USE_GNU


40 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

41 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/socket.h

21 #i‚de‡
__BITS_SOCKET_H


22 
	#__BITS_SOCKET_H


	)

24 #i‚de‡
_SYS_SOCKET_H


28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

31 
	~<sys/ty≥s.h
>

34 #i‚de‡
__sockÀn_t_deföed


35 
__sockÀn_t
 
	tsockÀn_t
;

36 
	#__sockÀn_t_deföed


	)

40 
	e__sockë_ty≥


42 
	mSOCK_STREAM
 = 1,

44 
	#SOCK_STREAM
 
SOCK_STREAM


	)

45 
	mSOCK_DGRAM
 = 2,

47 
	#SOCK_DGRAM
 
SOCK_DGRAM


	)

48 
	mSOCK_RAW
 = 3,

49 
	#SOCK_RAW
 
SOCK_RAW


	)

50 
	mSOCK_RDM
 = 4,

51 
	#SOCK_RDM
 
SOCK_RDM


	)

52 
	mSOCK_SEQPACKET
 = 5,

54 
	#SOCK_SEQPACKET
 
SOCK_SEQPACKET


	)

55 
	mSOCK_DCCP
 = 6,

56 
	#SOCK_DCCP
 
SOCK_DCCP


	)

57 
	mSOCK_PACKET
 = 10,

60 
	#SOCK_PACKET
 
SOCK_PACKET


	)

65 
	mSOCK_CLOEXEC
 = 02000000,

67 
	#SOCK_CLOEXEC
 
SOCK_CLOEXEC


	)

68 
	mSOCK_NONBLOCK
 = 04000

70 
	#SOCK_NONBLOCK
 
SOCK_NONBLOCK


	)

74 
	#PF_UNSPEC
 0

	)

75 
	#PF_LOCAL
 1

	)

76 
	#PF_UNIX
 
PF_LOCAL


	)

77 
	#PF_FILE
 
PF_LOCAL


	)

78 
	#PF_INET
 2

	)

79 
	#PF_AX25
 3

	)

80 
	#PF_IPX
 4

	)

81 
	#PF_APPLETALK
 5

	)

82 
	#PF_NETROM
 6

	)

83 
	#PF_BRIDGE
 7

	)

84 
	#PF_ATMPVC
 8

	)

85 
	#PF_X25
 9

	)

86 
	#PF_INET6
 10

	)

87 
	#PF_ROSE
 11

	)

88 
	#PF_DEC√t
 12

	)

89 
	#PF_NETBEUI
 13

	)

90 
	#PF_SECURITY
 14

	)

91 
	#PF_KEY
 15

	)

92 
	#PF_NETLINK
 16

	)

93 
	#PF_ROUTE
 
PF_NETLINK


	)

94 
	#PF_PACKET
 17

	)

95 
	#PF_ASH
 18

	)

96 
	#PF_ECONET
 19

	)

97 
	#PF_ATMSVC
 20

	)

98 
	#PF_RDS
 21

	)

99 
	#PF_SNA
 22

	)

100 
	#PF_IRDA
 23

	)

101 
	#PF_PPPOX
 24

	)

102 
	#PF_WANPIPE
 25

	)

103 
	#PF_LLC
 26

	)

104 
	#PF_CAN
 29

	)

105 
	#PF_TIPC
 30

	)

106 
	#PF_BLUETOOTH
 31

	)

107 
	#PF_IUCV
 32

	)

108 
	#PF_RXRPC
 33

	)

109 
	#PF_ISDN
 34

	)

110 
	#PF_PHONET
 35

	)

111 
	#PF_IEEE802154
 36

	)

112 
	#PF_MAX
 37

	)

115 
	#AF_UNSPEC
 
PF_UNSPEC


	)

116 
	#AF_LOCAL
 
PF_LOCAL


	)

117 
	#AF_UNIX
 
PF_UNIX


	)

118 
	#AF_FILE
 
PF_FILE


	)

119 
	#AF_INET
 
PF_INET


	)

120 
	#AF_AX25
 
PF_AX25


	)

121 
	#AF_IPX
 
PF_IPX


	)

122 
	#AF_APPLETALK
 
PF_APPLETALK


	)

123 
	#AF_NETROM
 
PF_NETROM


	)

124 
	#AF_BRIDGE
 
PF_BRIDGE


	)

125 
	#AF_ATMPVC
 
PF_ATMPVC


	)

126 
	#AF_X25
 
PF_X25


	)

127 
	#AF_INET6
 
PF_INET6


	)

128 
	#AF_ROSE
 
PF_ROSE


	)

129 
	#AF_DEC√t
 
PF_DEC√t


	)

130 
	#AF_NETBEUI
 
PF_NETBEUI


	)

131 
	#AF_SECURITY
 
PF_SECURITY


	)

132 
	#AF_KEY
 
PF_KEY


	)

133 
	#AF_NETLINK
 
PF_NETLINK


	)

134 
	#AF_ROUTE
 
PF_ROUTE


	)

135 
	#AF_PACKET
 
PF_PACKET


	)

136 
	#AF_ASH
 
PF_ASH


	)

137 
	#AF_ECONET
 
PF_ECONET


	)

138 
	#AF_ATMSVC
 
PF_ATMSVC


	)

139 
	#AF_RDS
 
PF_RDS


	)

140 
	#AF_SNA
 
PF_SNA


	)

141 
	#AF_IRDA
 
PF_IRDA


	)

142 
	#AF_PPPOX
 
PF_PPPOX


	)

143 
	#AF_WANPIPE
 
PF_WANPIPE


	)

144 
	#AF_LLC
 
PF_LLC


	)

145 
	#AF_CAN
 
PF_CAN


	)

146 
	#AF_TIPC
 
PF_TIPC


	)

147 
	#AF_BLUETOOTH
 
PF_BLUETOOTH


	)

148 
	#AF_IUCV
 
PF_IUCV


	)

149 
	#AF_RXRPC
 
PF_RXRPC


	)

150 
	#AF_ISDN
 
PF_ISDN


	)

151 
	#AF_PHONET
 
PF_PHONET


	)

152 
	#AF_IEEE802154
 
PF_IEEE802154


	)

153 
	#AF_MAX
 
PF_MAX


	)

159 
	#SOL_RAW
 255

	)

160 
	#SOL_DECNET
 261

	)

161 
	#SOL_X25
 262

	)

162 
	#SOL_PACKET
 263

	)

163 
	#SOL_ATM
 264

	)

164 
	#SOL_AAL
 265

	)

165 
	#SOL_IRDA
 266

	)

168 
	#SOMAXCONN
 128

	)

171 
	~<bôs/sockaddr.h
>

174 
	ssockaddr


176 
__SOCKADDR_COMMON
 (
ß_
);

177 
	mß_d©a
[14];

183 
	#__ss_Æig¡y≥
 

	)

184 
	#_SS_SIZE
 128

	)

185 
	#_SS_PADSIZE
 (
_SS_SIZE
 - (2 *  (
__ss_Æig¡y≥
)))

	)

187 
	ssockaddr_°‹age


189 
__SOCKADDR_COMMON
 (
ss_
);

190 
__ss_Æig¡y≥
 
	m__ss_Æign
;

191 
	m__ss_∑ddög
[
_SS_PADSIZE
];

198 
	mMSG_OOB
 = 0x01,

199 
	#MSG_OOB
 
MSG_OOB


	)

200 
	mMSG_PEEK
 = 0x02,

201 
	#MSG_PEEK
 
MSG_PEEK


	)

202 
	mMSG_DONTROUTE
 = 0x04,

203 
	#MSG_DONTROUTE
 
MSG_DONTROUTE


	)

204 #ifde‡
__USE_GNU


206 
	mMSG_TRYHARD
 = 
MSG_DONTROUTE
,

207 
	#MSG_TRYHARD
 
MSG_DONTROUTE


	)

209 
	mMSG_CTRUNC
 = 0x08,

210 
	#MSG_CTRUNC
 
MSG_CTRUNC


	)

211 
	mMSG_PROXY
 = 0x10,

212 
	#MSG_PROXY
 
MSG_PROXY


	)

213 
	mMSG_TRUNC
 = 0x20,

214 
	#MSG_TRUNC
 
MSG_TRUNC


	)

215 
	mMSG_DONTWAIT
 = 0x40,

216 
	#MSG_DONTWAIT
 
MSG_DONTWAIT


	)

217 
	mMSG_EOR
 = 0x80,

218 
	#MSG_EOR
 
MSG_EOR


	)

219 
	mMSG_WAITALL
 = 0x100,

220 
	#MSG_WAITALL
 
MSG_WAITALL


	)

221 
	mMSG_FIN
 = 0x200,

222 
	#MSG_FIN
 
MSG_FIN


	)

223 
	mMSG_SYN
 = 0x400,

224 
	#MSG_SYN
 
MSG_SYN


	)

225 
	mMSG_CONFIRM
 = 0x800,

226 
	#MSG_CONFIRM
 
MSG_CONFIRM


	)

227 
	mMSG_RST
 = 0x1000,

228 
	#MSG_RST
 
MSG_RST


	)

229 
	mMSG_ERRQUEUE
 = 0x2000,

230 
	#MSG_ERRQUEUE
 
MSG_ERRQUEUE


	)

231 
	mMSG_NOSIGNAL
 = 0x4000,

232 
	#MSG_NOSIGNAL
 
MSG_NOSIGNAL


	)

233 
	mMSG_MORE
 = 0x8000,

234 
	#MSG_MORE
 
MSG_MORE


	)

235 
	mMSG_WAITFORONE
 = 0x10000,

236 
	#MSG_WAITFORONE
 
MSG_WAITFORONE


	)

238 
	mMSG_CMSG_CLOEXEC
 = 0x40000000

241 
	#MSG_CMSG_CLOEXEC
 
MSG_CMSG_CLOEXEC


	)

247 
	smsghdr


249 *
	mmsg_«me
;

250 
sockÀn_t
 
	mmsg_«mñí
;

252 
iovec
 *
	mmsg_iov
;

253 
size_t
 
	mmsg_iovÀn
;

255 *
	mmsg_c⁄åﬁ
;

256 
size_t
 
	mmsg_c⁄åﬁÀn
;

261 
	mmsg_Êags
;

264 #ifde‡
__USE_GNU


266 
	smmsghdr


268 
msghdr
 
	mmsg_hdr
;

269 
	mmsg_Àn
;

274 
	scmsghdr


276 
size_t
 
	mcmsg_Àn
;

281 
	mcmsg_Àvñ
;

282 
	mcmsg_ty≥
;

283 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

284 
__exãnsi⁄__
 
__cmsg_d©a
 
	m__Êex¨r
;

289 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

290 
	#CMSG_DATA
(
cmsg
Ë((cmsg)->
__cmsg_d©a
)

	)

292 
	#CMSG_DATA
(
cmsg
Ë((*Ë((
cmsghdr
 *Ë(cmsgË+ 1))

	)

294 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
Ë
	`__cmsg_nxthdr
 (mhdr, cmsg)

	)

295 
	#CMSG_FIRSTHDR
(
mhdr
) \

296 ((
size_t
Ë(
mhdr
)->
msg_c⁄åﬁÀn
 > (
cmsghdr
) \

297 ? (
cmsghdr
 *Ë(
mhdr
)->
msg_c⁄åﬁ
 : (cmsghd∏*Ë0)

	)

298 
	#CMSG_ALIGN
(
Àn
Ë((÷íË+  (
size_t
) - 1) \

299 & (
size_t
Ë~( (size_tË- 1))

	)

300 
	#CMSG_SPACE
(
Àn
Ë(
	`CMSG_ALIGN
 (len) \

301 + 
	`CMSG_ALIGN
 ( (
cmsghdr
)))

	)

302 
	#CMSG_LEN
(
Àn
Ë(
	`CMSG_ALIGN
 ( (
cmsghdr
)Ë+ (Àn))

	)

304 
cmsghdr
 *
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
,

305 
cmsghdr
 *
__cmsg
Ë
__THROW
;

306 #ifde‡
__USE_EXTERN_INLINES


307 #i‚de‡
_EXTERN_INLINE


308 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

310 
_EXTERN_INLINE
 
cmsghdr
 *

311 
	`__NTH
 (
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
, 
cmsghdr
 *
__cmsg
))

313 i‡((
size_t
Ë
__cmsg
->
cmsg_Àn
 <  (
cmsghdr
))

317 
__cmsg
 = (
cmsghdr
 *) ((*) __cmsg

318 + 
	`CMSG_ALIGN
 (
__cmsg
->
cmsg_Àn
));

319 i‡((*Ë(
__cmsg
 + 1Ë> ((*Ë
__mhdr
->
msg_c⁄åﬁ


320 + 
__mhdr
->
msg_c⁄åﬁÀn
)

321 || ((*Ë
__cmsg
 + 
	`CMSG_ALIGN
 (__cmsg->
cmsg_Àn
)

322 > ((*Ë
__mhdr
->
msg_c⁄åﬁ
 + __mhdr->
msg_c⁄åﬁÀn
)))

325  
__cmsg
;

326 
	}
}

333 
	mSCM_RIGHTS
 = 0x01

334 
	#SCM_RIGHTS
 
SCM_RIGHTS


	)

335 #ifde‡
__USE_GNU


336 , 
	mSCM_CREDENTIALS
 = 0x02

337 
	#SCM_CREDENTIALS
 
SCM_CREDENTIALS


	)

341 #ifde‡
__USE_GNU


343 
	su¸ed


345 
pid_t
 
	mpid
;

346 
uid_t
 
	muid
;

347 
gid_t
 
	mgid
;

352 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


353 #i‚de‡
FIOGETOWN


354 
	#__SYS_SOCKET_H_undef_FIOGETOWN


	)

356 #i‚de‡
FIOSETOWN


357 
	#__SYS_SOCKET_H_undef_FIOSETOWN


	)

359 #i‚de‡
SIOCATMARK


360 
	#__SYS_SOCKET_H_undef_SIOCATMARK


	)

362 #i‚de‡
SIOCGPGRP


363 
	#__SYS_SOCKET_H_undef_SIOCGPGRP


	)

365 #i‚de‡
SIOCGSTAMP


366 
	#__SYS_SOCKET_H_undef_SIOCGSTAMP


	)

368 #i‚de‡
SIOCGSTAMPNS


369 
	#__SYS_SOCKET_H_undef_SIOCGSTAMPNS


	)

371 #i‚de‡
SIOCSPGRP


372 
	#__SYS_SOCKET_H_undef_SIOCSPGRP


	)

377 
	~<asm/sockë.h
>

379 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


380 #ifde‡
__SYS_SOCKET_H_undef_FIOGETOWN


381 #unde‡
__SYS_SOCKET_H_undef_FIOGETOWN


382 #unde‡
FIOGETOWN


384 #ifde‡
__SYS_SOCKET_H_undef_FIOSETOWN


385 #unde‡
__SYS_SOCKET_H_undef_FIOSETOWN


386 #unde‡
FIOSETOWN


388 #ifde‡
__SYS_SOCKET_H_undef_SIOCATMARK


389 #unde‡
__SYS_SOCKET_H_undef_SIOCATMARK


390 #unde‡
SIOCATMARK


392 #ifde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


393 #unde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


394 #unde‡
SIOCGPGRP


396 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


397 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


398 #unde‡
SIOCGSTAMP


400 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


401 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


402 #unde‡
SIOCGSTAMPNS


404 #ifde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


405 #unde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


406 #unde‡
SIOCSPGRP


411 
	slögî


413 
	ml_⁄off
;

414 
	ml_lögî
;

418 
__BEGIN_DECLS


425 
ªcvmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

426 
__vÀn
, 
__Êags
,

427 
__c⁄°
 
time•ec
 *
__tmo
);

429 
	g__END_DECLS


	@/usr/include/bits/socket2.h

20 #i‚de‡
_SYS_SOCKET_H


24 
ssize_t
 
__ªcv_chk
 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

25 
__Êags
);

26 
ssize_t
 
__REDIRECT
 (
__ªcv_Æüs
, (
__fd
, *
__buf
, 
size_t
 
__n
,

27 
__Êags
), 
ªcv
);

28 
ssize_t
 
__REDIRECT
 (
__ªcv_chk_w¨n
,

29 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

30 
__Êags
), 
__ªcv_chk
)

31 
__w¨«âr
 ("recv called with biggerÜengthÅhan size of destination "

34 
__exã∫_Æways_ölöe
 
ssize_t


35 
	$ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
)

37 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

39 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

40  
	`__ªcv_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

42 i‡(
__n
 > 
	`__bos0
 (
__buf
))

43  
	`__ªcv_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

45  
	`__ªcv_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
);

46 
	}
}

48 
ssize_t
 
__ªcv‰om_chk
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

49 
size_t
 
__buÊí
, 
__Êags
,

50 
__SOCKADDR_ARG
 
__addr
,

51 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

52 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_Æüs
,

53 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

54 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

55 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
ªcv‰om
);

56 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_chk_w¨n
,

57 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

58 
size_t
 
__buÊí
, 
__Êags
,

59 
__SOCKADDR_ARG
 
__addr
,

60 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
__ªcv‰om_chk
)

61 
__w¨«âr
 ("recvfrom called with biggerÜengthÅhan size of "

64 
__exã∫_Æways_ölöe
 
ssize_t


65 
	$ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
, 
__Êags
,

66 
__SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
)

68 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

70 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

71  
	`__ªcv‰om_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

72 
__addr
, 
__addr_Àn
);

73 i‡(
__n
 > 
	`__bos0
 (
__buf
))

74  
	`__ªcv‰om_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

75 
__addr
, 
__addr_Àn
);

77  
	`__ªcv‰om_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
, 
__addr
, 
__addr_Àn
);

78 
	}
}

	@/usr/include/bits/stat.h

19 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


23 #i‚de‡
_BITS_STAT_H


24 
	#_BITS_STAT_H
 1

	)

27 
	#_STAT_VER_KERNEL
 0

	)

29 #i‡
__WORDSIZE
 == 32

30 
	#_STAT_VER_SVR4
 2

	)

31 
	#_STAT_VER_LINUX
 3

	)

34 
	#_MKNOD_VER_LINUX
 1

	)

35 
	#_MKNOD_VER_SVR4
 2

	)

36 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‡
__WORDSIZE
 == 32

50 
	m__∑d1
;

52 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‡
__WORDSIZE
 == 32

58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #i‡
__WORDSIZE
 == 64

67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‡
__WORDSIZE
 == 32

71 
	m__∑d2
;

73 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
	m°_˘imí£c
;

105 #i‡
__WORDSIZE
 == 64

106 
	m__unu£d
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__unu£d4
;

110 
	m__unu£d5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #i‡
__WORDSIZE
 == 64

123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #i‡
__WORDSIZE
 == 64

135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

155 
	#°_©ime
 
°_©im
.
tv_£c


	)

156 
	#°_mtime
 
°_mtim
.
tv_£c


	)

157 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

159 
__time_t
 
	m°_©ime
;

160 
	m°_©imí£c
;

161 
__time_t
 
	m°_mtime
;

162 
	m°_mtimí£c
;

163 
__time_t
 
	m°_˘ime
;

164 
	m°_˘imí£c
;

166 #i‡
__WORDSIZE
 == 64

167 
	m__unu£d
[3];

169 
__öo64_t
 
	m°_öo
;

175 
	#_STATBUF_ST_BLKSIZE


	)

176 
	#_STATBUF_ST_RDEV


	)

178 
	#_STATBUF_ST_NSEC


	)

182 
	#__S_IFMT
 0170000

	)

185 
	#__S_IFDIR
 0040000

	)

186 
	#__S_IFCHR
 0020000

	)

187 
	#__S_IFBLK
 0060000

	)

188 
	#__S_IFREG
 0100000

	)

189 
	#__S_IFIFO
 0010000

	)

190 
	#__S_IFLNK
 0120000

	)

191 
	#__S_IFSOCK
 0140000

	)

195 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

196 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

197 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

201 
	#__S_ISUID
 04000

	)

202 
	#__S_ISGID
 02000

	)

203 
	#__S_ISVTX
 01000

	)

204 
	#__S_IREAD
 0400

	)

205 
	#__S_IWRITE
 0200

	)

206 
	#__S_IEXEC
 0100

	)

208 #ifde‡
__USE_ATFILE


209 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

210 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

20 #i‚de‡
_STDIO_H


24 
__BEGIN_NAMESPACE_STD


25 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

26 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

27 
	$__LDBL_REDIR_DECL
 (
•rötf
)

28 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

29 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

30 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
__REDIRECT
 \

33 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

40 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

42 
__END_NAMESPACE_STD


44 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


45 
__BEGIN_NAMESPACE_C99


46 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

47 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

48 
__END_NAMESPACE_C99


51 #ifdef 
__USE_ISOC99


52 
__BEGIN_NAMESPACE_C99


53 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

54 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

55 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

57 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

61 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

63 
__END_NAMESPACE_C99


66 #ifde‡
__USE_GNU


67 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

68 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

69 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

70 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

71 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

73 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

76 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


77 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

78 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

79 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


80 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

81 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

84 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

85 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

86 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

88 #ifde‡
__USE_GNU


89 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

90 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

93 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

94 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

20 #i‚de‡
_STDIO_H


24 #i‚de‡
__exã∫_ölöe


25 
	#__STDIO_INLINE
 
ölöe


	)

27 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

31 #ifde‡
__USE_EXTERN_INLINES


34 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
)

36 
__STDIO_INLINE
 

37 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

39  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

40 
	}
}

44 
__STDIO_INLINE
 

45 
	$gëch¨
 ()

47  
	`_IO_gëc
 (
°dö
);

48 
	}
}

51 #ifde‡
__USE_MISC


53 
__STDIO_INLINE
 

54 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

56  
	`_IO_gëc_u∆ocked
 (
__Â
);

57 
	}
}

61 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


63 
__STDIO_INLINE
 

64 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

66  
	`_IO_gëc_u∆ocked
 (
__Â
);

67 
	}
}

70 
__STDIO_INLINE
 

71 
	$gëch¨_u∆ocked
 ()

73  
	`_IO_gëc_u∆ocked
 (
°dö
);

74 
	}
}

79 
__STDIO_INLINE
 

80 
	$putch¨
 (
__c
)

82  
	`_IO_putc
 (
__c
, 
°dout
);

83 
	}
}

86 #ifde‡
__USE_MISC


88 
__STDIO_INLINE
 

89 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

91  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

92 
	}
}

96 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


98 
__STDIO_INLINE
 

99 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

101  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

102 
	}
}

105 
__STDIO_INLINE
 

106 
	$putch¨_u∆ocked
 (
__c
)

108  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

109 
	}
}

113 #ifdef 
__USE_GNU


115 
__STDIO_INLINE
 
_IO_ssize_t


116 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

118  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

119 
	}
}

123 #ifde‡
__USE_MISC


125 
__STDIO_INLINE
 

126 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

128  
	`_IO_„of_u∆ocked
 (
__°ªam
);

129 
	}
}

132 
__STDIO_INLINE
 

133 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

135  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

136 
	}
}

142 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

143 && !
deföed
 
	g__˝lu•lus


145 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

146 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

147 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

148 && (
size_t
Ë(
size
) != 0) \

149 ? ({ *
__±r
 = (*Ë(
±r
); \

150 
FILE
 *
__°ªam
 = (
°ªam
); \

151 
size_t
 
__˙t
; \

152 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

153 
__˙t
 > 0; --__cnt) \

155 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

156 i‡(
__c
 =
EOF
) \

158 *
__±r
++ = 
__c
; \

160 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

161 / (
size_t
Ë(
size
); }) \

162 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

163 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

165 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

166 (Ë(
n
), (
size_t
) 0) \

167 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

169 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

170 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

171 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

172 && (
size_t
Ë(
size
) != 0) \

173 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

174 
FILE
 *
__°ªam
 = (
°ªam
); \

175 
size_t
 
__˙t
; \

176 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

177 
__˙t
 > 0; --__cnt) \

178 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

180 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

181 / (
size_t
Ë(
size
); }) \

182 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

183 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

185 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

186 (Ë(
n
), (
size_t
) 0) \

187 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

191 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

20 #i‚de‡
_STDIO_H


24 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

25 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

26 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

28 
_G_va_li°
 
__≠
Ë
__THROW
;

30 #ifde‡
__va_¨g_∑ck


31 
__exã∫_Æways_ölöe
 

32 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

34  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

35 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

36 
	}
}

37 #ñi‡!
deföed
 
__˝lu•lus


38 
	#•rötf
(
°r
, ...) \

39 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

40 
__VA_ARGS__
)

	)

43 
__exã∫_Æways_ölöe
 

44 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

45 
_G_va_li°
 
__≠
))

47  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

48 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

49 
	}
}

51 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


53 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

54 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

55 ...Ë
__THROW
;

56 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

57 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

58 
_G_va_li°
 
__≠
Ë
__THROW
;

60 #ifde‡
__va_¨g_∑ck


61 
__exã∫_Æways_ölöe
 

62 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

63 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

65  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

66 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

67 
	}
}

68 #ñi‡!
deföed
 
__˝lu•lus


69 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

70 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

71 
__VA_ARGS__
)

	)

74 
__exã∫_Æways_ölöe
 

75 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

76 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

78  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

79 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

80 
	}
}

84 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

87 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

88 
__¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

89 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

90 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

91 
__v¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

92 
_G_va_li°
 
__≠
);

94 #ifde‡
__va_¨g_∑ck


95 
__exã∫_Æways_ölöe
 

96 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...)

98  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

99 
	`__va_¨g_∑ck
 ());

100 
	}
}

102 
__exã∫_Æways_ölöe
 

103 
	$¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

105  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

106 
	}
}

107 #ñi‡!
deföed
 
__˝lu•lus


108 
	#¥ötf
(...) \

109 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

110 
	#Ârötf
(
°ªam
, ...) \

111 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

114 
__exã∫_Æways_ölöe
 

115 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

117 #ifde‡
__USE_EXTERN_INLINES


118  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

120  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

122 
	}
}

124 
__exã∫_Æways_ölöe
 

125 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

126 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

128  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

129 
	}
}

131 #ifde‡
__USE_GNU


133 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

134 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

135 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

136 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

137 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

138 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

139 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

140 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

141 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

142 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

143 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

144 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

145 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

147 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

148 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

149 
__Êag
,

150 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

151 
_G_va_li°
 
__¨gs
)

152 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

154 #ifde‡
__va_¨g_∑ck


155 
__exã∫_Æways_ölöe
 

156 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

158  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

159 
	`__va_¨g_∑ck
 ());

160 
	}
}

162 
__exã∫_Æways_ölöe
 

163 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

166  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

167 
	`__va_¨g_∑ck
 ());

168 
	}
}

170 
__exã∫_Æways_ölöe
 

171 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

173  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

174 
	`__va_¨g_∑ck
 ());

175 
	}
}

177 
__exã∫_Æways_ölöe
 

178 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

179 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

181  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

182 
	`__va_¨g_∑ck
 ());

183 
	}
}

184 #ñi‡!
deföed
 
__˝lu•lus


185 
	#a•rötf
(
±r
, ...) \

186 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

187 
	#__a•rötf
(
±r
, ...) \

188 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

189 
	#d¥ötf
(
fd
, ...) \

190 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

191 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

192 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

195 
__exã∫_Æways_ölöe
 

196 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

197 
_G_va_li°
 
__≠
))

199  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

200 
	}
}

202 
__exã∫_Æways_ölöe
 

203 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

205  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

206 
	}
}

208 
__exã∫_Æways_ölöe
 

209 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

210 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

212  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

213 
__≠
);

214 
	}
}

220 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

221 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

222 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

225 
__exã∫_Æways_ölöe
 
__wur
 *

226 
	$gës
 (*
__°r
)

228 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

229  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

230  
	`__gës_w¨n
 (
__°r
);

231 
	}
}

233 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

234 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

235 *
	`__REDIRECT
 (
__fgës_Æüs
,

236 (*
__ª°ri˘
 
__s
, 
__n
,

237 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

238 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

239 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

240 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

241 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

244 
__exã∫_Æways_ölöe
 
__wur
 *

245 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

247 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

249 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

250  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

252 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

253  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

255  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

256 
	}
}

258 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

259 
size_t
 
__size
, size_à
__n
,

260 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

261 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

262 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

263 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

264 
‰ód
Ë
__wur
;

265 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

266 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
),

269 
__‰ód_chk
)

270 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

273 
__exã∫_Æways_ölöe
 
__wur
 
size_t


274 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
)

277 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

279 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

280 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

281 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

282  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

284 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

285  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

287  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

288 
	}
}

290 #ifde‡
__USE_GNU


291 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

292 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

293 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

294 (*
__ª°ri˘
 
__s
, 
__n
,

295 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

296 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

297 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

298 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

299 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

302 
__exã∫_Æways_ölöe
 
__wur
 *

303 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

305 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

307 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

308  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

310 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

311  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

313  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

314 
	}
}

317 #ifde‡
__USE_MISC


318 #unde‡
‰ód_u∆ocked


319 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

320 
size_t
 
__size
, size_à
__n
,

321 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

322 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

323 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

324 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

325 
‰ód_u∆ocked
Ë
__wur
;

326 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

327 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
),

330 
__‰ód_u∆ocked_chk
)

331 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

334 
__exã∫_Æways_ölöe
 
__wur
 
size_t


335 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

336 
FILE
 *
__ª°ri˘
 
__°ªam
)

338 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

340 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

341 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

342 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

343  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

344 
__°ªam
);

346 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

347  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

348 
__°ªam
);

351 #ifde‡
__USE_EXTERN_INLINES


352 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

353 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

354 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

355 && 
__size
 * 
__n
 <= 8)

357 
size_t
 
__˙t
 = 
__size
 * 
__n
;

358 *
__˝å
 = (*Ë
__±r
;

359 i‡(
__˙t
 == 0)

362 ; 
__˙t
 > 0; --__cnt)

364 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

365 i‡(
__c
 =
EOF
)

367 *
__˝å
++ = 
__c
;

369  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

372  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

373 
	}
}

	@/usr/include/bits/stdio_lim.h

19 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


23 #ifde‡
_STDIO_H


24 
	#L_tm≤am
 20

	)

25 
	#TMP_MAX
 238328

	)

26 
	#FILENAME_MAX
 4096

	)

28 #ifde‡
__USE_POSIX


29 
	#L_˘îmid
 9

	)

30 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


31 
	#L_cu£rid
 9

	)

36 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


37 #unde‡
FOPEN_MAX


38 
	#FOPEN_MAX
 16

	)

41 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


42 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-ldbl.h

20 #i‚de‡
_STDLIB_H


24 #ifdef 
__USE_ISOC99


25 
__BEGIN_NAMESPACE_C99


26 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 
__END_NAMESPACE_C99


30 #ifde‡
__USE_GNU


31 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

34 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


35 #ifde‡
__USE_MISC


36 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

39 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

40 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

20 #i‚de‡
_STDLIB_H


24 *
	$__ªÆ∑th_chk
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

25 *
__ª°ri˘
 
__ªsﬁved
,

26 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

27 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

28 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

29 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

30 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

31 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

32 *
__ª°ri˘
 
__ªsﬁved
,

33 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


34 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

37 
__exã∫_Æways_ölöe
 
__wur
 *

38 
	`__NTH
 (
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

40 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

42 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


43 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

44  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

46  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

49  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

50 
	}
}

53 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

54 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

55 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

56 
size_t
 
__buÊí
), 
±¢ame_r
)

57 
	`__n⁄nuŒ
 ((2));

58 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

60 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

61 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

64 
__exã∫_Æways_ölöe
 

65 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

67 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

70  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

71 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

72  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

74  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

75 
	}
}

78 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

79 
__THROW
 
__wur
;

80 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

81 
w˘omb
Ë
__wur
;

83 
__exã∫_Æways_ölöe
 
__wur
 

84 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

89 
	#__STDLIB_MB_LEN_MAX
 16

	)

90 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


93 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

94  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

95  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

96 
	}
}

99 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

100 
__c⁄°
 *
__ª°ri˘
 
__§c
,

101 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

102 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

103 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

104 
__c⁄°
 *
__ª°ri˘
 
__§c
,

105 
size_t
 
__Àn
), 
mb°owcs
);

106 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

107 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

108 
__c⁄°
 *
__ª°ri˘
 
__§c
,

109 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

110 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

113 
__exã∫_Æways_ölöe
 
size_t


114 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

115 
size_t
 
__Àn
))

117 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

119 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

120  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

121 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

123 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

124  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

125 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

127  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

128 
	}
}

131 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

132 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

133 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

134 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

135 (*
__ª°ri˘
 
__d°
,

136 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

137 
size_t
 
__Àn
), 
wc°ombs
);

138 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

139 (*
__ª°ri˘
 
__d°
,

140 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

141 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

142 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

144 
__exã∫_Æways_ölöe
 
size_t


145 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__§c
,

146 
size_t
 
__Àn
))

148 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

150 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

151  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

152 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

153  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

155  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

156 
	}
}

	@/usr/include/bits/string.h

20 #i‚de‡
_STRING_H


26 
	#_STRING_ARCH_u«lig√d
 1

	)

	@/usr/include/bits/string2.h

21 #i‚de‡
_STRING_H


25 #i‡!
deföed
 
__NO_STRING_INLINES
 && !deföed 
__BOUNDED_POINTERS__


42 #i‚de‡
__STRING_INLINE


43 #ifde‡
__˝lu•lus


44 
	#__STRING_INLINE
 
ölöe


	)

46 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 #i‡
_STRING_ARCH_u«lig√d


52 
	~<ídün.h
>

53 
	~<bôs/ty≥s.h
>

55 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


56 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

57 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

58 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

59 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

60 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

61 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

62 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

63 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

65 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

66 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

67 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1])

	)

68 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

69 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

70 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

71 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

72 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3])

	)

77 
	#__STRING2_COPY_TYPE
(
N
) \

78 °ru˘ { 
__¨r
[
N
]; } \

79 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

80 
	t__STRING2_COPY_TYPE
 (2);

81 
__STRING2_COPY_TYPE
 (3);

82 
__STRING2_COPY_TYPE
 (4);

83 
__STRING2_COPY_TYPE
 (5);

84 
__STRING2_COPY_TYPE
 (6);

85 
__STRING2_COPY_TYPE
 (7);

86 
__STRING2_COPY_TYPE
 (8);

87 #unde‡
__STRING2_COPY_TYPE


93 
	#__°rög2_1b±r_p
(
__x
) \

94 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

97 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


98 #i‡!
__GNUC_PREREQ
 (3, 0)

99 #i‡
_STRING_ARCH_u«lig√d


100 
	#mem£t
(
s
, 
c
, 
n
) \

101 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

102 ? ((
n
) == 1 \

103 ? 
	`__mem£t_1
 (
s
, 
c
) \

104 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

105 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

106 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

107 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

109 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

110 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

112 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

113 ({ *
__s
 = (
s
); \

115 
__ui
; \

116 
__usi
; \

117 
__uc
; \

118 } *
__u
 = 
__s
; \

119 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

122 (Ë(
n
)) \

125 
__u
->
__ui
 = 
__c
 * 0x01010101; \

126 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

128 
__u
->
__ui
 = 
__c
 * 0x01010101; \

129 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

131 
__u
->
__ui
 = 
__c
 * 0x01010101; \

132 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

134 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

135 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

136 
__u
->
__uc
 = (Ë
__c
; \

140 
__u
->
__ui
 = 
__c
 * 0x01010101; \

141 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

143 
__u
->
__ui
 = 
__c
 * 0x01010101; \

144 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

146 
__u
->
__ui
 = 
__c
 * 0x01010101; \

147 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

149 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

153 
__u
->
__ui
 = 
__c
 * 0x01010101; \

154 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

156 
__u
->
__ui
 = 
__c
 * 0x01010101; \

157 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

159 
__u
->
__ui
 = 
__c
 * 0x01010101; \

160 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

162 
__u
->
__uc
 = (Ë
__c
; \

166 
__u
->
__ui
 = 
__c
 * 0x01010101; \

167 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

169 
__u
->
__ui
 = 
__c
 * 0x01010101; \

170 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

172 
__u
->
__ui
 = 
__c
 * 0x01010101; \

173 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

175 
__u
->
__ui
 = 
__c
 * 0x01010101; \

180 
__s
; })

	)

182 
	#mem£t
(
s
, 
c
, 
n
) \

183 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

184 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

185 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

194 #i‡
__GNUC_PREREQ
 (2, 91)

195 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

203 #ifde‡
__USE_GNU


204 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


205 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


206 #i‡
__GNUC_PREREQ
 (3, 4)

207 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

208 #ñi‡
__GNUC_PREREQ
 (3, 0)

209 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

210 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

211 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

212 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

213 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

215 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

216 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

217 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

218 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

219 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

223 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

226 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


227 #i‡
_STRING_ARCH_u«lig√d


228 #i‚de‡
_FORCE_INLINES


229 
	#__memp˝y_¨gs
(
§c
) \

230 ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[2], \

231 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[6], \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

235 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

237 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

238 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

239 
__uöt32_t
, 
size_t
);

240 
__STRING_INLINE
 *

241 
	$__memp˝y_smÆl
 (*
__de°1
,

242 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

243 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

244 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

245 
size_t
 
__§˛í
)

248 
__uöt32_t
 
__ui
;

249 
__uöt16_t
 
__usi
;

250 
__uc
;

251 
__c
;

252 } *
__u
 = 
__de°1
;

253 (Ë
__§˛í
)

256 
__u
->
__c
 = 
__§c0_1
;

257 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

260 
__u
->
__usi
 = 
__§c0_2
;

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

264 
__u
->
__usi
 = 
__§c0_2
;

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

266 
__u
->
__c
 = 
__§c2_1
;

267 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

270 
__u
->
__ui
 = 
__§c0_4
;

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

274 
__u
->
__ui
 = 
__§c0_4
;

275 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

276 
__u
->
__c
 = 
__§c4_1
;

277 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

280 
__u
->
__ui
 = 
__§c0_4
;

281 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

282 
__u
->
__usi
 = 
__§c4_2
;

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

286 
__u
->
__ui
 = 
__§c0_4
;

287 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

288 
__u
->
__usi
 = 
__§c4_2
;

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

290 
__u
->
__c
 = 
__§c6_1
;

291 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

294 
__u
->
__ui
 = 
__§c0_4
;

295 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

296 
__u
->
__ui
 = 
__§c4_4
;

297 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

300  (*Ë
__u
;

301 
	}
}

303 #i‚de‡
_FORCE_INLINES


304 
	#__memp˝y_¨gs
(
§c
) \

305 ((
__c⁄°
 *Ë(
§c
))[0], \

306 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

307 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1] } }), \

308 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

309 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

310 ((
__c⁄°
 *Ë(
§c
))[2] } }), \

311 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

312 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

313 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3] } }), \

314 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

315 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

316 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

317 ((
__c⁄°
 *Ë(
§c
))[4] } }), \

318 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

319 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

320 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

321 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5] } }), \

322 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

323 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

324 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

325 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

326 ((
__c⁄°
 *Ë(
§c
))[6] } }), \

327 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

328 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

329 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

330 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

331 ((
__c⁄°
 *Ë(
§c
))[6], ((__c⁄° *Ë(§c))[7] } })

	)

333 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

334 
__STRING2_COPY_ARR3
,

335 
__STRING2_COPY_ARR4
,

336 
__STRING2_COPY_ARR5
,

337 
__STRING2_COPY_ARR6
,

338 
__STRING2_COPY_ARR7
,

339 
__STRING2_COPY_ARR8
, 
size_t
);

340 
__STRING_INLINE
 *

341 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

342 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

343 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

344 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

345 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

348 
__c
;

349 
__STRING2_COPY_ARR2
 
__sˇ2
;

350 
__STRING2_COPY_ARR3
 
__sˇ3
;

351 
__STRING2_COPY_ARR4
 
__sˇ4
;

352 
__STRING2_COPY_ARR5
 
__sˇ5
;

353 
__STRING2_COPY_ARR6
 
__sˇ6
;

354 
__STRING2_COPY_ARR7
 
__sˇ7
;

355 
__STRING2_COPY_ARR8
 
__sˇ8
;

356 } *
__u
 = 
__de°
;

357 (Ë
__§˛í
)

360 
__u
->
__c
 = 
__§c1
;

363 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

366 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

369 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

372 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

375 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

378 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

381 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

384  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

385 
	}
}

393 #i‚de‡
_HAVE_STRING_ARCH_°rchr


394 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

395 #i‡
__GNUC_PREREQ
 (3, 2)

396 
	#°rchr
(
s
, 
c
) \

397 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

398 && (
c
) == '\0' \

399 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

400 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

402 
	#°rchr
(
s
, 
c
) \

403 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

404 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

405 : 
	`°rchr
 (
s
, 
c
)))

	)

411 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

412 || 
deföed
 
	g_FORCE_INLINES


413 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

414 
	#°r˝y
(
de°
, 
§c
) \

415 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

416 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

417 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

418 
	`°æí
 (
§c
) + 1) \

419 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

420 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

423 #i‡
_STRING_ARCH_u«lig√d


424 #i‚de‡
_FORCE_INLINES


425 
	#__°r˝y_¨gs
(
§c
) \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

429 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

431 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

432 
__uöt32_t
, __uöt32_t, 
size_t
);

433 
__STRING_INLINE
 *

434 
	$__°r˝y_smÆl
 (*
__de°
,

435 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

436 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

437 
size_t
 
__§˛í
)

440 
__uöt32_t
 
__ui
;

441 
__uöt16_t
 
__usi
;

442 
__uc
;

443 } *
__u
 = (*Ë
__de°
;

444 (Ë
__§˛í
)

447 
__u
->
__uc
 = '\0';

450 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
->
__usi
 = 
__§c0_2
;

454 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

455 
__u
->
__uc
 = '\0';

458 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
->
__ui
 = 
__§c0_4
;

462 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

463 
__u
->
__uc
 = '\0';

466 
__u
->
__ui
 = 
__§c0_4
;

467 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

468 
__u
->
__usi
 = 
__§c4_2
;

471 
__u
->
__ui
 = 
__§c0_4
;

472 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

473 
__u
->
__usi
 = 
__§c4_2
;

474 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

475 
__u
->
__uc
 = '\0';

478 
__u
->
__ui
 = 
__§c0_4
;

479 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

480 
__u
->
__ui
 = 
__§c4_4
;

483  
__de°
;

484 
	}
}

486 #i‚de‡
_FORCE_INLINES


487 
	#__°r˝y_¨gs
(
§c
) \

488 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

489 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

490 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

491 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

493 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

494 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

495 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

496 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

497 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

498 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

500 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

501 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

502 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

503 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

504 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

505 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

506 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

507 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

509 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

510 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

511 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

512 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

513 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

515 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

516 
__STRING2_COPY_ARR3
,

517 
__STRING2_COPY_ARR4
,

518 
__STRING2_COPY_ARR5
,

519 
__STRING2_COPY_ARR6
,

520 
__STRING2_COPY_ARR7
,

521 
__STRING2_COPY_ARR8
, 
size_t
);

522 
__STRING_INLINE
 *

523 
	$__°r˝y_smÆl
 (*
__de°
,

524 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

525 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

526 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

527 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

530 
__c
;

531 
__STRING2_COPY_ARR2
 
__sˇ2
;

532 
__STRING2_COPY_ARR3
 
__sˇ3
;

533 
__STRING2_COPY_ARR4
 
__sˇ4
;

534 
__STRING2_COPY_ARR5
 
__sˇ5
;

535 
__STRING2_COPY_ARR6
 
__sˇ6
;

536 
__STRING2_COPY_ARR7
 
__sˇ7
;

537 
__STRING2_COPY_ARR8
 
__sˇ8
;

538 } *
__u
 = (*Ë
__de°
;

539 (Ë
__§˛í
)

542 
__u
->
__c
 = '\0';

545 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

548 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

551 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

554 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

557 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

560 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

563 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

566  
__de°
;

567 
	}
}

573 #ifde‡
__USE_GNU


574 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


575 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


576 #i‡
__GNUC_PREREQ
 (3, 4)

577 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

578 #ñi‡
__GNUC_PREREQ
 (3, 0)

579 
	#__°p˝y
(
de°
, 
§c
) \

580 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

581 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

582 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

583 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

585 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

587 
	#__°p˝y
(
de°
, 
§c
) \

588 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

589 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

590 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

591 
	`°æí
 (
§c
) + 1) \

592 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

594 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

598 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

601 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


602 #i‡
_STRING_ARCH_u«lig√d


603 #i‚de‡
_FORCE_INLINES


604 
	#__°p˝y_¨gs
(
§c
) \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

608 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

610 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

611 
__uöt32_t
, __uöt32_t, 
size_t
);

612 
__STRING_INLINE
 *

613 
	$__°p˝y_smÆl
 (*
__de°
,

614 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

615 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

616 
size_t
 
__§˛í
)

619 
__ui
;

620 
__usi
;

621 
__uc
;

622 
__c
;

623 } *
__u
 = (*Ë
__de°
;

624 (Ë
__§˛í
)

627 
__u
->
__uc
 = '\0';

630 
__u
->
__usi
 = 
__§c0_2
;

631 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

634 
__u
->
__usi
 = 
__§c0_2
;

635 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

636 
__u
->
__uc
 = '\0';

639 
__u
->
__ui
 = 
__§c0_4
;

640 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

643 
__u
->
__ui
 = 
__§c0_4
;

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

645 
__u
->
__uc
 = '\0';

648 
__u
->
__ui
 = 
__§c0_4
;

649 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

650 
__u
->
__usi
 = 
__§c4_2
;

651 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

654 
__u
->
__ui
 = 
__§c0_4
;

655 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

656 
__u
->
__usi
 = 
__§c4_2
;

657 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

658 
__u
->
__uc
 = '\0';

661 
__u
->
__ui
 = 
__§c0_4
;

662 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

663 
__u
->
__ui
 = 
__§c4_4
;

664 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

667  &
__u
->
__c
;

668 
	}
}

670 #i‚de‡
_FORCE_INLINES


671 
	#__°p˝y_¨gs
(
§c
) \

672 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

673 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

674 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

675 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

677 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

678 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

679 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

680 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

681 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

682 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

684 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

685 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

686 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

687 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

688 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

689 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

690 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

691 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

693 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

694 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

695 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

696 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

697 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

699 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

700 
__STRING2_COPY_ARR3
,

701 
__STRING2_COPY_ARR4
,

702 
__STRING2_COPY_ARR5
,

703 
__STRING2_COPY_ARR6
,

704 
__STRING2_COPY_ARR7
,

705 
__STRING2_COPY_ARR8
, 
size_t
);

706 
__STRING_INLINE
 *

707 
	$__°p˝y_smÆl
 (*
__de°
,

708 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

709 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

710 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

711 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

714 
__c
;

715 
__STRING2_COPY_ARR2
 
__sˇ2
;

716 
__STRING2_COPY_ARR3
 
__sˇ3
;

717 
__STRING2_COPY_ARR4
 
__sˇ4
;

718 
__STRING2_COPY_ARR5
 
__sˇ5
;

719 
__STRING2_COPY_ARR6
 
__sˇ6
;

720 
__STRING2_COPY_ARR7
 
__sˇ7
;

721 
__STRING2_COPY_ARR8
 
__sˇ8
;

722 } *
__u
 = (*Ë
__de°
;

723 (Ë
__§˛í
)

726 
__u
->
__c
 = '\0';

729 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

732 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

735 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

738 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

741 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

744 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

747 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

750  
__de°
 + 
__§˛í
 - 1;

751 
	}
}

759 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


760 #i‡
__GNUC_PREREQ
 (3, 2)

761 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

763 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

764 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

765 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

766 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

768 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

774 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


775 #ifde‡
_USE_STRING_ARCH_°rchr


776 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

777 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

778 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

779 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

780 ? 
	`°rˇt
 (
__de°
, 
§c
) \

781 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

782 
§c
, 
n
)Ë'\0', 
__de°
)) \

783 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

784 #ñi‡
__GNUC_PREREQ
 (3, 2)

785 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

787 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

788 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

789 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

790 ? 
	`°rˇt
 (
de°
, 
§c
) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

792 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

798 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


799 #i‡
__GNUC_PREREQ
 (3, 2)

800 
	#°rcmp
(
s1
, 
s2
) \

801 
__exãnsi⁄__
 \

802 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

803 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

804 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), 
__s2_Àn
 = __buûtö_°æí (
s2
), \

805 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

806 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

807 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

808 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

809 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), __s1_len < 4) \

810 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

811 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

812 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

813 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

814 && (
__s2_Àn
 = 
	`__buûtö_°æí
 (
s2
), __s2_len < 4) \

815 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

816 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

817 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

818 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

820 
	#°rcmp
(
s1
, 
s2
) \

821 
__exãnsi⁄__
 \

822 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

823 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

824 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

825 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

826 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

827 ? 
	`memcmp
 ((
__c⁄°
 *Ë(
s1
), (__c⁄° *Ë(
s2
), \

828 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

829 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

830 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

831 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

832 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

833 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

834 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

835 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

836 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

837 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

838 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

839 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

842 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

843 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

844 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

845 - ((
__c⁄°
 *Ë(__c⁄° *)(
s2
))[0]);\

846 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

848 
__ªsu…
 = (((
__c⁄°
 *) \

849 (
__c⁄°
 *Ë(
s1
))[1] \

850 - ((
__c⁄°
 *) \

851 (
__c⁄°
 *Ë(
s2
))[1]); \

852 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

854 
__ªsu…
 = \

855 (((
__c⁄°
 *) \

856 (
__c⁄°
 *Ë(
s1
))[2] \

857 - ((
__c⁄°
 *) \

858 (
__c⁄°
 *Ë(
s2
))[2]); \

859 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

860 
__ªsu…
 = \

861 (((
__c⁄°
 *) \

862 (
__c⁄°
 *Ë(
s1
))[3] \

863 - ((
__c⁄°
 *) \

864 (
__c⁄°
 *Ë(
s2
))[3]); \

867 
__ªsu…
; }))

	)

869 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

870 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s2
 = \

871 (
__c⁄°
 *Ë(__c⁄° *Ë(
s2
); \

872 
__ªsu…
 = \

873 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

874 - 
__s2
[0]); \

875 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

877 
__ªsu…
 = (((
__c⁄°
 *) \

878 (
__c⁄°
 *Ë(
s1
))[1] - 
__s2
[1]); \

879 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

881 
__ªsu…
 = (((
__c⁄°
 *) \

882 (
__c⁄°
 *Ë(
s1
))[2] - 
__s2
[2]);\

883 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

884 
__ªsu…
 = (((
__c⁄°
 *) \

885 (
__c⁄°
 *Ë(
s1
))[3] \

886 - 
__s2
[3]); \

889 
__ªsu…
; }))

	)

891 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

892 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s1
 = \

893 (
__c⁄°
 *Ë(__c⁄° *Ë(
s1
); \

894 
__ªsu…
 = \

895 
__s1
[0] - ((
__c⁄°
 *) \

896 (
__c⁄°
 *Ë(
s2
))[0]; \

897 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

899 
__ªsu…
 = (
__s1
[1] \

900 - ((
__c⁄°
 *) \

901 (
__c⁄°
 *Ë(
s2
))[1]); \

902 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

904 
__ªsu…
 = \

905 (
__s1
[2] - ((
__c⁄°
 *) \

906 (
__c⁄°
 *Ë(
s2
))[2]); \

907 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

908 
__ªsu…
 = \

909 (
__s1
[3] \

910 - ((
__c⁄°
 *) \

911 (
__c⁄°
 *Ë(
s2
))[3]); \

914 
__ªsu…
; }))

	)

919 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


920 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

921 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

922 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

923 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

924 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

925 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

926 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

932 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


933 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


934 #i‡
__GNUC_PREREQ
 (3, 2)

935 
	#°rc•n
(
s
, 
ªje˘
) \

936 
__exãnsi⁄__
 \

937 ({ 
__r0
, 
__r1
, 
__r2
; \

938 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

939 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

940 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

941 : ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

942 ? 
	`°æí
 (
s
) \

943 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

944 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

945 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

946 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

947 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

948 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

950 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

952 
	#°rc•n
(
s
, 
ªje˘
) \

953 
__exãnsi⁄__
 \

954 ({ 
__r0
, 
__r1
, 
__r2
; \

955 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

956 ? ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

957 ? 
	`°æí
 (
s
) \

958 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

959 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

960 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

961 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

962 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

963 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

965 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

969 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
);

970 
__STRING_INLINE
 
size_t


971 
	$__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

975 ++
__ªsu…
;

976  
__ªsu…
;

977 
	}
}

979 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

980 
__ªje˘2
);

981 
__STRING_INLINE
 
size_t


982 
	$__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
)

984 
size_t
 
__ªsu…
 = 0;

985 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


986 && 
__s
[
__ªsu…
] !
__ªje˘2
)

987 ++
__ªsu…
;

988  
__ªsu…
;

989 
	}
}

991 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

992 
__ªje˘2
, 
__ªje˘3
);

993 
__STRING_INLINE
 
size_t


994 
	$__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
,

995 
__ªje˘3
)

997 
size_t
 
__ªsu…
 = 0;

998 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


999 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

1000 ++
__ªsu…
;

1001  
__ªsu…
;

1002 
	}
}

1008 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1009 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1010 #i‡
__GNUC_PREREQ
 (3, 2)

1011 
	#°r•n
(
s
, 
ac˚±
) \

1012 
__exãnsi⁄__
 \

1013 ({ 
__a0
, 
__a1
, 
__a2
; \

1014 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1015 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1016 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1017 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1018 ? ((Ë(
s
), 0) \

1019 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1020 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1021 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1022 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1023 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1024 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1026 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1028 
	#°r•n
(
s
, 
ac˚±
) \

1029 
__exãnsi⁄__
 \

1030 ({ 
__a0
, 
__a1
, 
__a2
; \

1031 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1032 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1033 ? ((Ë(
s
), 0) \

1034 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1035 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1036 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1037 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1038 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1039 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1041 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1045 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±
)

1052 ++
__ªsu…
;

1053  
__ªsu…
;

1054 
	}
}

1056 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1057 
__ac˚±2
);

1058 
__STRING_INLINE
 
size_t


1059 
	$__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1061 
size_t
 
__ªsu…
 = 0;

1063 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1064 ++
__ªsu…
;

1065  
__ªsu…
;

1066 
	}
}

1068 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1069 
__ac˚±2
, 
__ac˚±3
);

1070 
__STRING_INLINE
 
size_t


1071 
	$__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1073 
size_t
 
__ªsu…
 = 0;

1075 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1076 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1077 ++
__ªsu…
;

1078  
__ªsu…
;

1079 
	}
}

1084 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1085 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1086 #i‡
__GNUC_PREREQ
 (3, 2)

1087 
	#°Ωbrk
(
s
, 
ac˚±
) \

1088 
__exãnsi⁄__
 \

1089 ({ 
__a0
, 
__a1
, 
__a2
; \

1090 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1091 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1092 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1093 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1094 ? ((Ë(
s
), (*Ë
NULL
) \

1095 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1096 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1097 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1098 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1099 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1100 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1102 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1104 
	#°Ωbrk
(
s
, 
ac˚±
) \

1105 
__exãnsi⁄__
 \

1106 ({ 
__a0
, 
__a1
, 
__a2
; \

1107 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1108 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1109 ? ((Ë(
s
), (*Ë
NULL
) \

1110 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1111 ? 
	`°rchr
 (
s
, 
__a0
) \

1112 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1113 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1114 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1115 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1117 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1121 
__STRING_INLINE
 *
__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1122 
__ac˚±2
);

1123 
__STRING_INLINE
 *

1124 
	$__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1127 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1128 ++
__s
;

1129  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1130 
	}
}

1132 
__STRING_INLINE
 *
__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1133 
__ac˚±2
, 
__ac˚±3
);

1134 
__STRING_INLINE
 *

1135 
	$__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
,

1136 
__ac˚±3
)

1139 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1140 && *
__s
 !
__ac˚±3
)

1141 ++
__s
;

1142  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1143 
	}
}

1149 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1150 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1151 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1152 ? (((
__c⁄°
 *Ë(
√edÀ
))[0] == '\0' \

1153 ? (*Ë(
size_t
Ë(
hay°ack
) \

1154 : (((
__c⁄°
 *Ë(
√edÀ
))[1] == '\0' \

1155 ? 
	`°rchr
 (
hay°ack
, \

1156 ((
__c⁄°
 *Ë(
√edÀ
))[0]) \

1157 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1158 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1162 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1163 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1164 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1165 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1166 && ((
__c⁄°
 *Ë(
£p
))[0] != '\0' \

1167 && ((
__c⁄°
 *Ë(
£p
))[1] == '\0' \

1168 ? 
	`__°πok_r_1c
 (
s
, ((
__c⁄°
 *Ë(
£p
))[0], 
√xç
) \

1169 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1172 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1173 
__STRING_INLINE
 *

1174 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1176 *
__ªsu…
;

1177 i‡(
__s
 =
NULL
)

1178 
__s
 = *
__√xç
;

1179 *
__s
 =
__£p
)

1180 ++
__s
;

1181 
__ªsu…
 = 
NULL
;

1182 i‡(*
__s
 != '\0')

1184 
__ªsu…
 = 
__s
++;

1185 *
__s
 != '\0')

1186 i‡(*
__s
++ =
__£p
)

1188 
__s
[-1] = '\0';

1192 *
__√xç
 = 
__s
;

1193  
__ªsu…
;

1194 
	}
}

1195 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1196 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1201 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1202 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1204 *
__°r£p_g
 (**
__°rögp
, 
__c⁄°
 *
__dñim
);

1205 
	#__°r£p
(
s
, 
ªje˘
) \

1206 
__exãnsi⁄__
 \

1207 ({ 
__r0
, 
__r1
, 
__r2
; \

1208 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1209 && (
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], \

1210 ((
__c⁄°
 *Ë(
ªje˘
))[0] != '\0') \

1211 ? ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], \

1212 ((
__c⁄°
 *Ë(
ªje˘
))[1] == '\0') \

1213 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1214 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

1215 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1216 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

1217 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1218 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1219 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1222 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1223 
__STRING_INLINE
 *

1224 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1226 *
__ªtvÆ
 = *
__s
;

1227 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1228 *(*
__s
)++ = '\0';

1229  
__ªtvÆ
;

1230 
	}
}

1232 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1233 
__STRING_INLINE
 *

1234 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1236 *
__ªtvÆ
 = *
__s
;

1237 i‡(
__ªtvÆ
 !
NULL
)

1239 *
__˝
 = 
__ªtvÆ
;

1242 i‡(*
__˝
 == '\0')

1244 
__˝
 = 
NULL
;

1247 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1249 *
__˝
++ = '\0';

1252 ++
__˝
;

1254 *
__s
 = 
__˝
;

1256  
__ªtvÆ
;

1257 
	}
}

1259 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1260 
__ªje˘3
);

1261 
__STRING_INLINE
 *

1262 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1264 *
__ªtvÆ
 = *
__s
;

1265 i‡(
__ªtvÆ
 !
NULL
)

1267 *
__˝
 = 
__ªtvÆ
;

1270 i‡(*
__˝
 == '\0')

1272 
__˝
 = 
NULL
;

1275 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1277 *
__˝
++ = '\0';

1280 ++
__˝
;

1282 *
__s
 = 
__˝
;

1284  
__ªtvÆ
;

1285 
	}
}

1286 #ifde‡
__USE_BSD


1287 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1294 #ifde‡
__USE_MISC


1296 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1297 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1298 
	~<°dlib.h
>

1301 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1303 *
	$__°rdup
 (
__c⁄°
 *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1304 
	#__°rdup
(
s
) \

1305 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1306 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1307 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1308 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1309 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1310 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1312 
__ªtvÆ
; 
	}
})) \

1313 : 
	`__°rdup
 (
s
)))

	)

1315 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1316 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1320 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1322 *
	$__°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

1323 
__THROW
 
__©åibuã_mÆloc__
;

1324 
	#__°∫dup
(
s
, 
n
) \

1325 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1326 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1327 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1328 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1329 
size_t
 
__n
 = (
n
); \

1330 *
__ªtvÆ
; \

1331 i‡(
__n
 < 
__Àn
) \

1332 
__Àn
 = 
__n
 + 1; \

1333 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1334 i‡(
__ªtvÆ
 !
NULL
) \

1336 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1337 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1338 
__Àn
 - 1); \

1340 
__ªtvÆ
; 
	}
})) \

1341 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1343 #ifde‡
__USE_GNU


1344 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1350 #i‚de‡
_FORCE_INLINES


1351 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

19 #i‚de‡
_STRING_H


23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

26 #i‚de‡
__˝lu•lus


30 #unde‡
mem˝y


31 #unde‡
memmove


32 #unde‡
mem£t


33 #unde‡
°rˇt


34 #unde‡
°r˝y


35 #unde‡
°∫ˇt


36 #unde‡
°∫˝y


37 #ifde‡
__USE_GNU


38 #unde‡
memp˝y


39 #unde‡
°p˝y


41 #ifde‡
__USE_BSD


42 #unde‡
bc›y


43 #unde‡
bzîo


48 
__exã∫_Æways_ölöe
 *

49 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

50 
size_t
 
__Àn
))

52  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

53 
	}
}

55 
__exã∫_Æways_ölöe
 *

56 
__NTH
 (
	$memmove
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

57 
size_t
 
__Àn
))

59  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

60 
	}
}

62 #ifde‡
__USE_GNU


63 
__exã∫_Æways_ölöe
 *

64 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

65 
size_t
 
__Àn
))

67  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

68 
	}
}

77 
__exã∫_Æways_ölöe
 *

78 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

80 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

81 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

83 
	`__w¨n_mem£t_zîo_Àn
 ();

84  
__de°
;

86  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

87 
	}
}

89 #ifde‡
__USE_BSD


90 
__exã∫_Æways_ölöe
 

91 
__NTH
 (
	$bc›y
 (
__c⁄°
 *
__ª°ri˘
 
__§c
, *__ª°ri˘ 
__de°
,

92 
size_t
 
__Àn
))

94 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

95 
	}
}

97 
__exã∫_Æways_ölöe
 

98 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

100 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

101 
	}
}

104 
__exã∫_Æways_ölöe
 *

105 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

107  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

108 
	}
}

110 #ifde‡
__USE_GNU


111 
__exã∫_Æways_ölöe
 *

112 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

114  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

115 
	}
}

119 
__exã∫_Æways_ölöe
 *

120 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

121 
size_t
 
__Àn
))

123  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

124 
	}
}

127 *
	$__°≤˝y_chk
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

128 
size_t
 
__de°Àn
Ë
__THROW
;

129 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
,

130 
__c⁄°
 *
__§c
,

131 
size_t
 
__n
), 
°≤˝y
);

133 
__exã∫_Æways_ölöe
 *

134 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
))

136 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

137 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

138  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

139  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

140 
	}
}

143 
__exã∫_Æways_ölöe
 *

144 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

146  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

147 
	}
}

150 
__exã∫_Æways_ölöe
 *

151 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

152 
size_t
 
__Àn
))

154  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

155 
	}
}

	@/usr/include/bits/sys_errlist.h

20 #i‚de‡
_STDIO_H


26 #ifde‡ 
__USE_BSD


27 
sys_√º
;

28 
__c⁄°
 *__c⁄° 
sys_îæi°
[];

30 #ifde‡ 
__USE_GNU


31 
_sys_√º
;

32 
__c⁄°
 *__c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

46 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 #i‡
__WORDSIZE
 == 64

53 
	t__quad_t
;

54 
	t__u_quad_t
;

55 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


56 
__exãnsi⁄__
 
	t__quad_t
;

57 
__exãnsi⁄__
 
	t__u_quad_t
;

61 
	m__vÆ
[2];

62 } 
	t__quad_t
;

65 
__u_l⁄g
 
	m__vÆ
[2];

66 } 
	t__u_quad_t
;

99 
	#__S16_TYPE
 

	)

100 
	#__U16_TYPE
 

	)

101 
	#__S32_TYPE
 

	)

102 
	#__U32_TYPE
 

	)

103 
	#__SLONGWORD_TYPE
 

	)

104 
	#__ULONGWORD_TYPE
 

	)

105 #i‡
__WORDSIZE
 == 32

106 
	#__SQUAD_TYPE
 
__quad_t


	)

107 
	#__UQUAD_TYPE
 
__u_quad_t


	)

108 
	#__SWORD_TYPE
 

	)

109 
	#__UWORD_TYPE
 

	)

110 
	#__SLONG32_TYPE
 

	)

111 
	#__ULONG32_TYPE
 

	)

112 
	#__S64_TYPE
 
__quad_t


	)

113 
	#__U64_TYPE
 
__u_quad_t


	)

116 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	t__SQUAD_TYPE
 

	)

119 
	t__UQUAD_TYPE
 

	)

120 
	t__SWORD_TYPE
 

	)

121 
	t__UWORD_TYPE
 

	)

122 
	t__SLONG32_TYPE
 

	)

123 
	t__ULONG32_TYPE
 

	)

124 
	t__S64_TYPE
 

	)

125 
	t__U64_TYPE
 

	)

127 
	t__STD_TYPE
 

	)

131 
	~<bôs/ty≥sizes.h
>

134 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

135 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

136 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

137 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

138 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

139 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

140 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

141 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

142 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

143 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

144 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

145 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

146 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

147 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

148 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

149 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

150 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

151 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

153 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

154 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

155 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

158 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

161 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

164 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

169 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

170 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

173 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

174 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

177 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

178 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

180 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__off64_t
 
	t__loff_t
;

185 
__quad_t
 *
	t__qaddr_t
;

186 *
	t__ˇddr_t
;

189 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

192 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

195 #unde‡
__STD_TYPE


	@/usr/include/bits/unistd.h

20 #i‚de‡
_UNISTD_H


24 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

25 
size_t
 
__buÊí
Ë
__wur
;

26 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

27 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

28 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

29 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

30 
size_t
 
__buÊí
), 
__ªad_chk
)

31 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

34 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


35 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

37 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

39 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

40  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

42 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

43  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

45  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

46 
	}
}

48 #ifde‡
__USE_UNIX98


49 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

50 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

51 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

52 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

53 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

54 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

55 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

56 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

57 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

58 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

59 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

60 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

61 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

62 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

64 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

65 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

66 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

67 
__¥ód64_chk
)

68 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

71 #i‚de‡
__USE_FILE_OFFSET64


72 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


73 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

75 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

77 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

78  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

80 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

81  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

82 
	`__bos0
 (
__buf
));

84  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

85 
	}
}

87 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


88 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

90 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

92 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

93  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

95 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

96  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

97 
	`__bos0
 (
__buf
));

100  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

101 
	}
}

104 #ifde‡
__USE_LARGEFILE64


105 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


106 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

108 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

110 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

111  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

113 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

114  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

115 
	`__bos0
 (
__buf
));

118  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

119 
	}
}

123 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


124 
ssize_t
 
	$__ªadlök_chk
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

125 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

126 
size_t
 
__buÊí
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

128 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

129 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

130 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

131 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

132 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

133 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

134 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

135 
size_t
 
__buÊí
), 
__ªadlök_chk
)

136 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

139 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


140 
	`__NTH
 (
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

141 
size_t
 
__Àn
))

143 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

145 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

146  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

148 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

149  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

151  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

152 
	}
}

155 #ifde‡
__USE_ATFILE


156 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

157 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

158 
size_t
 
__buÊí
)

159 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

160 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

161 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

162 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

163 
ªadlök©
)

164 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

165 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

166 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

167 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

168 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

169 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

173 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


174 
	`__NTH
 (
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

177 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

179 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

180  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

182 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

183  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

184 
	`__bos
 (
__buf
));

186  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

187 
	}
}

190 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

191 
__THROW
 
__wur
;

192 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

193 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

194 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

195 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

196 
__gëcwd_chk
)

197 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

200 
__exã∫_Æways_ölöe
 
__wur
 *

201 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

203 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

205 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

206  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

208 i‡(
__size
 > 
	`__bos
 (
__buf
))

209  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

211  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

212 
	}
}

214 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


215 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

217 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

218 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

221 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

222 
	`__NTH
 (
	$gëwd
 (*
__buf
))

224 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

225  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

226  
	`__gëwd_w¨n
 (
__buf
);

227 
	}
}

230 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

231 
size_t
 
__buÊí
Ë
__THROW
;

232 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

233 
size_t
 
__Àn
), 
c⁄f°r
);

234 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

235 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

236 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

237 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

240 
__exã∫_Æways_ölöe
 
size_t


241 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

243 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

245 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

246  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

248 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

249  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

251  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

252 
	}
}

255 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

256 
__THROW
 
__wur
;

257 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

258 
gëgroups
Ë
__wur
;

259 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

260 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

261 
__gëgroups_chk
)

262 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

265 
__exã∫_Æways_ölöe
 

266 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

268 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

270 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

271  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

273 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

274  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

276  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

277 
	}
}

280 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

281 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

282 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

283 
size_t
 
__buÊí
), 
ây«me_r
)

284 
	`__n⁄nuŒ
 ((2));

285 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

286 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

287 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

288 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

291 
__exã∫_Æways_ölöe
 

292 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

294 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

296 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

297  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

299 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

300  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

302  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

303 
	}
}

306 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


307 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

308 
	`__n⁄nuŒ
 ((1));

309 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

310 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

311 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

312 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

313 
__gëlogö_r_chk
)

314 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

317 
__exã∫_Æways_ölöe
 

318 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

320 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

322 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

323  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

325 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

326  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

328  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

329 
	}
}

333 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


334 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

335 
__THROW
 
	`__n⁄nuŒ
 ((1));

336 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

337 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

338 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

339 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

340 
__gëho°«me_chk
)

341 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

344 
__exã∫_Æways_ölöe
 

345 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

347 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

349 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

350  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

352 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

353  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

355  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

356 
	}
}

360 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

361 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

363 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

364 
size_t
 
__buÊí
),

365 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

366 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

367 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

368 
__gëdomaö«me_chk
)

369 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

373 
__exã∫_Æways_ölöe
 

374 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

376 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

378 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

379  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

381 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

382  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

384  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

385 
	}
}

	@/usr/include/bits/waitflags.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


26 
	#WNOHANG
 1

	)

27 
	#WUNTRACED
 2

	)

30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

35 
	#__WNOTHREAD
 0x20000000

	)

37 
	#__WALL
 0x40000000

	)

38 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


29 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

32 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

35 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

38 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

41 
	#__WIFSIGNALED
(
°©us
) \

42 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

45 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

49 #ifde‡
WCONTINUED


50 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

54 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

57 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

58 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

59 
	#__W_CONTINUED
 0xffff

	)

60 
	#__WCOREFLAG
 0x80

	)

63 #ifdef 
__USE_BSD


65 
	~<ídün.h
>

67 
	uwaô


69 
	mw_°©us
;

72 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


73 
	m__w_ãrmsig
:7;

74 
	m__w_c‹edump
:1;

75 
	m__w_ªtcode
:8;

78 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


80 
	m__w_ªtcode
:8;

81 
	m__w_c‹edump
:1;

82 
	m__w_ãrmsig
:7;

84 } 
	m__waô_ãrmö©ed
;

87 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


88 
	m__w_°›vÆ
:8;

89 
	m__w_°›sig
:8;

92 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


94 
	m__w_°›sig
:8;

95 
	m__w_°›vÆ
:8;

97 } 
	m__waô_°›≥d
;

100 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

101 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

102 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

103 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

104 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

19 #i‚def 
_FEATURES_H


20 
	#_FEATURES_H
 1

	)

96 #unde‡
__USE_ISOC99


97 #unde‡
__USE_ISOC95


98 #unde‡
__USE_POSIX


99 #unde‡
__USE_POSIX2


100 #unde‡
__USE_POSIX199309


101 #unde‡
__USE_POSIX199506


102 #unde‡
__USE_XOPEN


103 #unde‡
__USE_XOPEN_EXTENDED


104 #unde‡
__USE_UNIX98


105 #unde‡
__USE_XOPEN2K


106 #unde‡
__USE_XOPEN2KXSI


107 #unde‡
__USE_XOPEN2K8


108 #unde‡
__USE_XOPEN2K8XSI


109 #unde‡
__USE_LARGEFILE


110 #unde‡
__USE_LARGEFILE64


111 #unde‡
__USE_FILE_OFFSET64


112 #unde‡
__USE_BSD


113 #unde‡
__USE_SVID


114 #unde‡
__USE_MISC


115 #unde‡
__USE_ATFILE


116 #unde‡
__USE_GNU


117 #unde‡
__USE_REENTRANT


118 #unde‡
__USE_FORTIFY_LEVEL


119 #unde‡
__FAVOR_BSD


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

129 
	#__USE_ANSI
 1

	)

138 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


139 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

140 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

142 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

147 #i‡
deföed
 
_BSD_SOURCE
 && \

148 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

149 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

150 
	#__FAVOR_BSD
 1

	)

154 #ifde‡
_GNU_SOURCE


155 #unde‡
_ISOC95_SOURCE


156 
	#_ISOC95_SOURCE
 1

	)

157 #unde‡
_ISOC99_SOURCE


158 
	#_ISOC99_SOURCE
 1

	)

159 #unde‡
_POSIX_SOURCE


160 
	#_POSIX_SOURCE
 1

	)

161 #unde‡
_POSIX_C_SOURCE


162 
	#_POSIX_C_SOURCE
 200809L

	)

163 #unde‡
_XOPEN_SOURCE


164 
	#_XOPEN_SOURCE
 700

	)

165 #unde‡
_XOPEN_SOURCE_EXTENDED


166 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

167 #unde‡
_LARGEFILE64_SOURCE


168 
	#_LARGEFILE64_SOURCE
 1

	)

169 #unde‡
_BSD_SOURCE


170 
	#_BSD_SOURCE
 1

	)

171 #unde‡
_SVID_SOURCE


172 
	#_SVID_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

180 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

181 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

182 
	#_BSD_SOURCE
 1

	)

183 
	#_SVID_SOURCE
 1

	)

190 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

191 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

192 
	#__USE_ISOC99
 1

	)

196 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

197 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

198 
	#__USE_ISOC95
 1

	)

203 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

204 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

205 
	#_POSIX_SOURCE
 1

	)

206 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

207 
	#_POSIX_C_SOURCE
 2

	)

208 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

209 
	#_POSIX_C_SOURCE
 199506L

	)

210 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

211 
	#_POSIX_C_SOURCE
 200112L

	)

213 
	#_POSIX_C_SOURCE
 200809L

	)

215 
	#__USE_POSIX_IMPLICITLY
 1

	)

218 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


219 
	#__USE_POSIX
 1

	)

222 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


223 
	#__USE_POSIX2
 1

	)

226 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

227 
	#__USE_POSIX199309
 1

	)

230 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

231 
	#__USE_POSIX199506
 1

	)

234 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

235 
	#__USE_XOPEN2K
 1

	)

236 #unde‡
__USE_ISOC95


237 
	#__USE_ISOC95
 1

	)

238 #unde‡
__USE_ISOC99


239 
	#__USE_ISOC99
 1

	)

242 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

243 
	#__USE_XOPEN2K8
 1

	)

244 #unde‡
_ATFILE_SOURCE


245 
	#_ATFILE_SOURCE
 1

	)

248 #ifdef 
_XOPEN_SOURCE


249 
	#__USE_XOPEN
 1

	)

250 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

251 
	#__USE_XOPEN_EXTENDED
 1

	)

252 
	#__USE_UNIX98
 1

	)

253 #unde‡
_LARGEFILE_SOURCE


254 
	#_LARGEFILE_SOURCE
 1

	)

255 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

256 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

257 
	#__USE_XOPEN2K8
 1

	)

258 
	#__USE_XOPEN2K8XSI
 1

	)

260 
	#__USE_XOPEN2K
 1

	)

261 
	#__USE_XOPEN2KXSI
 1

	)

262 #unde‡
__USE_ISOC95


263 
	#__USE_ISOC95
 1

	)

264 #unde‡
__USE_ISOC99


265 
	#__USE_ISOC99
 1

	)

268 #ifde‡
_XOPEN_SOURCE_EXTENDED


269 
	#__USE_XOPEN_EXTENDED
 1

	)

274 #ifde‡
_LARGEFILE_SOURCE


275 
	#__USE_LARGEFILE
 1

	)

278 #ifde‡
_LARGEFILE64_SOURCE


279 
	#__USE_LARGEFILE64
 1

	)

282 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

283 
	#__USE_FILE_OFFSET64
 1

	)

286 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


287 
	#__USE_MISC
 1

	)

290 #ifdef 
_BSD_SOURCE


291 
	#__USE_BSD
 1

	)

294 #ifdef 
_SVID_SOURCE


295 
	#__USE_SVID
 1

	)

298 #ifdef 
_ATFILE_SOURCE


299 
	#__USE_ATFILE
 1

	)

302 #ifdef 
_GNU_SOURCE


303 
	#__USE_GNU
 1

	)

306 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


307 
	#__USE_REENTRANT
 1

	)

310 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

311 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

312 #i‡
_FORTIFY_SOURCE
 > 1

313 
	#__USE_FORTIFY_LEVEL
 2

	)

315 
	#__USE_FORTIFY_LEVEL
 1

	)

318 
	#__USE_FORTIFY_LEVEL
 0

	)

322 
	~<bôs/¥edefs.h
>

325 
	#__STDC_ISO_10646__
 200009L

	)

333 #unde‡
__GNU_LIBRARY__


334 
	#__GNU_LIBRARY__
 6

	)

338 
	#__GLIBC__
 2

	)

339 
	#__GLIBC_MINOR__
 12

	)

341 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

342 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

345 #i‡
deföed
 
__GNUC__
 \

346 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

347 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

348 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

349 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

353 #i‚de‡
__ASSEMBLER__


354 #i‚de‡
_SYS_CDEFS_H


355 
	~<sys/cdefs.h
>

360 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


361 
	#__USE_LARGEFILE
 1

	)

362 
	#__USE_LARGEFILE64
 1

	)

368 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

369 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

370 && 
deföed
 
	g__exã∫_ölöe


371 
	#__USE_EXTERN_INLINES
 1

	)

376 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

377 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

378 && 
deföed
 
	g__exã∫_ölöe


379 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

387 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
);

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

151 
	#_IO_SKIPWS
 01

	)

152 
	#_IO_LEFT
 02

	)

153 
	#_IO_RIGHT
 04

	)

154 
	#_IO_INTERNAL
 010

	)

155 
	#_IO_DEC
 020

	)

156 
	#_IO_OCT
 040

	)

157 
	#_IO_HEX
 0100

	)

158 
	#_IO_SHOWBASE
 0200

	)

159 
	#_IO_SHOWPOINT
 0400

	)

160 
	#_IO_UPPERCASE
 01000

	)

161 
	#_IO_SHOWPOS
 02000

	)

162 
	#_IO_SCIENTIFIC
 04000

	)

163 
	#_IO_FIXED
 010000

	)

164 
	#_IO_UNITBUF
 020000

	)

165 
	#_IO_STDIO
 040000

	)

166 
	#_IO_DONT_CLOSE
 0100000

	)

167 
	#_IO_BOOLALPHA
 0200000

	)

170 
_IO_jump_t
; 
	g_IO_FILE
;

173 #ifde‡
_IO_MTSAFE_IO


174 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

175 
	~<bôs/°dio-lock.h
>

180 
	t_IO_lock_t
;

186 
	s_IO_m¨kî
 {

187 
_IO_m¨kî
 *
	m_√xt
;

188 
_IO_FILE
 *
	m_sbuf
;

192 
	m_pos
;

194 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

195 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

196 
	mpublic
:

197 
°ªamm¨kî
(
°ªambuf
 *
sb
);

198 ~
°ªamm¨kî
();

199 
ßvög
(Ë{  
	m_•os
 == -2; }

200 
dñè
(
°ªamm¨kî
&);

201 
dñè
();

206 
	e__codecvt_ªsu…


208 
	m__codecvt_ok
,

209 
	m__codecvt_∑πül
,

210 
	m__codecvt_îr‹
,

211 
	m__codecvt_noc⁄v


214 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


217 
	s_IO_codecvt


219 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

220 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

221 
	m__mb°©e_t
 *,

222 c⁄° 
	mwch¨_t
 *,

223 c⁄° 
	mwch¨_t
 *,

224 c⁄° 
	mwch¨_t
 **, *,

226 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

227 
	m__mb°©e_t
 *, *,

229 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

230 
	m__mb°©e_t
 *,

232 c⁄° **, 
	mwch¨_t
 *,

233 
	mwch¨_t
 *, wchar_t **);

234 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

235 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

236 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

237 c⁄° *, c⁄° *, 
	m_IO_size_t
);

238 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

240 
_IO_ic⁄v_t
 
	m__cd_ö
;

241 
_IO_ic⁄v_t
 
	m__cd_out
;

245 
	s_IO_wide_d©a


247 
wch¨_t
 *
	m_IO_ªad_±r
;

248 
wch¨_t
 *
	m_IO_ªad_íd
;

249 
wch¨_t
 *
	m_IO_ªad_ba£
;

250 
wch¨_t
 *
	m_IO_wrôe_ba£
;

251 
wch¨_t
 *
	m_IO_wrôe_±r
;

252 
wch¨_t
 *
	m_IO_wrôe_íd
;

253 
wch¨_t
 *
	m_IO_buf_ba£
;

254 
wch¨_t
 *
	m_IO_buf_íd
;

256 
wch¨_t
 *
	m_IO_ßve_ba£
;

257 
wch¨_t
 *
	m_IO_backup_ba£
;

259 
wch¨_t
 *
	m_IO_ßve_íd
;

261 
__mb°©e_t
 
	m_IO_°©e
;

262 
__mb°©e_t
 
	m_IO_œ°_°©e
;

263 
_IO_codecvt
 
	m_codecvt
;

265 
wch¨_t
 
	m_sh‹tbuf
[1];

267 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

271 
	s_IO_FILE
 {

272 
	m_Êags
;

273 
	#_IO_fûe_Êags
 
_Êags


	)

277 * 
	m_IO_ªad_±r
;

278 * 
	m_IO_ªad_íd
;

279 * 
	m_IO_ªad_ba£
;

280 * 
	m_IO_wrôe_ba£
;

281 * 
	m_IO_wrôe_±r
;

282 * 
	m_IO_wrôe_íd
;

283 * 
	m_IO_buf_ba£
;

284 * 
	m_IO_buf_íd
;

286 *
	m_IO_ßve_ba£
;

287 *
	m_IO_backup_ba£
;

288 *
	m_IO_ßve_íd
;

290 
_IO_m¨kî
 *
	m_m¨kîs
;

292 
_IO_FILE
 *
	m_chaö
;

294 
	m_fûío
;

296 
	m_blksize
;

298 
	m_Êags2
;

300 
_IO_off_t
 
	m_ﬁd_off£t
;

302 
	#__HAVE_COLUMN


	)

304 
	m_cur_cﬁumn
;

305 sig√d 
	m_vèbÀ_off£t
;

306 
	m_sh‹tbuf
[1];

310 
_IO_lock_t
 *
	m_lock
;

311 #ifde‡
_IO_USE_OLD_IO_FILE


314 
	s_IO_FILE_com∂ëe


316 
_IO_FILE
 
	m_fûe
;

318 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

319 
_IO_off64_t
 
	m_off£t
;

320 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


322 
_IO_codecvt
 *
	m_codecvt
;

323 
_IO_wide_d©a
 *
	m_wide_d©a
;

324 
_IO_FILE
 *
	m_‰ìªs_li°
;

325 *
	m_‰ìªs_buf
;

326 
size_t
 
	m_‰ìªs_size
;

328 *
	m__∑d1
;

329 *
	m__∑d2
;

330 *
	m__∑d3
;

331 *
	m__∑d4
;

332 
size_t
 
	m__∑d5
;

334 
	m_mode
;

336 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

340 #i‚de‡
__˝lu•lus


341 
_IO_FILE
 
	t_IO_FILE
;

344 
	g_IO_FILE_∂us
;

346 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

347 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

349 #i‚de‡
_LIBC


350 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

351 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

352 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

354 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

355 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

356 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

364 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

372 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

373 
	tsize_t
 
	t__n
);

381 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

384 
	t__io_˛o£_‚
 (*
	t__cookõ
);

387 #ifde‡
_GNU_SOURCE


389 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

390 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

391 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

392 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

397 
__io_ªad_‚
 *
	mªad
;

398 
__io_wrôe_‚
 *
	mwrôe
;

399 
__io_£ek_‚
 *
	m£ek
;

400 
__io_˛o£_‚
 *
	m˛o£
;

401 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

402 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

404 
	g_IO_cookõ_fûe
;

407 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

408 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

412 #ifde‡
__˝lu•lus


416 
__undîÊow
 (
_IO_FILE
 *);

417 
__uÊow
 (
_IO_FILE
 *);

418 
__ovîÊow
 (
_IO_FILE
 *, );

419 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


420 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

421 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

422 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

425 #i‡ 
__GNUC__
 >= 3

426 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

431 
	#_IO_gëc_u∆ocked
(
_Â
) \

432 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

433 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

434 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

435 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

436 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

437 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

438 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

439 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

440 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

441 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

443 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


444 
	#_IO_gëwc_u∆ocked
(
_Â
) \

445 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

446 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

447 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

448 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

449 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

450 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

451 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

452 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

453 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

454 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

457 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

458 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

460 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

461 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

462 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

463 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

468 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

469 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

471 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

472 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

473 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 #ifde‡
_IO_MTSAFE_IO


476 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

477 
	#_IO_Êockfûe
(
_Â
) \

478 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

479 
	#_IO_fu∆ockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

482 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

483 
	#_IO_Êockfûe
(
_Â
Ë

	)

484 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

485 
	#_IO_·rylockfûe
(
_Â
Ë

	)

486 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

487 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

490 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

491 
_IO_va_li°
, *
__ª°ri˘
);

492 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

493 
_IO_va_li°
);

494 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

495 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

497 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

498 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

500 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

502 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


503 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

504 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

505 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

506 #i‡
__GNUC__
 >= 2

509 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


510 
	~<shlib-com∑t.h
>

511 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

512 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

513 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

514 c⁄° 
_IO_°dö_u£d
;

515 
wók_exã∫
 (
_IO_°dö_u£d
);

518 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


519 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

523 
	#_IO_fwide
(
__Â
, 
__mode
) \

524 ({ 
__ªsu…
 = (
__mode
); \

525 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

527 i‡((
__Â
)->
_mode
 == 0) \

529 (
__Â
)->
_mode
 = -1; \

530 
__ªsu…
 = (
__Â
)->
_mode
; \

532 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

533 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

535 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

536 
__ªsu…
; })

	)

539 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

540 
_IO_va_li°
, *
__ª°ri˘
);

541 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

542 
_IO_va_li°
);

543 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

544 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

547 #ifde‡
__LDBL_COMPAT


548 
	~<bôs/libio-ldbl.h
>

551 #ifde‡
__˝lu•lus


	@/usr/include/linux/if_addr.h

1 #i‚de‡
__LINUX_IF_ADDR_H


2 
	#__LINUX_IF_ADDR_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

7 
	siÁddrmsg
 {

8 
__u8
 
	miÁ_Ámûy
;

9 
__u8
 
	miÁ_¥efixÀn
;

10 
__u8
 
	miÁ_Êags
;

11 
__u8
 
	miÁ_sc›e
;

12 
__u32
 
	miÁ_ödex
;

23 
	mIFA_UNSPEC
,

24 
	mIFA_ADDRESS
,

25 
	mIFA_LOCAL
,

26 
	mIFA_LABEL
,

27 
	mIFA_BROADCAST
,

28 
	mIFA_ANYCAST
,

29 
	mIFA_CACHEINFO
,

30 
	mIFA_MULTICAST
,

31 
	m__IFA_MAX
,

34 
	#IFA_MAX
 (
__IFA_MAX
 - 1)

	)

37 
	#IFA_F_SECONDARY
 0x01

	)

38 
	#IFA_F_TEMPORARY
 
IFA_F_SECONDARY


	)

40 
	#IFA_F_NODAD
 0x02

	)

41 
	#IFA_F_OPTIMISTIC
 0x04

	)

42 
	#IFA_F_DADFAILED
 0x08

	)

43 
	#IFA_F_HOMEADDRESS
 0x10

	)

44 
	#IFA_F_DEPRECATED
 0x20

	)

45 
	#IFA_F_TENTATIVE
 0x40

	)

46 
	#IFA_F_PERMANENT
 0x80

	)

48 
	siÁ_ˇcheöfo
 {

49 
__u32
 
	miÁ_¥e„ªd
;

50 
__u32
 
	miÁ_vÆid
;

51 
__u32
 
	mc°amp
;

52 
__u32
 
	mt°amp
;

56 
	#IFA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
iÁddrmsg
))))

	)

57 
	#IFA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
iÁddrmsg
))

	)

	@/usr/include/linux/if_link.h

1 #i‚de‡
_LINUX_IF_LINK_H


2 
	#_LINUX_IF_LINK_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

8 
	sπ∆_lök_°©s
 {

9 
__u32
 
	mrx_∑ckës
;

10 
__u32
 
	mtx_∑ckës
;

11 
__u32
 
	mrx_byãs
;

12 
__u32
 
	mtx_byãs
;

13 
__u32
 
	mrx_îr‹s
;

14 
__u32
 
	mtx_îr‹s
;

15 
__u32
 
	mrx_dr›≥d
;

16 
__u32
 
	mtx_dr›≥d
;

17 
__u32
 
	mmu…iˇ°
;

18 
__u32
 
	mcﬁlisi⁄s
;

21 
__u32
 
	mrx_Àngth_îr‹s
;

22 
__u32
 
	mrx_ovî_îr‹s
;

23 
__u32
 
	mrx_¸c_îr‹s
;

24 
__u32
 
	mrx_‰ame_îr‹s
;

25 
__u32
 
	mrx_fifo_îr‹s
;

26 
__u32
 
	mrx_mis£d_îr‹s
;

29 
__u32
 
	mtx_ab‹ãd_îr‹s
;

30 
__u32
 
	mtx_ˇºõr_îr‹s
;

31 
__u32
 
	mtx_fifo_îr‹s
;

32 
__u32
 
	mtx_hóπbót_îr‹s
;

33 
__u32
 
	mtx_wödow_îr‹s
;

36 
__u32
 
	mrx_com¥es£d
;

37 
__u32
 
	mtx_com¥es£d
;

40 
	sπ∆_lök_°©s64
 {

41 
__u64
 
	mrx_∑ckës
;

42 
__u64
 
	mtx_∑ckës
;

43 
__u64
 
	mrx_byãs
;

44 
__u64
 
	mtx_byãs
;

45 
__u64
 
	mrx_îr‹s
;

46 
__u64
 
	mtx_îr‹s
;

47 
__u64
 
	mrx_dr›≥d
;

48 
__u64
 
	mtx_dr›≥d
;

49 
__u64
 
	mmu…iˇ°
;

50 
__u64
 
	mcﬁlisi⁄s
;

53 
__u64
 
	mrx_Àngth_îr‹s
;

54 
__u64
 
	mrx_ovî_îr‹s
;

55 
__u64
 
	mrx_¸c_îr‹s
;

56 
__u64
 
	mrx_‰ame_îr‹s
;

57 
__u64
 
	mrx_fifo_îr‹s
;

58 
__u64
 
	mrx_mis£d_îr‹s
;

61 
__u64
 
	mtx_ab‹ãd_îr‹s
;

62 
__u64
 
	mtx_ˇºõr_îr‹s
;

63 
__u64
 
	mtx_fifo_îr‹s
;

64 
__u64
 
	mtx_hóπbót_îr‹s
;

65 
__u64
 
	mtx_wödow_îr‹s
;

68 
__u64
 
	mrx_com¥es£d
;

69 
__u64
 
	mtx_com¥es£d
;

73 
	sπ∆_lök_ifm≠
 {

74 
__u64
 
	mmem_°¨t
;

75 
__u64
 
	mmem_íd
;

76 
__u64
 
	mba£_addr
;

77 
__u16
 
	múq
;

78 
__u8
 
	mdma
;

79 
__u8
 
	mp‹t
;

83 
	mIFLA_UNSPEC
,

84 
	mIFLA_ADDRESS
,

85 
	mIFLA_BROADCAST
,

86 
	mIFLA_IFNAME
,

87 
	mIFLA_MTU
,

88 
	mIFLA_LINK
,

89 
	mIFLA_QDISC
,

90 
	mIFLA_STATS
,

91 
	mIFLA_COST
,

92 
	#IFLA_COST
 
IFLA_COST


	)

93 
	mIFLA_PRIORITY
,

94 
	#IFLA_PRIORITY
 
IFLA_PRIORITY


	)

95 
	mIFLA_MASTER
,

96 
	#IFLA_MASTER
 
IFLA_MASTER


	)

97 
	mIFLA_WIRELESS
,

98 
	#IFLA_WIRELESS
 
IFLA_WIRELESS


	)

99 
	mIFLA_PROTINFO
,

100 
	#IFLA_PROTINFO
 
IFLA_PROTINFO


	)

101 
	mIFLA_TXQLEN
,

102 
	#IFLA_TXQLEN
 
IFLA_TXQLEN


	)

103 
	mIFLA_MAP
,

104 
	#IFLA_MAP
 
IFLA_MAP


	)

105 
	mIFLA_WEIGHT
,

106 
	#IFLA_WEIGHT
 
IFLA_WEIGHT


	)

107 
	mIFLA_OPERSTATE
,

108 
	mIFLA_LINKMODE
,

109 
	mIFLA_LINKINFO
,

110 
	#IFLA_LINKINFO
 
IFLA_LINKINFO


	)

111 
	mIFLA_NET_NS_PID
,

112 
	mIFLA_IFALIAS
,

113 
	mIFLA_NUM_VF
,

114 
	mIFLA_VFINFO_LIST
,

115 
	mIFLA_STATS64
,

116 
	mIFLA_VF_PORTS
,

117 
	mIFLA_PORT_SELF
,

118 
	m__IFLA_MAX


122 
	#IFLA_MAX
 (
__IFLA_MAX
 - 1)

	)

125 
	#IFLA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
iföfomsg
))))

	)

126 
	#IFLA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
iföfomsg
))

	)

159 
	mIFLA_INET6_UNSPEC
,

160 
	mIFLA_INET6_FLAGS
,

161 
	mIFLA_INET6_CONF
,

162 
	mIFLA_INET6_STATS
,

163 
	mIFLA_INET6_MCAST
,

164 
	mIFLA_INET6_CACHEINFO
,

165 
	mIFLA_INET6_ICMP6STATS
,

166 
	m__IFLA_INET6_MAX


169 
	#IFLA_INET6_MAX
 (
__IFLA_INET6_MAX
 - 1)

	)

171 
	siÊa_ˇcheöfo
 {

172 
__u32
 
	mmax_ªasm_Àn
;

173 
__u32
 
	mt°amp
;

174 
__u32
 
	mªachabÀ_time
;

175 
__u32
 
	mªå™s_time
;

179 
	mIFLA_INFO_UNSPEC
,

180 
	mIFLA_INFO_KIND
,

181 
	mIFLA_INFO_DATA
,

182 
	mIFLA_INFO_XSTATS
,

183 
	m__IFLA_INFO_MAX
,

186 
	#IFLA_INFO_MAX
 (
__IFLA_INFO_MAX
 - 1)

	)

191 
	mIFLA_VLAN_UNSPEC
,

192 
	mIFLA_VLAN_ID
,

193 
	mIFLA_VLAN_FLAGS
,

194 
	mIFLA_VLAN_EGRESS_QOS
,

195 
	mIFLA_VLAN_INGRESS_QOS
,

196 
	m__IFLA_VLAN_MAX
,

199 
	#IFLA_VLAN_MAX
 (
__IFLA_VLAN_MAX
 - 1)

	)

201 
	siÊa_vœn_Êags
 {

202 
__u32
 
	mÊags
;

203 
__u32
 
	mmask
;

207 
	mIFLA_VLAN_QOS_UNSPEC
,

208 
	mIFLA_VLAN_QOS_MAPPING
,

209 
	m__IFLA_VLAN_QOS_MAX


212 
	#IFLA_VLAN_QOS_MAX
 (
__IFLA_VLAN_QOS_MAX
 - 1)

	)

214 
	siÊa_vœn_qos_m≠pög
 {

215 
__u32
 
	m‰om
;

216 
__u32
 
	mto
;

221 
	mIFLA_MACVLAN_UNSPEC
,

222 
	mIFLA_MACVLAN_MODE
,

223 
	m__IFLA_MACVLAN_MAX
,

226 
	#IFLA_MACVLAN_MAX
 (
__IFLA_MACVLAN_MAX
 - 1)

	)

228 
	emacvœn_mode
 {

229 
	mMACVLAN_MODE_PRIVATE
 = 1,

230 
	mMACVLAN_MODE_VEPA
 = 2,

231 
	mMACVLAN_MODE_BRIDGE
 = 4,

237 
	mIFLA_VF_INFO_UNSPEC
,

238 
	mIFLA_VF_INFO
,

239 
	m__IFLA_VF_INFO_MAX
,

242 
	#IFLA_VF_INFO_MAX
 (
__IFLA_VF_INFO_MAX
 - 1)

	)

245 
	mIFLA_VF_UNSPEC
,

246 
	mIFLA_VF_MAC
,

247 
	mIFLA_VF_VLAN
,

248 
	mIFLA_VF_TX_RATE
,

249 
	m__IFLA_VF_MAX
,

252 
	#IFLA_VF_MAX
 (
__IFLA_VF_MAX
 - 1)

	)

254 
	siÊa_vf_mac
 {

255 
__u32
 
	mvf
;

256 
__u8
 
	mmac
[32];

259 
	siÊa_vf_vœn
 {

260 
__u32
 
	mvf
;

261 
__u32
 
	mvœn
;

262 
__u32
 
	mqos
;

265 
	siÊa_vf_tx_øã
 {

266 
__u32
 
	mvf
;

267 
__u32
 
	møã
;

270 
	siÊa_vf_öfo
 {

271 
__u32
 
	mvf
;

272 
__u8
 
	mmac
[32];

273 
__u32
 
	mvœn
;

274 
__u32
 
	mqos
;

275 
__u32
 
	mtx_øã
;

294 
	mIFLA_VF_PORT_UNSPEC
,

295 
	mIFLA_VF_PORT
,

296 
	m__IFLA_VF_PORT_MAX
,

299 
	#IFLA_VF_PORT_MAX
 (
__IFLA_VF_PORT_MAX
 - 1)

	)

302 
	mIFLA_PORT_UNSPEC
,

303 
	mIFLA_PORT_VF
,

304 
	mIFLA_PORT_PROFILE
,

305 
	mIFLA_PORT_VSI_TYPE
,

306 
	mIFLA_PORT_INSTANCE_UUID
,

307 
	mIFLA_PORT_HOST_UUID
,

308 
	mIFLA_PORT_REQUEST
,

309 
	mIFLA_PORT_RESPONSE
,

310 
	m__IFLA_PORT_MAX
,

313 
	#IFLA_PORT_MAX
 (
__IFLA_PORT_MAX
 - 1)

	)

315 
	#PORT_PROFILE_MAX
 40

	)

316 
	#PORT_UUID_MAX
 16

	)

317 
	#PORT_SELF_VF
 -1

	)

320 
	mPORT_REQUEST_PREASSOCIATE
 = 0,

321 
	mPORT_REQUEST_PREASSOCIATE_RR
,

322 
	mPORT_REQUEST_ASSOCIATE
,

323 
	mPORT_REQUEST_DISASSOCIATE
,

327 
	mPORT_VDP_RESPONSE_SUCCESS
 = 0,

328 
	mPORT_VDP_RESPONSE_INVALID_FORMAT
,

329 
	mPORT_VDP_RESPONSE_INSUFFICIENT_RESOURCES
,

330 
	mPORT_VDP_RESPONSE_UNUSED_VTID
,

331 
	mPORT_VDP_RESPONSE_VTID_VIOLATION
,

332 
	mPORT_VDP_RESPONSE_VTID_VERSION_VIOALTION
,

333 
	mPORT_VDP_RESPONSE_OUT_OF_SYNC
,

335 
	mPORT_PROFILE_RESPONSE_SUCCESS
 = 0x100,

336 
	mPORT_PROFILE_RESPONSE_INPROGRESS
,

337 
	mPORT_PROFILE_RESPONSE_INVALID
,

338 
	mPORT_PROFILE_RESPONSE_BADSTATE
,

339 
	mPORT_PROFILE_RESPONSE_INSUFFICIENT_RESOURCES
,

340 
	mPORT_PROFILE_RESPONSE_ERROR
,

343 
	siÊa_p‹t_vsi
 {

344 
__u8
 
	mvsi_mgr_id
;

345 
__u8
 
	mvsi_ty≥_id
[3];

346 
__u8
 
	mvsi_ty≥_vîsi⁄
;

347 
__u8
 
	m∑d
[3];

	@/usr/include/linux/neighbour.h

1 #i‚de‡
__LINUX_NEIGHBOUR_H


2 
	#__LINUX_NEIGHBOUR_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

7 
	sndmsg
 {

8 
__u8
 
	mndm_Ámûy
;

9 
__u8
 
	mndm_∑d1
;

10 
__u16
 
	mndm_∑d2
;

11 
__s32
 
	mndm_ifödex
;

12 
__u16
 
	mndm_°©e
;

13 
__u8
 
	mndm_Êags
;

14 
__u8
 
	mndm_ty≥
;

18 
	mNDA_UNSPEC
,

19 
	mNDA_DST
,

20 
	mNDA_LLADDR
,

21 
	mNDA_CACHEINFO
,

22 
	mNDA_PROBES
,

23 
	m__NDA_MAX


26 
	#NDA_MAX
 (
__NDA_MAX
 - 1)

	)

32 
	#NTF_USE
 0x01

	)

33 
	#NTF_PROXY
 0x08

	)

34 
	#NTF_ROUTER
 0x80

	)

40 
	#NUD_INCOMPLETE
 0x01

	)

41 
	#NUD_REACHABLE
 0x02

	)

42 
	#NUD_STALE
 0x04

	)

43 
	#NUD_DELAY
 0x08

	)

44 
	#NUD_PROBE
 0x10

	)

45 
	#NUD_FAILED
 0x20

	)

48 
	#NUD_NOARP
 0x40

	)

49 
	#NUD_PERMANENT
 0x80

	)

50 
	#NUD_NONE
 0x00

	)

57 
	snda_ˇcheöfo
 {

58 
__u32
 
	mndm_c⁄fúmed
;

59 
__u32
 
	mndm_u£d
;

60 
__u32
 
	mndm_upd©ed
;

61 
__u32
 
	mndm_ªf˙t
;

89 
	sndt_°©s
 {

90 
__u64
 
	mndts_Ælocs
;

91 
__u64
 
	mndts_de°roys
;

92 
__u64
 
	mndts_hash_grows
;

93 
__u64
 
	mndts_ªs_Áûed
;

94 
__u64
 
	mndts_lookups
;

95 
__u64
 
	mndts_hôs
;

96 
__u64
 
	mndts_rcv_¥obes_mˇ°
;

97 
__u64
 
	mndts_rcv_¥obes_uˇ°
;

98 
__u64
 
	mndts_≥riodic_gc_runs
;

99 
__u64
 
	mndts_f‹˚d_gc_runs
;

103 
	mNDTPA_UNSPEC
,

104 
	mNDTPA_IFINDEX
,

105 
	mNDTPA_REFCNT
,

106 
	mNDTPA_REACHABLE_TIME
,

107 
	mNDTPA_BASE_REACHABLE_TIME
,

108 
	mNDTPA_RETRANS_TIME
,

109 
	mNDTPA_GC_STALETIME
,

110 
	mNDTPA_DELAY_PROBE_TIME
,

111 
	mNDTPA_QUEUE_LEN
,

112 
	mNDTPA_APP_PROBES
,

113 
	mNDTPA_UCAST_PROBES
,

114 
	mNDTPA_MCAST_PROBES
,

115 
	mNDTPA_ANYCAST_DELAY
,

116 
	mNDTPA_PROXY_DELAY
,

117 
	mNDTPA_PROXY_QLEN
,

118 
	mNDTPA_LOCKTIME
,

119 
	m__NDTPA_MAX


121 
	#NDTPA_MAX
 (
__NDTPA_MAX
 - 1)

	)

123 
	sndtmsg
 {

124 
__u8
 
	mndtm_Ámûy
;

125 
__u8
 
	mndtm_∑d1
;

126 
__u16
 
	mndtm_∑d2
;

129 
	sndt_c⁄fig
 {

130 
__u16
 
	mndtc_key_Àn
;

131 
__u16
 
	mndtc_íåy_size
;

132 
__u32
 
	mndtc_íåõs
;

133 
__u32
 
	mndtc_œ°_Êush
;

134 
__u32
 
	mndtc_œ°_ønd
;

135 
__u32
 
	mndtc_hash_∫d
;

136 
__u32
 
	mndtc_hash_mask
;

137 
__u32
 
	mndtc_hash_chaö_gc
;

138 
__u32
 
	mndtc_¥oxy_qÀn
;

142 
	mNDTA_UNSPEC
,

143 
	mNDTA_NAME
,

144 
	mNDTA_THRESH1
,

145 
	mNDTA_THRESH2
,

146 
	mNDTA_THRESH3
,

147 
	mNDTA_CONFIG
,

148 
	mNDTA_PARMS
,

149 
	mNDTA_STATS
,

150 
	mNDTA_GC_INTERVAL
,

151 
	m__NDTA_MAX


153 
	#NDTA_MAX
 (
__NDTA_MAX
 - 1)

	)

	@/usr/include/linux/netlink.h

1 #i‚de‡
__LINUX_NETLINK_H


2 
	#__LINUX_NETLINK_H


	)

4 
	~<löux/sockë.h
>

5 
	~<löux/ty≥s.h
>

7 
	#NETLINK_ROUTE
 0

	)

8 
	#NETLINK_UNUSED
 1

	)

9 
	#NETLINK_USERSOCK
 2

	)

10 
	#NETLINK_FIREWALL
 3

	)

11 
	#NETLINK_INET_DIAG
 4

	)

12 
	#NETLINK_NFLOG
 5

	)

13 
	#NETLINK_XFRM
 6

	)

14 
	#NETLINK_SELINUX
 7

	)

15 
	#NETLINK_ISCSI
 8

	)

16 
	#NETLINK_AUDIT
 9

	)

17 
	#NETLINK_FIB_LOOKUP
 10

	)

18 
	#NETLINK_CONNECTOR
 11

	)

19 
	#NETLINK_NETFILTER
 12

	)

20 
	#NETLINK_IP6_FW
 13

	)

21 
	#NETLINK_DNRTMSG
 14

	)

22 
	#NETLINK_KOBJECT_UEVENT
 15

	)

23 
	#NETLINK_GENERIC
 16

	)

25 
	#NETLINK_SCSITRANSPORT
 18

	)

26 
	#NETLINK_ECRYPTFS
 19

	)

28 
	#MAX_LINKS
 32

	)

30 
	g√t
;

32 
	ssockaddr_∆
 {

33 
ß_Ámûy_t
 
	m∆_Ámûy
;

34 
	m∆_∑d
;

35 
__u32
 
	m∆_pid
;

36 
__u32
 
	m∆_groups
;

39 
	s∆msghdr
 {

40 
__u32
 
	m∆msg_Àn
;

41 
__u16
 
	m∆msg_ty≥
;

42 
__u16
 
	m∆msg_Êags
;

43 
__u32
 
	m∆msg_£q
;

44 
__u32
 
	m∆msg_pid
;

49 
	#NLM_F_REQUEST
 1

	)

50 
	#NLM_F_MULTI
 2

	)

51 
	#NLM_F_ACK
 4

	)

52 
	#NLM_F_ECHO
 8

	)

55 
	#NLM_F_ROOT
 0x100

	)

56 
	#NLM_F_MATCH
 0x200

	)

57 
	#NLM_F_ATOMIC
 0x400

	)

58 
	#NLM_F_DUMP
 (
NLM_F_ROOT
|
NLM_F_MATCH
)

	)

61 
	#NLM_F_REPLACE
 0x100

	)

62 
	#NLM_F_EXCL
 0x200

	)

63 
	#NLM_F_CREATE
 0x400

	)

64 
	#NLM_F_APPEND
 0x800

	)

75 
	#NLMSG_ALIGNTO
 4

	)

76 
	#NLMSG_ALIGN
(
Àn
Ë–(÷í)+
NLMSG_ALIGNTO
-1Ë& ~(NLMSG_ALIGNTO-1Ë)

	)

77 
	#NLMSG_HDRLEN
 ((Ë
	`NLMSG_ALIGN
((
∆msghdr
)))

	)

78 
	#NLMSG_LENGTH
(
Àn
Ë(÷í)+
	`NLMSG_ALIGN
(
NLMSG_HDRLEN
))

	)

79 
	#NLMSG_SPACE
(
Àn
Ë
	`NLMSG_ALIGN
(
	`NLMSG_LENGTH
÷í))

	)

80 
	#NLMSG_DATA
(
∆h
Ë((*)(((*ÍlhË+ 
	`NLMSG_LENGTH
(0)))

	)

81 
	#NLMSG_NEXT
(
∆h
,
Àn
Ë(÷íË-
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
), \

82 (
∆msghdr
*)(((*)(
∆h
)Ë+ 
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
)))

	)

83 
	#NLMSG_OK
(
∆h
,
Àn
Ë(÷íË>()(
∆msghdr
) && \

84 (
∆h
)->
∆msg_Àn
 >(
∆msghdr
) && \

85 (
∆h
)->
∆msg_Àn
 <(
Àn
))

	)

86 
	#NLMSG_PAYLOAD
(
∆h
,
Àn
Ë(“lh)->
∆msg_Àn
 - 
	`NLMSG_SPACE
(÷í)))

	)

88 
	#NLMSG_NOOP
 0x1

	)

89 
	#NLMSG_ERROR
 0x2

	)

90 
	#NLMSG_DONE
 0x3

	)

91 
	#NLMSG_OVERRUN
 0x4

	)

93 
	#NLMSG_MIN_TYPE
 0x10

	)

95 
	s∆msgîr
 {

96 
	mîr‹
;

97 
∆msghdr
 
	mmsg
;

100 
	#NETLINK_ADD_MEMBERSHIP
 1

	)

101 
	#NETLINK_DROP_MEMBERSHIP
 2

	)

102 
	#NETLINK_PKTINFO
 3

	)

103 
	#NETLINK_BROADCAST_ERROR
 4

	)

104 
	#NETLINK_NO_ENOBUFS
 5

	)

106 
	s∆_pktöfo
 {

107 
__u32
 
	mgroup
;

110 
	#NET_MAJOR
 36

	)

113 
	mNETLINK_UNCONNECTED
 = 0,

114 
	mNETLINK_CONNECTED
,

126 
	s∆©å
 {

127 
__u16
 
	m∆a_Àn
;

128 
__u16
 
	m∆a_ty≥
;

141 
	#NLA_F_NESTED
 (1 << 15)

	)

142 
	#NLA_F_NET_BYTEORDER
 (1 << 14)

	)

143 
	#NLA_TYPE_MASK
 ~(
NLA_F_NESTED
 | 
NLA_F_NET_BYTEORDER
)

	)

145 
	#NLA_ALIGNTO
 4

	)

146 
	#NLA_ALIGN
(
Àn
Ë((÷íË+ 
NLA_ALIGNTO
 - 1Ë& ~(NLA_ALIGNTO - 1))

	)

147 
	#NLA_HDRLEN
 ((Ë
	`NLA_ALIGN
((
∆©å
)))

	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__NFDBITS


22 
	#__NFDBITS
 (8 * ())

	)

24 #unde‡
__FD_SETSIZE


25 
	#__FD_SETSIZE
 1024

	)

27 #unde‡
__FDSET_LONGS


28 
	#__FDSET_LONGS
 (
__FD_SETSIZE
/
__NFDBITS
)

	)

30 #unde‡
__FDELT


31 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

33 #unde‡
__FDMASK


34 
	#__FDMASK
(
d
Ë(1UL << ((dË% 
__NFDBITS
))

	)

37 
	mfds_bôs
 [
__FDSET_LONGS
];

38 } 
	t__kî√l_fd_£t
;

41 (*
	t__kî√l_sigh™dÀr_t
)();

44 
	t__kî√l_key_t
;

45 
	t__kî√l_mqd_t
;

47 
	~<asm/posix_ty≥s.h
>

	@/usr/include/netinet/in.h

20 #i‚def 
_NETINET_IN_H


21 
	#_NETINET_IN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<°döt.h
>

25 
	~<sys/sockë.h
>

26 
	~<bôs/ty≥s.h
>

29 
__BEGIN_DECLS


34 
	mIPPROTO_IP
 = 0,

35 
	#IPPROTO_IP
 
IPPROTO_IP


	)

36 
	mIPPROTO_HOPOPTS
 = 0,

37 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

38 
	mIPPROTO_ICMP
 = 1,

39 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

40 
	mIPPROTO_IGMP
 = 2,

41 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

42 
	mIPPROTO_IPIP
 = 4,

43 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

44 
	mIPPROTO_TCP
 = 6,

45 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

46 
	mIPPROTO_EGP
 = 8,

47 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

48 
	mIPPROTO_PUP
 = 12,

49 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

50 
	mIPPROTO_UDP
 = 17,

51 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

52 
	mIPPROTO_IDP
 = 22,

53 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

54 
	mIPPROTO_TP
 = 29,

55 
	#IPPROTO_TP
 
IPPROTO_TP


	)

56 
	mIPPROTO_DCCP
 = 33,

57 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

58 
	mIPPROTO_IPV6
 = 41,

59 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

60 
	mIPPROTO_ROUTING
 = 43,

61 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

62 
	mIPPROTO_FRAGMENT
 = 44,

63 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

64 
	mIPPROTO_RSVP
 = 46,

65 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

66 
	mIPPROTO_GRE
 = 47,

67 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

68 
	mIPPROTO_ESP
 = 50,

69 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

70 
	mIPPROTO_AH
 = 51,

71 
	#IPPROTO_AH
 
IPPROTO_AH


	)

72 
	mIPPROTO_ICMPV6
 = 58,

73 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

74 
	mIPPROTO_NONE
 = 59,

75 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

76 
	mIPPROTO_DSTOPTS
 = 60,

77 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

78 
	mIPPROTO_MTP
 = 92,

79 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

80 
	mIPPROTO_ENCAP
 = 98,

81 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

82 
	mIPPROTO_PIM
 = 103,

83 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

84 
	mIPPROTO_COMP
 = 108,

85 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

86 
	mIPPROTO_SCTP
 = 132,

87 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

88 
	mIPPROTO_UDPLITE
 = 136,

89 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

90 
	mIPPROTO_RAW
 = 255,

91 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

92 
	mIPPROTO_MAX


97 
uöt16_t
 
	tö_p‹t_t
;

102 
	mIPPORT_ECHO
 = 7,

103 
	mIPPORT_DISCARD
 = 9,

104 
	mIPPORT_SYSTAT
 = 11,

105 
	mIPPORT_DAYTIME
 = 13,

106 
	mIPPORT_NETSTAT
 = 15,

107 
	mIPPORT_FTP
 = 21,

108 
	mIPPORT_TELNET
 = 23,

109 
	mIPPORT_SMTP
 = 25,

110 
	mIPPORT_TIMESERVER
 = 37,

111 
	mIPPORT_NAMESERVER
 = 42,

112 
	mIPPORT_WHOIS
 = 43,

113 
	mIPPORT_MTP
 = 57,

115 
	mIPPORT_TFTP
 = 69,

116 
	mIPPORT_RJE
 = 77,

117 
	mIPPORT_FINGER
 = 79,

118 
	mIPPORT_TTYLINK
 = 87,

119 
	mIPPORT_SUPDUP
 = 95,

122 
	mIPPORT_EXECSERVER
 = 512,

123 
	mIPPORT_LOGINSERVER
 = 513,

124 
	mIPPORT_CMDSERVER
 = 514,

125 
	mIPPORT_EFSSERVER
 = 520,

128 
	mIPPORT_BIFFUDP
 = 512,

129 
	mIPPORT_WHOSERVER
 = 513,

130 
	mIPPORT_ROUTESERVER
 = 520,

133 
	mIPPORT_RESERVED
 = 1024,

136 
	mIPPORT_USERRESERVED
 = 5000

141 
uöt32_t
 
	tö_addr_t
;

142 
	sö_addr


144 
ö_addr_t
 
	ms_addr
;

153 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

154 
	#IN_CLASSA_NET
 0xff000000

	)

155 
	#IN_CLASSA_NSHIFT
 24

	)

156 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

157 
	#IN_CLASSA_MAX
 128

	)

159 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

160 
	#IN_CLASSB_NET
 0xffff0000

	)

161 
	#IN_CLASSB_NSHIFT
 16

	)

162 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

163 
	#IN_CLASSB_MAX
 65536

	)

165 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

166 
	#IN_CLASSC_NET
 0xffffff00

	)

167 
	#IN_CLASSC_NSHIFT
 8

	)

168 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

170 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

171 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

173 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

174 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

177 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

179 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

181 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

184 
	#IN_LOOPBACKNET
 127

	)

186 #i‚de‡
INADDR_LOOPBACK


187 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

191 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

192 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

193 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

194 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

198 
	sö6_addr


202 
uöt8_t
 
	m__u6_addr8
[16];

203 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


204 
uöt16_t
 
	m__u6_addr16
[8];

205 
uöt32_t
 
	m__u6_addr32
[4];

207 } 
	m__ö6_u
;

208 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

209 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


210 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

211 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

215 c⁄° 
ö6_addr
 
ö6addr_™y
;

216 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

217 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

218 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

220 
	#INET_ADDRSTRLEN
 16

	)

221 
	#INET6_ADDRSTRLEN
 46

	)

225 
	ssockaddr_ö


227 
__SOCKADDR_COMMON
 (
sö_
);

228 
ö_p‹t_t
 
	msö_p‹t
;

229 
ö_addr
 
	msö_addr
;

232 
	msö_zîo
[ (
sockaddr
) -

233 
__SOCKADDR_COMMON_SIZE
 -

234  (
ö_p‹t_t
) -

235  (
ö_addr
)];

239 
	ssockaddr_ö6


241 
__SOCKADDR_COMMON
 (
sö6_
);

242 
ö_p‹t_t
 
	msö6_p‹t
;

243 
uöt32_t
 
	msö6_Êowöfo
;

244 
ö6_addr
 
	msö6_addr
;

245 
uöt32_t
 
	msö6_sc›e_id
;

249 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


251 
	sù_mªq


254 
ö_addr
 
	mimr_mu…üddr
;

257 
ö_addr
 
	mimr_öãrÁ˚
;

260 
	sù_mªq_sour˚


263 
ö_addr
 
	mimr_mu…üddr
;

266 
ö_addr
 
	mimr_öãrÁ˚
;

269 
ö_addr
 
	mimr_sour˚addr
;

275 
	sùv6_mªq


278 
ö6_addr
 
	mùv6mr_mu…üddr
;

281 
	mùv6mr_öãrÁ˚
;

285 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


287 
	sgroup_ªq


290 
uöt32_t
 
	mgr_öãrÁ˚
;

293 
sockaddr_°‹age
 
	mgr_group
;

296 
	sgroup_sour˚_ªq


299 
uöt32_t
 
	mg§_öãrÁ˚
;

302 
sockaddr_°‹age
 
	mg§_group
;

305 
sockaddr_°‹age
 
	mg§_sour˚
;

310 
	sù_msfûãr


313 
ö_addr
 
	mimsf_mu…üddr
;

316 
ö_addr
 
	mimsf_öãrÁ˚
;

319 
uöt32_t
 
	mimsf_fmode
;

322 
uöt32_t
 
	mimsf_num§c
;

324 
ö_addr
 
	mimsf_¶i°
[1];

327 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

328 -  (
ö_addr
) \

329 + (
num§c
Ë*  (
ö_addr
))

	)

331 
	sgroup_fûãr


334 
uöt32_t
 
	mgf_öãrÁ˚
;

337 
sockaddr_°‹age
 
	mgf_group
;

340 
uöt32_t
 
	mgf_fmode
;

343 
uöt32_t
 
	mgf_num§c
;

345 
sockaddr_°‹age
 
	mgf_¶i°
[1];

348 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

349 -  (
sockaddr_°‹age
) \

350 + ((
num§c
) \

351 *  (
sockaddr_°‹age
)))

	)

356 
	~<bôs/ö.h
>

365 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

366 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

367 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

368 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

369 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

370 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

371 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

373 
	~<ídün.h
>

376 
	~<bôs/byãsw≠.h
>

378 #ifde‡
__OPTIMIZE__


382 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


385 
	#¡ohl
(
x
Ë(x)

	)

386 
	#¡ohs
(
x
Ë(x)

	)

387 
	#ht⁄l
(
x
Ë(x)

	)

388 
	#ht⁄s
(
x
Ë(x)

	)

390 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


391 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

392 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

393 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

394 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

399 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

400 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

401 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

402 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

403 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =0)

	)

405 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

406 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

407 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

408 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

409 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

411 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((
__c⁄°
 
uöt8_t
 *Ë◊))[0] =0xff)

	)

413 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

414 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

415 =
	`ht⁄l
 (0x„800000))

	)

417 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

418 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

419 =
	`ht⁄l
 (0x„c00000))

	)

421 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

422 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

423 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

424 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

426 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

427 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

428 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

429 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0) \

430 && (
	`¡ohl
 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

432 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

433 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] =((__c⁄° uöt32_à*Ë(
b
))[0]) \

434 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] =((__c⁄° uöt32_à*Ë(
b
))[1]) \

435 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =((__c⁄° uöt32_à*Ë(
b
))[2]) \

436 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =((__c⁄° uöt32_à*Ë(
b
))[3]))

	)

438 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


440 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

443 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

444 
__THROW
;

448 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

449 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

450 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

452 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

453 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

454 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

456 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

457 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

458 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

460 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

461 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

462 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

464 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

465 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

466 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

469 #ifde‡
__USE_GNU


471 
	sö6_pktöfo


473 
ö6_addr
 
ùi6_addr
;

474 
ùi6_ifödex
;

478 
	sù6_mtuöfo


480 
sockaddr_ö6
 
ù6m_addr
;

481 
uöt32_t
 
ù6m_mtu
;

486 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

487 
__THROW
 
__©åibuã_dïªˇãd__
;

488 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

489 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

490 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

491 
__c⁄°
 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

492 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

493 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

494 
__mu…x
, 
__∂usy
)

495 
__THROW
 
__©åibuã_dïªˇãd__
;

496 
	$öë6_›ti⁄_√xt
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

497 
uöt8_t
 **
__çåp
)

498 
__THROW
 
__©åibuã_dïªˇãd__
;

499 
	$öë6_›ti⁄_föd
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

500 
uöt8_t
 **
__çåp
, 
__ty≥
)

501 
__THROW
 
__©åibuã_dïªˇãd__
;

505 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

506 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

507 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

508 **
__d©abuÂ
Ë
__THROW
;

509 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

510 
__THROW
;

511 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

512 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

513 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

514 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

515 **
__d©abuÂ
Ë
__THROW
;

516 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

517 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

518 **
__d©abuÂ
Ë
__THROW
;

519 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

520 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

524 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

525 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

526 
__£gmíts
Ë
__THROW
;

527 
	$öë6_πh_add
 (*
__bp
, 
__c⁄°
 
ö6_addr
 *
__addr
Ë
__THROW
;

528 
	$öë6_πh_ªvî£
 (
__c⁄°
 *
__ö
, *
__out
Ë
__THROW
;

529 
	$öë6_πh_£gmíts
 (
__c⁄°
 *
__bp
Ë
__THROW
;

530 
ö6_addr
 *
	$öë6_πh_gëaddr
 (
__c⁄°
 *
__bp
, 
__ödex
)

531 
__THROW
;

537 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

538 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

539 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

540 
__THROW
;

543 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

544 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

545 
uöt32_t
 
__num§c
,

546 
__c⁄°
 
ö_addr
 *
__¶i°
)

547 
__THROW
;

551 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

552 
__c⁄°
 
sockaddr
 *
__group
,

553 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

554 
uöt32_t
 *
__num§c
,

555 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

558 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

559 
__c⁄°
 
sockaddr
 *
__group
,

560 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

561 
uöt32_t
 
__num§c
,

562 
__c⁄°
 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

565 
__END_DECLS


	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (
__c⁄°
 *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (
__c⁄°
 *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


46 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

47 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

48 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

50 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

51 
	#__THROW
 
	`throw
 ()

	)

52 
	#__NTH
(
f˘
Ëf˘ 
	`throw
 ()

	)

54 
	#__THROW


	)

55 
	#__NTH
(
f˘
Ë
	)
fct

61 
	#__ölöe


	)

63 
	#__THROW


	)

64 
	#__NTH
(
f˘
Ë
	)
fct

66 
	#__c⁄°
 c⁄°

	)

67 
	#__sig√d
 sig√d

	)

68 
	#__vﬁ©ûe
 vﬁ©ûe

	)

74 
	#__P
(
¨gs
Ë
	)
args

75 
	#__PMT
(
¨gs
Ë
	)
args

80 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

81 
	#__STRING
(
x
Ë#x

	)

84 
	#__±r_t
 *

	)

85 
	#__l⁄g_doubÀ_t
 

	)

89 #ifdef 
__˝lu•lus


90 
	#__BEGIN_DECLS
 "C" {

	)

91 
	#__END_DECLS
 }

	)

93 
	#__BEGIN_DECLS


	)

94 
	#__END_DECLS


	)

103 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


104 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

105 
	#__END_NAMESPACE_STD
 }

	)

106 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

107 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

108 
	#__END_NAMESPACE_C99
 }

	)

109 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

114 
	#__BEGIN_NAMESPACE_STD


	)

115 
	#__END_NAMESPACE_STD


	)

116 
	#__USING_NAMESPACE_STD
(
«me
)

	)

117 
	#__BEGIN_NAMESPACE_C99


	)

118 
	#__END_NAMESPACE_C99


	)

119 
	#__USING_NAMESPACE_C99
(
«me
)

	)

124 #i‚de‡
__BOUNDED_POINTERS__


125 
	#__bounded


	)

126 
	#__unbounded


	)

127 
	#__±rvÆue


	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3)

136 
	#__w¨nde˛
(
«me
, 
msg
) \

137 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

138 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

139 
	#__îr‹de˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

142 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

143 
	#__w¨«âr
(
msg
)

	)

144 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

148 #i‡
__GNUC_PREREQ
 (2,97)

150 
	#__Êex¨r
 []

	)

152 #ifde‡
__GNUC__


153 
	#__Êex¨r
 [0]

	)

155 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

156 
	#__Êex¨r
 []

	)

159 
	#__Êex¨r
 [1]

	)

175 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

177 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

178 #ifde‡
__˝lu•lus


179 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

180 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

182 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

185 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

186 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

199 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

200 
	#__©åibuã__
(
xyz
Ë

	)

206 #i‡
__GNUC_PREREQ
 (2,96)

207 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

209 
	#__©åibuã_mÆloc__


	)

215 #i‡
__GNUC_PREREQ
 (2,96)

216 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

218 
	#__©åibuã_puª__


	)

224 #i‡
__GNUC_PREREQ
 (3,1)

225 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

226 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

228 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

229 
	#__©åibuã_noölöe__


	)

233 #i‡
__GNUC_PREREQ
 (3,2)

234 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

236 
	#__©åibuã_dïªˇãd__


	)

245 #i‡
__GNUC_PREREQ
 (2,8)

246 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

248 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

255 #i‡
__GNUC_PREREQ
 (2,97)

256 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

257 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

259 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

264 #i‡
__GNUC_PREREQ
 (3,3)

265 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

267 
	#__n⁄nuŒ
(
∑øms
)

	)

272 #i‡
__GNUC_PREREQ
 (3,4)

273 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

274 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

275 #i‡
__USE_FORTIFY_LEVEL
 > 0

276 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

279 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

281 #i‚de‡
__wur


282 
	#__wur


	)

286 #i‡
__GNUC_PREREQ
 (3,2)

287 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

289 
	#__Æways_ölöe
 
__ölöe


	)

294 #i‡!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3)

295 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


296 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

297 #i‡
__GNUC_PREREQ
 (4,3)

298 
	#__exã∫_Æways_ölöe
 \

299 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
, 
__¨tificül__
))

	)

301 
	#__exã∫_Æways_ölöe
 \

302 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

305 
	#__exã∫_ölöe
 
__ölöe


	)

306 #i‡
__GNUC_PREREQ
 (4,3)

307 
	#__exã∫_Æways_ölöe
 \

308 
__Æways_ölöe
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

310 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

317 #i‡
__GNUC_PREREQ
 (4,3)

318 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

319 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

326 #i‡!
__GNUC_PREREQ
 (2,8)

327 
	#__exãnsi⁄__


	)

331 #i‡!
__GNUC_PREREQ
 (2,92)

332 
	#__ª°ri˘


	)

338 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


339 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

341 #ifde‡
__GNUC__


342 
	#__ª°ri˘_¨r


	)

344 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

345 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

348 
	#__ª°ri˘_¨r


	)

353 
	~<bôs/w‹dsize.h
>

355 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


356 
	#__LDBL_COMPAT
 1

	)

357 #ifde‡
__REDIRECT


358 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

359 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

360 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

361 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

362 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

363 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

364 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

365 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

366 
	#__LDBL_REDIR_DECL
(
«me
) \

367 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

368 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

369 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

370 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

371 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

374 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


375 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

376 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

377 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

378 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

379 
	#__LDBL_REDIR_DECL
(
«me
)

	)

380 #ifde‡
__REDIRECT


381 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

382 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

383 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/sys/resource.h

19 #i‚def 
_SYS_RESOURCE_H


20 
	#_SYS_RESOURCE_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ªsour˚.h
>

27 #i‚de‡
__id_t_deföed


28 
__id_t
 
	tid_t
;

29 
	#__id_t_deföed


	)

32 
	g__BEGIN_DECLS


38 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


39 
__æimô_ªsour˚
 
	t__æimô_ªsour˚_t
;

40 
__rußge_who
 
	t__rußge_who_t
;

41 
__¥i‹ôy_which
 
	t__¥i‹ôy_which_t
;

43 
	t__æimô_ªsour˚_t
;

44 
	t__rußge_who_t
;

45 
	t__¥i‹ôy_which_t
;

50 #i‚de‡
__USE_FILE_OFFSET64


51 
	$gëæimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

52 
æimô
 *
__æimôs
Ë
__THROW
;

54 #ifde‡
__REDIRECT_NTH


55 
	`__REDIRECT_NTH
 (
gëæimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

56 
æimô
 *
__æimôs
), 
gëæimô64
);

58 
	#gëæimô
 
gëæimô64


	)

61 #ifde‡
__USE_LARGEFILE64


62 
	$gëæimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

63 
æimô64
 *
__æimôs
Ë
__THROW
;

69 #i‚de‡
__USE_FILE_OFFSET64


70 
	$£ålimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

71 
__c⁄°
 
æimô
 *
__æimôs
Ë
__THROW
;

73 #ifde‡
__REDIRECT_NTH


74 
	`__REDIRECT_NTH
 (
£ålimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

75 
__c⁄°
 
æimô
 *
__æimôs
),

76 
£ålimô64
);

78 
	#£ålimô
 
£ålimô64


	)

81 #ifde‡
__USE_LARGEFILE64


82 
	$£ålimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

83 
__c⁄°
 
æimô64
 *
__æimôs
Ë
__THROW
;

88 
	$gërußge
 (
__rußge_who_t
 
__who
, 
rußge
 *
__ußge
Ë
__THROW
;

94 
	$gë¥i‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
Ë
__THROW
;

98 
	$£çri‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
, 
__¥io
)

99 
__THROW
;

101 
__END_DECLS


	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


59 #unde‡
__FDELT


60 #unde‡
__FDMASK


62 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

63 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

64 
	#__FDMASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

71 #ifde‡
__USE_XOPEN


72 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

75 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

76 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

78 } 
	tfd_£t
;

81 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

83 #ifde‡
__USE_MISC


85 
__fd_mask
 
	tfd_mask
;

88 
	#NFDBITS
 
__NFDBITS


	)

93 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

94 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

95 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

96 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

99 
__BEGIN_DECLS


109 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

110 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

111 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

112 
timevÆ
 *
__ª°ri˘
 
__timeout
);

114 #ifde‡
__USE_XOPEN2K


121 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

122 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

123 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

124 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

125 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

128 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

21 #i‚de‡
_SYS_SYSMACROS_H


22 
	#_SYS_SYSMACROS_H
 1

	)

24 
	~<„©uªs.h
>

29 #ifde‡
__GLIBC_HAVE_LONG_LONG


30 
__exãnsi⁄__


31 
	$gnu_dev_maj‹
 (
__dev
)

32 
__THROW
;

33 
__exãnsi⁄__


34 
	$gnu_dev_mö‹
 (
__dev
)

35 
__THROW
;

36 
__exãnsi⁄__


37 
	$gnu_dev_makedev
 (
__maj‹
,

38 
__mö‹
)

39 
__THROW
;

41 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


42 
__exãnsi⁄__
 
__exã∫_ölöe
 

43 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

45  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

46 
	}
}

48 
__exãnsi⁄__
 
__exã∫_ölöe
 

49 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

51  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

52 
	}
}

54 
__exãnsi⁄__
 
__exã∫_ölöe
 

55 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

57  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

58 | (((Ë(
__mö‹
 & ~0xff)) << 12)

59 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

60 
	}
}

65 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

66 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

67 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ttydefaults.h

40 #i‚de‡
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
Ë(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifde‡
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifde‡
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifde‡
TTYDEFCHARS


94 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #unde‡
TTYDEFCHARS


	@/usr/include/sys/ucontext.h

19 #i‚de‡
_SYS_UCONTEXT_H


20 
	#_SYS_UCONTEXT_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sig«l.h
>

24 
	~<bôs/w‹dsize.h
>

28 
	~<bôs/sigc⁄ãxt.h
>

30 #i‡
__WORDSIZE
 == 64

33 
	tgªg_t
;

36 
	#NGREG
 23

	)

39 
gªg_t
 
	tgªg£t_t
[
NGREG
];

41 #ifde‡
__USE_GNU


45 
	mREG_R8
 = 0,

46 
	#REG_R8
 
REG_R8


	)

47 
	mREG_R9
,

48 
	#REG_R9
 
REG_R9


	)

49 
	mREG_R10
,

50 
	#REG_R10
 
REG_R10


	)

51 
	mREG_R11
,

52 
	#REG_R11
 
REG_R11


	)

53 
	mREG_R12
,

54 
	#REG_R12
 
REG_R12


	)

55 
	mREG_R13
,

56 
	#REG_R13
 
REG_R13


	)

57 
	mREG_R14
,

58 
	#REG_R14
 
REG_R14


	)

59 
	mREG_R15
,

60 
	#REG_R15
 
REG_R15


	)

61 
	mREG_RDI
,

62 
	#REG_RDI
 
REG_RDI


	)

63 
	mREG_RSI
,

64 
	#REG_RSI
 
REG_RSI


	)

65 
	mREG_RBP
,

66 
	#REG_RBP
 
REG_RBP


	)

67 
	mREG_RBX
,

68 
	#REG_RBX
 
REG_RBX


	)

69 
	mREG_RDX
,

70 
	#REG_RDX
 
REG_RDX


	)

71 
	mREG_RAX
,

72 
	#REG_RAX
 
REG_RAX


	)

73 
	mREG_RCX
,

74 
	#REG_RCX
 
REG_RCX


	)

75 
	mREG_RSP
,

76 
	#REG_RSP
 
REG_RSP


	)

77 
	mREG_RIP
,

78 
	#REG_RIP
 
REG_RIP


	)

79 
	mREG_EFL
,

80 
	#REG_EFL
 
REG_EFL


	)

81 
	mREG_CSGSFS
,

82 
	#REG_CSGSFS
 
REG_CSGSFS


	)

83 
	mREG_ERR
,

84 
	#REG_ERR
 
REG_ERR


	)

85 
	mREG_TRAPNO
,

86 
	#REG_TRAPNO
 
REG_TRAPNO


	)

87 
	mREG_OLDMASK
,

88 
	#REG_OLDMASK
 
REG_OLDMASK


	)

89 
	mREG_CR2


90 
	#REG_CR2
 
REG_CR2


	)

94 
	s_libc_Âxªg


96 
	msignifiˇnd
[4];

97 
	mexp⁄ít
;

98 
	m∑ddög
[3];

101 
	s_libc_xmmªg


103 
__uöt32_t
 
	mñemít
[4];

106 
	s_libc_Â°©e


109 
__uöt16_t
 
	mcwd
;

110 
__uöt16_t
 
	mswd
;

111 
__uöt16_t
 
	m·w
;

112 
__uöt16_t
 
	mf›
;

113 
__uöt64_t
 
	mrù
;

114 
__uöt64_t
 
	mrdp
;

115 
__uöt32_t
 
	mmxc§
;

116 
__uöt32_t
 
	mmx¸_mask
;

117 
_libc_Âxªg
 
	m_°
[8];

118 
_libc_xmmªg
 
	m_xmm
[16];

119 
__uöt32_t
 
	m∑ddög
[24];

123 
_libc_Â°©e
 *
	tÂªg£t_t
;

128 
gªg£t_t
 
	mgªgs
;

130 
Âªg£t_t
 
	mÂªgs
;

131 
	m__ª£rved1
 [8];

132 } 
	tmc⁄ãxt_t
;

135 
	suc⁄ãxt


137 
	muc_Êags
;

138 
uc⁄ãxt
 *
	muc_lök
;

139 
°ack_t
 
	muc_°ack
;

140 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

141 
__sig£t_t
 
	muc_sigmask
;

142 
_libc_Â°©e
 
	m__Âªgs_mem
;

143 } 
	tuc⁄ãxt_t
;

148 
	tgªg_t
;

151 
	#NGREG
 19

	)

154 
gªg_t
 
	tgªg£t_t
[
NGREG
];

156 #ifde‡
__USE_GNU


160 
	mREG_GS
 = 0,

161 
	#REG_GS
 
REG_GS


	)

162 
	mREG_FS
,

163 
	#REG_FS
 
REG_FS


	)

164 
	mREG_ES
,

165 
	#REG_ES
 
REG_ES


	)

166 
	mREG_DS
,

167 
	#REG_DS
 
REG_DS


	)

168 
	mREG_EDI
,

169 
	#REG_EDI
 
REG_EDI


	)

170 
	mREG_ESI
,

171 
	#REG_ESI
 
REG_ESI


	)

172 
	mREG_EBP
,

173 
	#REG_EBP
 
REG_EBP


	)

174 
	mREG_ESP
,

175 
	#REG_ESP
 
REG_ESP


	)

176 
	mREG_EBX
,

177 
	#REG_EBX
 
REG_EBX


	)

178 
	mREG_EDX
,

179 
	#REG_EDX
 
REG_EDX


	)

180 
	mREG_ECX
,

181 
	#REG_ECX
 
REG_ECX


	)

182 
	mREG_EAX
,

183 
	#REG_EAX
 
REG_EAX


	)

184 
	mREG_TRAPNO
,

185 
	#REG_TRAPNO
 
REG_TRAPNO


	)

186 
	mREG_ERR
,

187 
	#REG_ERR
 
REG_ERR


	)

188 
	mREG_EIP
,

189 
	#REG_EIP
 
REG_EIP


	)

190 
	mREG_CS
,

191 
	#REG_CS
 
REG_CS


	)

192 
	mREG_EFL
,

193 
	#REG_EFL
 
REG_EFL


	)

194 
	mREG_UESP
,

195 
	#REG_UESP
 
REG_UESP


	)

196 
	mREG_SS


197 
	#REG_SS
 
REG_SS


	)

202 
	s_libc_Âªg


204 
	msignifiˇnd
[4];

205 
	mexp⁄ít
;

208 
	s_libc_Â°©e


210 
	mcw
;

211 
	msw
;

212 
	mèg
;

213 
	mùoff
;

214 
	mcs£l
;

215 
	md©aoff
;

216 
	md©a£l
;

217 
_libc_Âªg
 
	m_°
[8];

218 
	m°©us
;

222 
_libc_Â°©e
 *
	tÂªg£t_t
;

227 
gªg£t_t
 
	mgªgs
;

230 
Âªg£t_t
 
	mÂªgs
;

231 
	mﬁdmask
;

232 
	m¸2
;

233 } 
	tmc⁄ãxt_t
;

236 
	suc⁄ãxt


238 
	muc_Êags
;

239 
uc⁄ãxt
 *
	muc_lök
;

240 
°ack_t
 
	muc_°ack
;

241 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

242 
__sig£t_t
 
	muc_sigmask
;

243 
_libc_Â°©e
 
	m__Âªgs_mem
;

244 } 
	tuc⁄ãxt_t
;

	@/usr/include/sys/uio.h

19 #i‚de‡
_SYS_UIO_H


20 
	#_SYS_UIO_H
 1

	)

22 
	~<„©uªs.h
>

24 
	~<sys/ty≥s.h
>

26 
	g__BEGIN_DECLS


29 
	~<bôs/uio.h
>

40 
ssize_t
 
	$ªadv
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
)

41 
__wur
;

51 
ssize_t
 
	$wrôev
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
)

52 
__wur
;

55 #ifde‡
__USE_BSD


56 #i‚de‡
__USE_FILE_OFFSET64


66 
ssize_t
 
	$¥ódv
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

67 
__off_t
 
__off£t
Ë
__wur
;

78 
ssize_t
 
	$pwrôev
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

79 
__off_t
 
__off£t
Ë
__wur
;

81 #ifde‡
__REDIRECT


82 
ssize_t
 
	`__REDIRECT
 (
¥ódv
, (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
,

83 
__cou¡
, 
__off64_t
 
__off£t
),

84 
¥ódv64
Ë
__wur
;

85 
ssize_t
 
	`__REDIRECT
 (
pwrôev
, (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
,

86 
__cou¡
, 
__off64_t
 
__off£t
),

87 
pwrôev64
Ë
__wur
;

89 
	#¥ódv
 
¥ódv64


	)

90 
	#pwrôev
 
pwrôev64


	)

94 #ifde‡
__USE_LARGEFILE64


104 
ssize_t
 
	$¥ódv64
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

105 
__off64_t
 
__off£t
Ë
__wur
;

116 
ssize_t
 
	$pwrôev64
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

117 
__off64_t
 
__off£t
Ë
__wur
;

121 
__END_DECLS


	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/asm-generic/sockios.h

1 #i‚de‡
__ASM_GENERIC_SOCKIOS_H


2 
	#__ASM_GENERIC_SOCKIOS_H


	)

5 
	#FIOSETOWN
 0x8901

	)

6 
	#SIOCSPGRP
 0x8902

	)

7 
	#FIOGETOWN
 0x8903

	)

8 
	#SIOCGPGRP
 0x8904

	)

9 
	#SIOCATMARK
 0x8905

	)

10 
	#SIOCGSTAMP
 0x8906

	)

11 
	#SIOCGSTAMPNS
 0x8907

	)

	@/usr/include/asm-generic/types.h

1 #i‚de‡
_ASM_GENERIC_TYPES_H


2 
	#_ASM_GENERIC_TYPES_H


	)

7 
	~<asm-gíîic/öt-Œ64.h
>

9 #i‚de‡
__ASSEMBLY__


11 
	tumode_t
;

	@/usr/include/asm/ioctls.h

1 
	~<asm-gíîic/io˘ls.h
>

	@/usr/include/asm/posix_types.h

1 #ifde‡
__i386__


2 
	~"posix_ty≥s_32.h
"

4 
	~"posix_ty≥s_64.h
"

	@/usr/include/asm/socket.h

1 
	~<asm-gíîic/sockë.h
>

	@/usr/include/bits/byteswap.h

21 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


25 #i‚de‡
_BITS_BYTESWAP_H


26 
	#_BITS_BYTESWAP_H
 1

	)

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8))

	)

34 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

35 
	#__bsw≠_16
(
x
) \

36 (
__exãnsi⁄__
 \

37 ({ 
__v
, 
__x
 = (
x
); \

38 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

39 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

41 
	`__asm__
 ("rorw $8, %w0" \

42 : "Ù" (
__v
) \

43 : "0" (
__x
) \

45 
__v
; }))

	)

48 
	#__bsw≠_16
(
x
) \

49 (
__exãnsi⁄__
 \

50 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_16
 (__x); }))

	)

55 
	#__bsw≠_c⁄°™t_32
(
x
) \

56 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

57 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

59 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

60 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

61 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

62 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

63 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

64 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

65 || 
deföed
 
	g__amdÁm10__
)

68 
	#__bsw≠_32
(
x
) \

69 (
__exãnsi⁄__
 \

70 ({ 
__v
, 
__x
 = (
x
); \

71 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

72 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

74 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

75 
__v
; }))

	)

77 
	#__bsw≠_32
(
x
) \

78 (
__exãnsi⁄__
 \

79 ({ 
__v
, 
__x
 = (
x
); \

80 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

81 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

83 
	`__asm__
 ("rorw $8, %w0;" \

86 : "Ù" (
__v
) \

87 : "0" (
__x
) \

89 
__v
; }))

	)

92 
	#__bsw≠_32
(
x
) \

93 (
__exãnsi⁄__
 \

94 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

98 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

100 
	#__bsw≠_c⁄°™t_64
(
x
) \

101 ((((
x
) & 0xff00000000000000ull) >> 56) \

102 | (((
x
) & 0x00ff000000000000ull) >> 40) \

103 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

104 | (((
x
) & 0x000000ff00000000ull) >> 8) \

105 | (((
x
) & 0x00000000ff000000ull) << 8) \

106 | (((
x
) & 0x0000000000ff0000ull) << 24) \

107 | (((
x
) & 0x000000000000ff00ull) << 40) \

108 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

110 #i‡
__WORDSIZE
 == 64

111 
	#__bsw≠_64
(
x
) \

112 (
__exãnsi⁄__
 \

113 ({ 
__v
, 
__x
 = (
x
); \

114 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

115 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

117 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

118 
__v
; }))

	)

120 
	#__bsw≠_64
(
x
) \

121 (
__exãnsi⁄__
 \

122 ({ uni⁄ { 
__exãnsi⁄__
 
__Œ
; \

123 
__l
[2]; } 
__w
, 
__r
; \

124 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

125 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

128 
__w
.
__Œ
 = (
x
); \

129 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

130 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

132 
__r
.
__Œ
; }))

	)

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/in.h

21 #i‚de‡
_NETINET_IN_H


28 
	#IP_OPTIONS
 4

	)

29 
	#IP_HDRINCL
 3

	)

30 
	#IP_TOS
 1

	)

31 
	#IP_TTL
 2

	)

32 
	#IP_RECVOPTS
 6

	)

34 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

35 
	#IP_RETOPTS
 7

	)

36 
	#IP_MULTICAST_IF
 32

	)

37 
	#IP_MULTICAST_TTL
 33

	)

38 
	#IP_MULTICAST_LOOP
 34

	)

39 
	#IP_ADD_MEMBERSHIP
 35

	)

40 
	#IP_DROP_MEMBERSHIP
 36

	)

41 
	#IP_UNBLOCK_SOURCE
 37

	)

42 
	#IP_BLOCK_SOURCE
 38

	)

43 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

44 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

45 
	#IP_MSFILTER
 41

	)

46 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


47 
	#MCAST_JOIN_GROUP
 42

	)

48 
	#MCAST_BLOCK_SOURCE
 43

	)

49 
	#MCAST_UNBLOCK_SOURCE
 44

	)

50 
	#MCAST_LEAVE_GROUP
 45

	)

51 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

52 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

53 
	#MCAST_MSFILTER
 48

	)

55 
	#MCAST_EXCLUDE
 0

	)

56 
	#MCAST_INCLUDE
 1

	)

59 
	#IP_ROUTER_ALERT
 5

	)

60 
	#IP_PKTINFO
 8

	)

61 
	#IP_PKTOPTIONS
 9

	)

62 
	#IP_PMTUDISC
 10

	)

63 
	#IP_MTU_DISCOVER
 10

	)

64 
	#IP_RECVERR
 11

	)

65 
	#IP_RECVTTL
 12

	)

66 
	#IP_RECVTOS
 13

	)

67 
	#IP_MTU
 14

	)

68 
	#IP_FREEBIND
 15

	)

69 
	#IP_IPSEC_POLICY
 16

	)

70 
	#IP_XFRM_POLICY
 17

	)

71 
	#IP_PASSSEC
 18

	)

72 
	#IP_TRANSPARENT
 19

	)

75 
	#IP_ORIGDSTADDR
 20

	)

76 
	#IP_RECVORIGDSTADDR
 
IP_ORIGDSTADDR


	)

78 
	#IP_MINTTL
 21

	)

82 
	#IP_PMTUDISC_DONT
 0

	)

83 
	#IP_PMTUDISC_WANT
 1

	)

84 
	#IP_PMTUDISC_DO
 2

	)

85 
	#IP_PMTUDISC_PROBE
 3

	)

88 
	#SOL_IP
 0

	)

90 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

91 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

92 
	#IP_MAX_MEMBERSHIPS
 20

	)

94 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


98 
	sù_›ts


100 
ö_addr
 
	mù_d°
;

101 
	mù_›ts
[40];

105 
	sù_mªqn


107 
ö_addr
 
	mimr_mu…üddr
;

108 
ö_addr
 
	mimr_addªss
;

109 
	mimr_ifödex
;

113 
	sö_pktöfo


115 
	mùi_ifödex
;

116 
ö_addr
 
	mùi_•ec_d°
;

117 
ö_addr
 
	mùi_addr
;

124 
	#IPV6_ADDRFORM
 1

	)

125 
	#IPV6_2292PKTINFO
 2

	)

126 
	#IPV6_2292HOPOPTS
 3

	)

127 
	#IPV6_2292DSTOPTS
 4

	)

128 
	#IPV6_2292RTHDR
 5

	)

129 
	#IPV6_2292PKTOPTIONS
 6

	)

130 
	#IPV6_CHECKSUM
 7

	)

131 
	#IPV6_2292HOPLIMIT
 8

	)

133 
	#SCM_SRCRT
 
IPV6_RXSRCRT


	)

135 
	#IPV6_NEXTHOP
 9

	)

136 
	#IPV6_AUTHHDR
 10

	)

137 
	#IPV6_UNICAST_HOPS
 16

	)

138 
	#IPV6_MULTICAST_IF
 17

	)

139 
	#IPV6_MULTICAST_HOPS
 18

	)

140 
	#IPV6_MULTICAST_LOOP
 19

	)

141 
	#IPV6_JOIN_GROUP
 20

	)

142 
	#IPV6_LEAVE_GROUP
 21

	)

143 
	#IPV6_ROUTER_ALERT
 22

	)

144 
	#IPV6_MTU_DISCOVER
 23

	)

145 
	#IPV6_MTU
 24

	)

146 
	#IPV6_RECVERR
 25

	)

147 
	#IPV6_V6ONLY
 26

	)

148 
	#IPV6_JOIN_ANYCAST
 27

	)

149 
	#IPV6_LEAVE_ANYCAST
 28

	)

150 
	#IPV6_IPSEC_POLICY
 34

	)

151 
	#IPV6_XFRM_POLICY
 35

	)

153 
	#IPV6_RECVPKTINFO
 49

	)

154 
	#IPV6_PKTINFO
 50

	)

155 
	#IPV6_RECVHOPLIMIT
 51

	)

156 
	#IPV6_HOPLIMIT
 52

	)

157 
	#IPV6_RECVHOPOPTS
 53

	)

158 
	#IPV6_HOPOPTS
 54

	)

159 
	#IPV6_RTHDRDSTOPTS
 55

	)

160 
	#IPV6_RECVRTHDR
 56

	)

161 
	#IPV6_RTHDR
 57

	)

162 
	#IPV6_RECVDSTOPTS
 58

	)

163 
	#IPV6_DSTOPTS
 59

	)

165 
	#IPV6_RECVTCLASS
 66

	)

166 
	#IPV6_TCLASS
 67

	)

169 
	#IPV6_ADD_MEMBERSHIP
 
IPV6_JOIN_GROUP


	)

170 
	#IPV6_DROP_MEMBERSHIP
 
IPV6_LEAVE_GROUP


	)

171 
	#IPV6_RXHOPOPTS
 
IPV6_HOPOPTS


	)

172 
	#IPV6_RXDSTOPTS
 
IPV6_DSTOPTS


	)

175 
	#IPV6_PMTUDISC_DONT
 0

	)

176 
	#IPV6_PMTUDISC_WANT
 1

	)

177 
	#IPV6_PMTUDISC_DO
 2

	)

178 
	#IPV6_PMTUDISC_PROBE
 3

	)

181 
	#SOL_IPV6
 41

	)

182 
	#SOL_ICMPV6
 58

	)

185 
	#IPV6_RTHDR_LOOSE
 0

	)

186 
	#IPV6_RTHDR_STRICT
 1

	)

188 
	#IPV6_RTHDR_TYPE_0
 0

	)

	@/usr/include/bits/libio-ldbl.h

20 #i‚de‡
_IO_STDIO_H


24 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

25 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/predefs.h

19 #i‚de‡
_FEATURES_H


23 #i‚de‡
_PREDEFS_H


24 
	#_PREDEFS_H


	)

27 
	#__STDC_IEC_559__
 1

	)

28 
	#__STDC_IEC_559_COMPLEX__
 1

	)

	@/usr/include/bits/resource.h

21 #i‚de‡
_SYS_RESOURCE_H


25 
	~<bôs/ty≥s.h
>

33 
	e__æimô_ªsour˚


36 
	mRLIMIT_CPU
 = 0,

37 
	#RLIMIT_CPU
 
RLIMIT_CPU


	)

40 
	mRLIMIT_FSIZE
 = 1,

41 
	#RLIMIT_FSIZE
 
RLIMIT_FSIZE


	)

44 
	mRLIMIT_DATA
 = 2,

45 
	#RLIMIT_DATA
 
RLIMIT_DATA


	)

48 
	mRLIMIT_STACK
 = 3,

49 
	#RLIMIT_STACK
 
RLIMIT_STACK


	)

52 
	mRLIMIT_CORE
 = 4,

53 
	#RLIMIT_CORE
 
RLIMIT_CORE


	)

59 
	m__RLIMIT_RSS
 = 5,

60 
	#RLIMIT_RSS
 
__RLIMIT_RSS


	)

63 
	mRLIMIT_NOFILE
 = 7,

64 
	m__RLIMIT_OFILE
 = 
RLIMIT_NOFILE
,

65 
	#RLIMIT_NOFILE
 
RLIMIT_NOFILE


	)

66 
	#RLIMIT_OFILE
 
__RLIMIT_OFILE


	)

69 
	mRLIMIT_AS
 = 9,

70 
	#RLIMIT_AS
 
RLIMIT_AS


	)

73 
	m__RLIMIT_NPROC
 = 6,

74 
	#RLIMIT_NPROC
 
__RLIMIT_NPROC


	)

77 
	m__RLIMIT_MEMLOCK
 = 8,

78 
	#RLIMIT_MEMLOCK
 
__RLIMIT_MEMLOCK


	)

81 
	m__RLIMIT_LOCKS
 = 10,

82 
	#RLIMIT_LOCKS
 
__RLIMIT_LOCKS


	)

85 
	m__RLIMIT_SIGPENDING
 = 11,

86 
	#RLIMIT_SIGPENDING
 
__RLIMIT_SIGPENDING


	)

89 
	m__RLIMIT_MSGQUEUE
 = 12,

90 
	#RLIMIT_MSGQUEUE
 
__RLIMIT_MSGQUEUE


	)

95 
	m__RLIMIT_NICE
 = 13,

96 
	#RLIMIT_NICE
 
__RLIMIT_NICE


	)

100 
	m__RLIMIT_RTPRIO
 = 14,

101 
	#RLIMIT_RTPRIO
 
__RLIMIT_RTPRIO


	)

103 
	m__RLIMIT_NLIMITS
 = 15,

104 
	m__RLIM_NLIMITS
 = 
__RLIMIT_NLIMITS


105 
	#RLIMIT_NLIMITS
 
__RLIMIT_NLIMITS


	)

106 
	#RLIM_NLIMITS
 
__RLIM_NLIMITS


	)

110 #i‚de‡
__USE_FILE_OFFSET64


111 
	#RLIM_INFINITY
 (()(~0UL))

	)

113 
	#RLIM_INFINITY
 0xffffffffffffffffuLL

	)

116 #ifde‡
__USE_LARGEFILE64


117 
	#RLIM64_INFINITY
 0xffffffffffffffffuLL

	)

121 
	#RLIM_SAVED_MAX
 
RLIM_INFINITY


	)

122 
	#RLIM_SAVED_CUR
 
RLIM_INFINITY


	)

126 #i‚de‡
__USE_FILE_OFFSET64


127 
__æim_t
 
	tæim_t
;

129 
__æim64_t
 
	tæim_t
;

131 #ifde‡
__USE_LARGEFILE64


132 
__æim64_t
 
	tæim64_t
;

135 
	sæimô


138 
æim_t
 
	mæim_cur
;

140 
æim_t
 
	mæim_max
;

143 #ifde‡
__USE_LARGEFILE64


144 
	sæimô64


147 
æim64_t
 
	mæim_cur
;

149 
æim64_t
 
	mæim_max
;

154 
	e__rußge_who


157 
	mRUSAGE_SELF
 = 0,

158 
	#RUSAGE_SELF
 
RUSAGE_SELF


	)

161 
	mRUSAGE_CHILDREN
 = -1

162 
	#RUSAGE_CHILDREN
 
RUSAGE_CHILDREN


	)

164 #ifde‡
__USE_GNU


167 
	mRUSAGE_THREAD
 = 1

168 
	#RUSAGE_THREAD
 
RUSAGE_THREAD


	)

170 
	#RUSAGE_LWP
 
RUSAGE_THREAD


	)

174 
	#__√ed_timevÆ


	)

175 
	~<bôs/time.h
>

178 
	srußge


181 
timevÆ
 
	mru_utime
;

183 
timevÆ
 
	mru_°ime
;

185 
	mru_maxrss
;

188 
	mru_ixrss
;

190 
	mru_idrss
;

192 
	mru_i§ss
;

195 
	mru_möÊt
;

197 
	mru_majÊt
;

199 
	mru_nsw≠
;

202 
	mru_öblock
;

204 
	mru_oublock
;

206 
	mru_msg¢d
;

208 
	mru_msgrcv
;

210 
	mru_nsig«ls
;

214 
	mru_nvcsw
;

217 
	mru_nivcsw
;

221 
	#PRIO_MIN
 -20

	)

222 
	#PRIO_MAX
 20

	)

226 
	e__¥i‹ôy_which


228 
	mPRIO_PROCESS
 = 0,

229 
	#PRIO_PROCESS
 
PRIO_PROCESS


	)

230 
	mPRIO_PGRP
 = 1,

231 
	#PRIO_PGRP
 
PRIO_PGRP


	)

232 
	mPRIO_USER
 = 2

233 
	#PRIO_USER
 
PRIO_USER


	)

	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


23 
	~<bôs/w‹dsize.h
>

26 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

28 #i‡
__WORDSIZE
 == 64

29 
	#__FD_ZERO_STOS
 "°osq"

	)

31 
	#__FD_ZERO_STOS
 "°o¶"

	)

34 
	#__FD_ZERO
(
fd•
) \

36 
__d0
, 
__d1
; \

37 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

38 : "=c" (
__d0
), "=D" (
__d1
) \

39 : "a" (0), "0" ( (
fd_£t
) \

40 /  (
__fd_mask
)), \

41 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

43 } 0)

	)

49 
	#__FD_ZERO
(
£t
) \

51 
__i
; \

52 
fd_£t
 *
__¨r
 = (
£t
); \

53 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

54 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

55 } 0)

	)

59 
	#__FD_SET
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] |
	`__FDMASK
 (d))

	)

60 
	#__FD_CLR
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] &~
	`__FDMASK
 (d))

	)

61 
	#__FD_ISSET
(
d
, 
£t
) \

62 ((
	`__FDS_BITS
 (
£t
)[
	`__FDELT
 (
d
)] & 
	`__FDMASK
 (d)Ë!0)

	)

	@/usr/include/bits/sockaddr.h

24 #i‚de‡
_BITS_SOCKADDR_H


25 
	#_BITS_SOCKADDR_H
 1

	)

29 
	tß_Ámûy_t
;

35 
	#__SOCKADDR_COMMON
(
ß_¥efix
) \

36 
ß_Ámûy_t
 
ß_¥efix
##
Ámûy


	)

38 
	#__SOCKADDR_COMMON_SIZE
 ( ())

	)

	@/usr/include/bits/stdio-lock.h

20 #i‚de‡
_BITS_STDIO_LOCK_H


21 
	#_BITS_STDIO_LOCK_H
 1

	)

23 
	~<bôs/libc-lock.h
>

24 
	~<lowÀvñlock.h
>

28 
	#_IO_lock_öex≥nsive
 1

	)

30 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t_IO_lock_t
;

32 
	#_IO_lock_öôülizî
 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

34 
	#_IO_lock_öô
(
_«me
) \

35 ((
_«me
Ë(
_IO_lock_t
Ë
_IO_lock_öôülizî
 , 0)

	)

37 
	#_IO_lock_föi
(
_«me
) \

38 ((Ë0)

	)

40 
	#_IO_lock_lock
(
_«me
) \

42 *
__£lf
 = 
THREAD_SELF
; \

43 i‡((
_«me
).
ow√r
 !
__£lf
) \

45 
	`Œl_lock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

46 (
_«me
).
ow√r
 = 
__£lf
; \

48 ++(
_«me
).
˙t
; \

49 } 0)

	)

51 
	#_IO_lock_åylock
(
_«me
) \

53 
__ªsu…
 = 0; \

54 *
__£lf
 = 
THREAD_SELF
; \

55 i‡((
_«me
).
ow√r
 !
__£lf
) \

57 i‡(
	`Œl_åylock
 ((
_«me
).
lock
) == 0) \

59 (
_«me
).
ow√r
 = 
__£lf
; \

60 (
_«me
).
˙t
 = 1; \

63 
__ªsu…
 = 
EBUSY
; \

66 ++(
_«me
).
˙t
; \

67 
__ªsu…
; \

68 })

	)

70 
	#_IO_lock_u∆ock
(
_«me
) \

72 i‡(--(
_«me
).
˙t
 == 0) \

74 (
_«me
).
ow√r
 = 
NULL
; \

75 
	`Œl_u∆ock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

77 } 0)

	)

81 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
) \

82 
	`__libc_˛ónup_ªgi⁄_°¨t
 (((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0, 
_f˘
, _Â)

	)

83 
	#_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
_f˘
) \

84 
	`__libc_˛ónup_ªgi⁄_°¨t
 (1, 
_f˘
, 
NULL
)

	)

85 
	#_IO_˛ónup_ªgi⁄_íd
(
_doô
) \

86 
	`__libc_˛ónup_ªgi⁄_íd
 (
_doô
)

	)

88 #i‡
deföed
 
_LIBC
 && !deföed 
NOT_IN_libc


90 #ifde‡
__EXCEPTIONS


91 
	#_IO_acquúe_lock
(
_Â
) \

93 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

94 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_f˘
))) \

95 (
_Â
); \

96 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

97 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
) \

99 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

100 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_˛ór_Êags2_f˘
))) \

101 (
_Â
); \

102 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

104 
	#_IO_acquúe_lock
(
_Â
Ë
_IO_acquúe_lock_√eds_ex˚±i⁄s_íabÀd


	)

105 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
Ë
	`_IO_acquúe_lock
 (_Â)

	)

107 
	#_IO_ªÀa£_lock
(
_Â
Ë; } 0)

	)

	@/usr/include/bits/time.h

24 #i‚de‡
__√ed_timevÆ


25 #i‚de‡
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


39 
	~<bôs/ty≥s.h
>

40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

54 
	#CLOCK_MONOTONIC_RAW
 4

	)

56 
	#CLOCK_REALTIME_COARSE
 5

	)

58 
	#CLOCK_MONOTONIC_COARSE
 6

	)

61 
	#TIMER_ABSTIME
 1

	)

67 #ifde‡
__√ed_timevÆ


68 #unde‡
__√ed_timevÆ


69 #i‚de‡
_STRUCT_TIMEVAL


70 
	#_STRUCT_TIMEVAL
 1

	)

71 
	~<bôs/ty≥s.h
>

75 
	stimevÆ


77 
__time_t
 
	mtv_£c
;

78 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/uio.h

19 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


23 #i‚de‡
_BITS_UIO_H


24 
	#_BITS_UIO_H
 1

	)

26 
	~<sys/ty≥s.h
>

40 
	#UIO_MAXIOV
 1024

	)

44 
	siovec


46 *
	miov_ba£
;

47 
size_t
 
	miov_Àn
;

	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

24 #ifde‡
__WCHAR_MAX__


25 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

27 
	#__WCHAR_MAX
 (2147483647)

	)

32 #ifde‡
__WCHAR_UNSIGNED__


33 
	#__WCHAR_MIN
 
L
'\0'

	)

37 #ñi‡
L
'\0' - 1 > 0

38 
	#__WCHAR_MIN
 
L
'\0'

	)

40 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/linux/errno.h

1 #i‚de‡
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	~<asm/î∫o.h
>

	@/usr/include/linux/socket.h

1 #i‚de‡
_LINUX_SOCKET_H


2 
	#_LINUX_SOCKET_H


	)

7 
	#_K_SS_MAXSIZE
 128

	)

8 
	#_K_SS_ALIGNSIZE
 (
	`__Æignof__
 (
sockaddr
 *))

	)

11 
	s__kî√l_sockaddr_°‹age
 {

12 
	mss_Ámûy
;

14 
	m__d©a
[
_K_SS_MAXSIZE
 - ()];

17 } 
__©åibuã__
 ((
Æig√d
(
_K_SS_ALIGNSIZE
)));

	@/usr/include/linux/stddef.h

1 #i‚de‡
_LINUX_STDDEF_H


2 
	#_LINUX_STDDEF_H


	)

6 #unde‡
NULL


7 #i‡
deföed
(
__˝lu•lus
)

8 
	#NULL
 0

	)

10 
	#NULL
 ((*)0)

	)

	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__ASSEMBLY__


19 
__sig√d__
 
	t__s8
;

20 
	t__u8
;

22 
__sig√d__
 
	t__s16
;

23 
	t__u16
;

25 
__sig√d__
 
	t__s32
;

26 
	t__u32
;

28 #ifde‡
__GNUC__


29 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

30 
__exãnsi⁄__
 
	t__u64
;

32 
__sig√d__
 
	t__s64
;

33 
	t__u64
;

	@/usr/include/asm-generic/ioctls.h

1 #i‚de‡
__ASM_GENERIC_IOCTLS_H


2 
	#__ASM_GENERIC_IOCTLS_H


	)

4 
	~<löux/io˘l.h
>

19 
	#TCGETS
 0x5401

	)

20 
	#TCSETS
 0x5402

	)

21 
	#TCSETSW
 0x5403

	)

22 
	#TCSETSF
 0x5404

	)

23 
	#TCGETA
 0x5405

	)

24 
	#TCSETA
 0x5406

	)

25 
	#TCSETAW
 0x5407

	)

26 
	#TCSETAF
 0x5408

	)

27 
	#TCSBRK
 0x5409

	)

28 
	#TCXONC
 0x540A

	)

29 
	#TCFLSH
 0x540B

	)

30 
	#TIOCEXCL
 0x540C

	)

31 
	#TIOCNXCL
 0x540D

	)

32 
	#TIOCSCTTY
 0x540E

	)

33 
	#TIOCGPGRP
 0x540F

	)

34 
	#TIOCSPGRP
 0x5410

	)

35 
	#TIOCOUTQ
 0x5411

	)

36 
	#TIOCSTI
 0x5412

	)

37 
	#TIOCGWINSZ
 0x5413

	)

38 
	#TIOCSWINSZ
 0x5414

	)

39 
	#TIOCMGET
 0x5415

	)

40 
	#TIOCMBIS
 0x5416

	)

41 
	#TIOCMBIC
 0x5417

	)

42 
	#TIOCMSET
 0x5418

	)

43 
	#TIOCGSOFTCAR
 0x5419

	)

44 
	#TIOCSSOFTCAR
 0x541A

	)

45 
	#FIONREAD
 0x541B

	)

46 
	#TIOCINQ
 
FIONREAD


	)

47 
	#TIOCLINUX
 0x541C

	)

48 
	#TIOCCONS
 0x541D

	)

49 
	#TIOCGSERIAL
 0x541E

	)

50 
	#TIOCSSERIAL
 0x541F

	)

51 
	#TIOCPKT
 0x5420

	)

52 
	#FIONBIO
 0x5421

	)

53 
	#TIOCNOTTY
 0x5422

	)

54 
	#TIOCSETD
 0x5423

	)

55 
	#TIOCGETD
 0x5424

	)

56 
	#TCSBRKP
 0x5425

	)

57 
	#TIOCSBRK
 0x5427

	)

58 
	#TIOCCBRK
 0x5428

	)

59 
	#TIOCGSID
 0x5429

	)

60 
	#TCGETS2
 
	`_IOR
('T', 0x2A, 
ãrmios2
)

	)

61 
	#TCSETS2
 
	`_IOW
('T', 0x2B, 
ãrmios2
)

	)

62 
	#TCSETSW2
 
	`_IOW
('T', 0x2C, 
ãrmios2
)

	)

63 
	#TCSETSF2
 
	`_IOW
('T', 0x2D, 
ãrmios2
)

	)

64 
	#TIOCGRS485
 0x542E

	)

65 
	#TIOCSRS485
 0x542F

	)

66 
	#TIOCGPTN
 
	`_IOR
('T', 0x30, Ë

	)

67 
	#TIOCSPTLCK
 
	`_IOW
('T', 0x31, Ë

	)

68 
	#TCGETX
 0x5432

	)

69 
	#TCSETX
 0x5433

	)

70 
	#TCSETXF
 0x5434

	)

71 
	#TCSETXW
 0x5435

	)

73 
	#FIONCLEX
 0x5450

	)

74 
	#FIOCLEX
 0x5451

	)

75 
	#FIOASYNC
 0x5452

	)

76 
	#TIOCSERCONFIG
 0x5453

	)

77 
	#TIOCSERGWILD
 0x5454

	)

78 
	#TIOCSERSWILD
 0x5455

	)

79 
	#TIOCGLCKTRMIOS
 0x5456

	)

80 
	#TIOCSLCKTRMIOS
 0x5457

	)

81 
	#TIOCSERGSTRUCT
 0x5458

	)

82 
	#TIOCSERGETLSR
 0x5459

	)

83 
	#TIOCSERGETMULTI
 0x545A

	)

84 
	#TIOCSERSETMULTI
 0x545B

	)

86 
	#TIOCMIWAIT
 0x545C

	)

87 
	#TIOCGICOUNT
 0x545D

	)

93 #i‚de‡
FIOQSIZE


94 
	#TIOCGHAYESESP
 0x545E

	)

95 
	#TIOCSHAYESESP
 0x545F

	)

96 
	#FIOQSIZE
 0x5460

	)

100 
	#TIOCPKT_DATA
 0

	)

101 
	#TIOCPKT_FLUSHREAD
 1

	)

102 
	#TIOCPKT_FLUSHWRITE
 2

	)

103 
	#TIOCPKT_STOP
 4

	)

104 
	#TIOCPKT_START
 8

	)

105 
	#TIOCPKT_NOSTOP
 16

	)

106 
	#TIOCPKT_DOSTOP
 32

	)

108 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/asm-generic/socket.h

1 #i‚de‡
__ASM_GENERIC_SOCKET_H


2 
	#__ASM_GENERIC_SOCKET_H


	)

4 
	~<asm/sockios.h
>

7 
	#SOL_SOCKET
 1

	)

9 
	#SO_DEBUG
 1

	)

10 
	#SO_REUSEADDR
 2

	)

11 
	#SO_TYPE
 3

	)

12 
	#SO_ERROR
 4

	)

13 
	#SO_DONTROUTE
 5

	)

14 
	#SO_BROADCAST
 6

	)

15 
	#SO_SNDBUF
 7

	)

16 
	#SO_RCVBUF
 8

	)

17 
	#SO_SNDBUFFORCE
 32

	)

18 
	#SO_RCVBUFFORCE
 33

	)

19 
	#SO_KEEPALIVE
 9

	)

20 
	#SO_OOBINLINE
 10

	)

21 
	#SO_NO_CHECK
 11

	)

22 
	#SO_PRIORITY
 12

	)

23 
	#SO_LINGER
 13

	)

24 
	#SO_BSDCOMPAT
 14

	)

27 #i‚de‡
SO_PASSCRED


28 
	#SO_PASSCRED
 16

	)

29 
	#SO_PEERCRED
 17

	)

30 
	#SO_RCVLOWAT
 18

	)

31 
	#SO_SNDLOWAT
 19

	)

32 
	#SO_RCVTIMEO
 20

	)

33 
	#SO_SNDTIMEO
 21

	)

37 
	#SO_SECURITY_AUTHENTICATION
 22

	)

38 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

39 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

41 
	#SO_BINDTODEVICE
 25

	)

44 
	#SO_ATTACH_FILTER
 26

	)

45 
	#SO_DETACH_FILTER
 27

	)

47 
	#SO_PEERNAME
 28

	)

48 
	#SO_TIMESTAMP
 29

	)

49 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

51 
	#SO_ACCEPTCONN
 30

	)

53 
	#SO_PEERSEC
 31

	)

54 
	#SO_PASSSEC
 34

	)

55 
	#SO_TIMESTAMPNS
 35

	)

56 
	#SCM_TIMESTAMPNS
 
SO_TIMESTAMPNS


	)

58 
	#SO_MARK
 36

	)

60 
	#SO_TIMESTAMPING
 37

	)

61 
	#SCM_TIMESTAMPING
 
SO_TIMESTAMPING


	)

63 
	#SO_PROTOCOL
 38

	)

64 
	#SO_DOMAIN
 39

	)

66 
	#SO_RXQ_OVFL
 40

	)

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/bits/libc-lock.h

20 #i‚de‡
_BITS_LIBC_LOCK_H


21 
	#_BITS_LIBC_LOCK_H
 1

	)

23 
	~<±hªad.h
>

24 
	#__√ed_NULL


	)

25 
	~<°ddef.h
>

34 #ifde‡
_LIBC


35 
	~<lowÀvñlock.h
>

36 
	~<és.h
>

37 
	~<±hªad-fun˘i⁄s.h
>

38 
	~<î∫o.h
>

39 
	~<gnu/›ti⁄-groups.h
>

43 #i‡
deföed
 
_LIBC
 || deföed 
_IO_MTSAFE_IO


44 #i‡(
deföed
 
NOT_IN_libc
 && !deföed 
IS_IN_lib±hªad
Ë|| !deföed 
_LIBC


45 
±hªad_muãx_t
 
	t__libc_lock_t
;

46 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

48 
	t__libc_lock_t
;

49 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t__libc_lock_ªcursive_t
;

51 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__πld_lock_ªcursive_t
;

52 #ifde‡
__USE_UNIX98


53 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

55 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

58 
__libc_lock_›aque__
 
	t__libc_lock_t
;

59 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

60 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

64 
±hªad_key_t
 
	t__libc_key_t
;

73 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

74 
CLASS
 
__libc_lock_t
 
NAME
;

	)

75 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

76 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

77 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

78 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

79 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

80 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

91 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

92 #i‡
LLL_LOCK_INITIALIZER
 == 0

93 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

94 
CLASS
 
__libc_lock_t
 
NAME
;

	)

96 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

97 
CLASS
 
__libc_lock_t
 
NAME
 = 
LLL_LOCK_INITIALIZER
;

	)

100 #i‡
__LT_SPINLOCK_INIT
 == 0

101 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

102 
CLASS
 
__libc_lock_t
 
NAME
;

	)

104 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

105 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

109 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

110 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

114 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

115 #i‡
LLL_LOCK_INITIALIZER
 == 0

116 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

117 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

119 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

120 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

122 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

123 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

125 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

126 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

127 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

128 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

131 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

132 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

133 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

134 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

136 
	#__πld_lock_öôülize
(
NAME
) \

137 (Ë((
NAME
Ë(
__πld_lock_ªcursive_t
Ë
_RTLD_LOCK_RECURSIVE_INITIALIZER
)

	)

144 #ifde‡
__PIC__


145 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

146 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

147 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

149 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

150 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

154 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


155 
	#PTFAVAIL
(
NAME
Ë
__libc_±hªad_fun˘i⁄s_öô


	)

156 
	#__libc_±f_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

157 (
__libc_±hªad_fun˘i⁄s_öô
 ? 
	`PTHFCT_CALL
 (
±r_
##
FUNC
, 
ARGS
Ë: 
ELSE
)

	)

158 
	#__libc_±f_ˇŒ_Æways
(
FUNC
, 
ARGS
) \

159 
	`PTHFCT_CALL
 (
±r_
##
FUNC
, 
ARGS
)

	)

161 
	#PTFAVAIL
(
NAME
Ë(NAME !
NULL
)

	)

162 
	#__libc_±f_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

163 
	`__libc_maybe_ˇŒ
 (
FUNC
, 
ARGS
, 
ELSE
)

	)

164 
	#__libc_±f_ˇŒ_Æways
(
FUNC
, 
ARGS
) \

165 
FUNC
 
ARGS


	)

171 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

172 
	#__libc_lock_öô
(
NAME
Ë((NAMEË
LLL_LOCK_INITIALIZER
, 0)

	)

174 
	#__libc_lock_öô
(
NAME
) \

175 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0)

	)

177 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


180 
	#__libc_rwlock_öô
(
NAME
) \

181 (
	`__buûtö_mem£t
 (&(
NAME
), '\0',  (NAME)), 0)

	)

183 
	#__libc_rwlock_öô
(
NAME
) \

184 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0)

	)

188 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

189 
	#__libc_lock_öô_ªcursive
(
NAME
) \

190 ((
NAME
Ë(
__libc_lock_ªcursive_t
Ë
_LIBC_LOCK_RECURSIVE_INITIALIZER
, 0)

	)

192 
	#__libc_lock_öô_ªcursive
(
NAME
) \

194 i‡(
__±hªad_muãx_öô
 !
NULL
) \

196 
±hªad_muãx©å_t
 
__©å
; \

197 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

198 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

199 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

200 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

202 } 0)

	)

205 
	#__πld_lock_öô_ªcursive
(
NAME
) \

207 i‡(
__±hªad_muãx_öô
 !
NULL
) \

209 
±hªad_muãx©å_t
 
__©å
; \

210 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

211 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

212 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

213 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

215 } 0)

	)

220 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

221 
	#__libc_lock_föi
(
NAME
Ë((Ë0)

	)

223 
	#__libc_lock_föi
(
NAME
) \

224 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
)), 0)

	)

226 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


227 
	#__libc_rwlock_föi
(
NAME
Ë((Ë0)

	)

229 
	#__libc_rwlock_föi
(
NAME
) \

230 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0)

	)

234 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

235 
	#__libc_lock_föi_ªcursive
(
NAME
Ë((Ë0)

	)

237 
	#__libc_lock_föi_ªcursive
(
NAME
) \

238 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
)), 0)

	)

242 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

243 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

247 
__libc_lock_lock_‚
 (
__libc_lock_t
 *);

248 
libc_hiddí_¥Ÿo
 (
__libc_lock_lock_‚
);

250 #i‡
__OPTION_EGLIBC_BIG_MACROS


251 
	#__libc_lock_lock
(
NAME
) \

252 ({ 
	`Œl_lock
 (
NAME
, 
LLL_PRIVATE
); 0; })

	)

254 
	#__libc_lock_lock
(
NAME
) \

255 
	`__libc_lock_lock_‚
 (&(
NAME
))

	)

258 
	#__libc_lock_lock
(
NAME
) \

259 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
)), 0)

	)

261 
	#__libc_rwlock_rdlock
(
NAME
) \

262 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0)

	)

263 
	#__libc_rwlock_wæock
(
NAME
) \

264 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0)

	)

267 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

268 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

272 
__libc_lock_lock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

273 
libc_hiddí_¥Ÿo
 (
__libc_lock_lock_ªcursive_‚
);

275 #i‡
__OPTION_EGLIBC_BIG_MACROS


276 
	#__libc_lock_lock_ªcursive
(
NAME
) \

278 *
£lf
 = 
THREAD_SELF
; \

279 i‡((
NAME
).
ow√r
 !
£lf
) \

281 
	`Œl_lock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

282 (
NAME
).
ow√r
 = 
£lf
; \

284 ++(
NAME
).
˙t
; \

285 } 0)

	)

287 
	#__libc_lock_lock_ªcursive
(
NAME
) \

288 
	`__libc_lock_lock_ªcursive_‚
 (&(
NAME
))

	)

291 
	#__libc_lock_lock_ªcursive
(
NAME
) \

292 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

296 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

297 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

301 
__libc_lock_åylock_‚
 (
__libc_lock_t
 *);

302 
libc_hiddí_¥Ÿo
 (
__libc_lock_åylock_‚
);

304 #i‡
__OPTION_EGLIBC_BIG_MACROS


305 
	#__libc_lock_åylock
(
NAME
) \

306 
	`Œl_åylock
 (
NAME
)

	)

308 
	#__libc_lock_åylock
(
NAME
) \

309 
	`__libc_lock_åylock_‚
 (&(
NAME
))

	)

312 
	#__libc_lock_åylock
(
NAME
) \

313 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
)), 0)

	)

315 
	#__libc_rwlock_åyrdlock
(
NAME
) \

316 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0)

	)

317 
	#__libc_rwlock_åywæock
(
NAME
) \

318 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0)

	)

321 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

322 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

326 
__libc_lock_åylock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

327 
libc_hiddí_¥Ÿo
 (
__libc_lock_åylock_ªcursive_‚
);

329 #i‡
__OPTION_EGLIBC_BIG_MACROS


330 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

332 
ªsu…
 = 0; \

333 *
£lf
 = 
THREAD_SELF
; \

334 i‡((
NAME
).
ow√r
 !
£lf
) \

336 i‡(
	`Œl_åylock
 ((
NAME
).
lock
) == 0) \

338 (
NAME
).
ow√r
 = 
£lf
; \

339 (
NAME
).
˙t
 = 1; \

342 
ªsu…
 = 
EBUSY
; \

345 ++(
NAME
).
˙t
; \

346 
ªsu…
; \

347 })

	)

349 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

350 
	`__libc_lock_åylock_ªcursive_‚
 (&(
NAME
))

	)

353 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

354 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
)), 0)

	)

357 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

358 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
).
muãx
), 0)

	)

361 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

362 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

366 
__libc_lock_u∆ock_‚
 (
__libc_lock_t
 *);

367 
libc_hiddí_¥Ÿo
 (
__libc_lock_u∆ock_‚
);

369 #i‡
__OPTION_EGLIBC_BIG_MACROS


370 
	#__libc_lock_u∆ock
(
NAME
) \

371 
	`Œl_u∆ock
 (
NAME
, 
LLL_PRIVATE
)

	)

373 
	#__libc_lock_u∆ock
(
NAME
) \

374 
	`__libc_lock_u∆ock_‚
 (&(
NAME
))

	)

377 
	#__libc_lock_u∆ock
(
NAME
) \

378 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
)), 0)

	)

380 
	#__libc_rwlock_u∆ock
(
NAME
) \

381 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0)

	)

384 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

385 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

389 
__libc_lock_u∆ock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

390 
libc_hiddí_¥Ÿo
 (
__libc_lock_u∆ock_ªcursive_‚
);

392 #i‡
__OPTION_EGLIBC_BIG_MACROS


394 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

396 i‡(--(
NAME
).
˙t
 == 0) \

398 (
NAME
).
ow√r
 = 
NULL
; \

399 
	`Œl_u∆ock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

401 } 0)

	)

403 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

404 
	`__libc_lock_u∆ock_ªcursive_‚
 (&(
NAME
))

	)

407 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

408 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
)), 0)

	)

411 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


412 
	#__πld_lock_deÁu…_lock_ªcursive
(
lock
) \

413 ++((
±hªad_muãx_t
 *)(
lock
))->
__d©a
.
__cou¡
;

	)

415 
	#__πld_lock_deÁu…_u∆ock_ªcursive
(
lock
) \

416 --((
±hªad_muãx_t
 *)(
lock
))->
__d©a
.
__cou¡
;

	)

418 
	#__πld_lock_lock_ªcursive
(
NAME
) \

419 
	`GL
(
dl_πld_lock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

421 
	#__πld_lock_u∆ock_ªcursive
(
NAME
) \

422 
	`GL
(
dl_πld_u∆ock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

424 
	#__πld_lock_lock_ªcursive
(
NAME
) \

425 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

427 
	#__πld_lock_u∆ock_ªcursive
(
NAME
) \

428 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
).
muãx
), 0)

	)

432 #i‡
PTHREAD_ONCE_INIT
 == 0

435 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

436 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

438 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

439 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

443 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

445 i‡(
	`PTFAVAIL
 (
__±hªad_⁄˚
)) \

446 
	`__libc_±f_ˇŒ_Æways
 (
__±hªad_⁄˚
, (&(
ONCE_CONTROL
), \

447 
INIT_FUNCTION
)); \

448 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

449 
	`INIT_FUNCTION
 (); \

450 (
ONCE_CONTROL
) |= 2; \

452 } 0)

	)

459 
_±hªad_˛ónup_push
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

460 (*
routöe
Ë(*), *
¨g
);

461 
	`_±hªad_˛ónup_p›
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

462 
execuã
);

463 
	`_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

464 (*
routöe
Ë(*), *
¨g
);

465 
	`_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

466 
execuã
);

469 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

470 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

471 
_avaû
; \

472 i‡(
DOIT
) { \

473 
_avaû
 = 
	`PTFAVAIL
 (
_±hªad_˛ónup_push_de„r
); \

474 i‡(
_avaû
) { \

475 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_push_de„r
, (&
_buf„r
, 
FCT
, \

476 
ARG
)); \

478 
_buf„r
.
__routöe
 = (
FCT
); \

479 
_buf„r
.
__¨g
 = (
ARG
); \

482 
_avaû
 = 0; \

483 }

	)

486 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

487 i‡(
_avaû
) { \

488 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

489 } i‡(
DOIT
) \

490 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
); \

491 
	}

	)
}

494 
	#__libc_˛ónup_íd
(
DOIT
) \

495 i‡(
_avaû
) { \

496 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

497 } i‡(
DOIT
) \

498 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
)

	)

502 
__exã∫_ölöe
 

503 
	$__libc_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
f
)

505 i‡(
f
->
__do_ô
)

506 
f
->
	`__ˇn˚l_routöe
 (f->
__ˇn˚l_¨g
);

507 
	}
}

509 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

511 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

512 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__libc_˛ónup_routöe
))) \

513 { .
__ˇn˚l_routöe
 = (
f˘
), .
__ˇn˚l_¨g
 = (
¨g
), \

514 .
__do_ô
 = 1 };

	)

516 
	#__libc_˛ónup_p›
(
execuã
) \

517 
__˛‰ame
.
__do_ô
 = (
execuã
); \

518 } 0)

	)

522 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

523 
	`__libc_±f_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1)

	)

526 
	#__libc_gë•ecific
(
KEY
) \

527 
	`__libc_±f_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
)

	)

530 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

531 
	`__libc_±f_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0)

	)

537 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

538 
	`__ªgi°î_©f‹k
 (
PREPARE
, 
PARENT
, 
CHILD
, 
NULL
)

	)

539 
__ªgi°î_©f‹k
 ((*
__¥ï¨e
) (),

540 (*
__∑ª¡
) (),

541 (*
__chûd
) (),

542 *
__dso_h™dÀ
);

547 
	`__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

548 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

550 
	`__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

552 
	`__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

554 
	`__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

556 
	`__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

558 
	`__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

560 
	`__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

562 
	`__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

563 
__köd
);

565 #ifde‡
__USE_UNIX98


566 
	`__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

567 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

569 
	`__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

571 
	`__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

573 
	`__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

575 
	`__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

577 
	`__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

579 
	`__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

582 
	`__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

583 (*
__de°r_fun˘i⁄
) (*));

585 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

586 
__c⁄°
 *
__poöãr
);

588 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

590 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

591 (*
__öô_routöe
) ());

593 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

594 (*
__∑ª¡
) (),

595 (*
__chûd
) ());

601 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


602 #ifde‡
wók_exã∫


603 #i‡
_LIBC


604 
	~<bp-sym.h
>

606 
	#BP_SYM
(
sym
Ë
	)
sym

608 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_öô
))

609 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_de°roy
))

610 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_lock
))

611 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_åylock
))

612 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_u∆ock
))

613 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_öô
))

614 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_de°roy
))

615 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_£ây≥
))

616 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_öô
))

617 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_de°roy
))

618 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_rdlock
))

619 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åyrdlock
))

620 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_wæock
))

621 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åywæock
))

622 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_u∆ock
))

623 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_key_¸óã
))

624 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_£t•ecific
))

625 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_gë•ecific
))

626 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_⁄˚
))

627 
	$wók_exã∫
 (
__±hªad_öôülize
)

628 
	$wók_exã∫
 (
__±hªad_©f‹k
)

629 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_push_de„r
))

630 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_p›_ª°‹e
))

631 
	`wók_exã∫
 (
	$BP_SYM
 (
±hªad_£tˇn˚l°©e
))

633 #¥agm®
wók
 
__±hªad_muãx_öô


634 #¥agm®
wók
 
__±hªad_muãx_de°roy


635 #¥agm®
wók
 
__±hªad_muãx_lock


636 #¥agm®
wók
 
__±hªad_muãx_åylock


637 #¥agm®
wók
 
__±hªad_muãx_u∆ock


638 #¥agm®
wók
 
__±hªad_muãx©å_öô


639 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


640 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


641 #¥agm®
wók
 
__±hªad_rwlock_de°roy


642 #¥agm®
wók
 
__±hªad_rwlock_rdlock


643 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


644 #¥agm®
wók
 
__±hªad_rwlock_wæock


645 #¥agm®
wók
 
__±hªad_rwlock_åywæock


646 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


647 #¥agm®
wók
 
__±hªad_key_¸óã


648 #¥agm®
wók
 
__±hªad_£t•ecific


649 #¥agm®
wók
 
__±hªad_gë•ecific


650 #¥agm®
wók
 
__±hªad_⁄˚


651 #¥agm®
wók
 
__±hªad_öôülize


652 #¥agm®
wók
 
__±hªad_©f‹k


653 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


654 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


655 #¥agm®
wók
 
±hªad_£tˇn˚l°©e


	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

72 
	t__c⁄°
 **, __const *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

86 
	t__c⁄°
 *,

87 
	t__c⁄°
 **,

88 
	t__c⁄°
 *, **,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

93 
	t__c⁄°
 *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 
__c⁄°
 *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_söl


	)

12 
	#__°ub___kî√l_è∆


	)

13 
	#__°ub_chÊags


	)

14 
	#__°ub_Áâach


	)

15 
	#__°ub_fchÊags


	)

16 
	#__°ub_fdëach


	)

17 
	#__°ub_gây


	)

18 
	#__°ub_lchmod


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

76 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s1
,

323 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

327 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

328 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

332 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

333 
__THROW
;

336 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifde‡
__USE_GNU


342 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

343 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

344 
__THROW
;

348 
__BEGIN_NAMESPACE_STD


351 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

355 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

359 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

363 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

364 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

365 
mb°©e_t
 *
__p
Ë
__THROW
;

368 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

369 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

372 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

373 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
__END_NAMESPACE_STD


378 #ifde‡
__USE_EXTERN_INLINES


384 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

385 
__exã∫_ölöe
 
wöt_t


386 
	`__NTH
 (
	$btowc
 (
__c
))

387 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

388 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

390 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

391 
__exã∫_ölöe
 

392 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

393 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

394 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

396 
__exã∫_ölöe
 
size_t


397 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

398 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

399 {  (
__ps
 !
NULL


400 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

403 
__BEGIN_NAMESPACE_STD


406 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

407 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

408 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

412 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

413 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

414 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

415 
__END_NAMESPACE_STD


418 #ifdef 
__USE_XOPEN2K8


421 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

422 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

423 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

427 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

428 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

429 
size_t
 
__nwc
, size_à
__Àn
,

430 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

435 #ifde‡
__USE_XOPEN


437 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

441 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

445 
__BEGIN_NAMESPACE_STD


448 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

449 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

450 
__END_NAMESPACE_STD


452 #ifde‡
__USE_ISOC99


453 
__BEGIN_NAMESPACE_C99


455 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

456 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

457 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
__END_NAMESPACE_C99


463 
__BEGIN_NAMESPACE_STD


466 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

467 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

471 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

473 
__THROW
;

474 
__END_NAMESPACE_STD


476 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

477 
__BEGIN_NAMESPACE_C99


480 
__exãnsi⁄__


481 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

482 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

483 
__THROW
;

487 
__exãnsi⁄__


488 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

489 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

490 
__ba£
Ë
__THROW
;

491 
__END_NAMESPACE_C99


494 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


497 
__exãnsi⁄__


498 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

499 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

500 
__THROW
;

504 
__exãnsi⁄__


505 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

506 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

507 
__ba£
Ë
__THROW
;

510 #ifde‡
__USE_GNU


524 
	~<xloˇÀ.h
>

528 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

529 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

530 
__loˇÀ_t
 
__loc
Ë
__THROW
;

532 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

533 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

534 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

536 
__exãnsi⁄__


537 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
)

545 
__THROW
;

547 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

549 
__THROW
;

551 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

552 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
;

555 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

556 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

557 
__loˇÀ_t
 
__loc
Ë
__THROW
;

561 #ifdef 
__USE_XOPEN2K8


564 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
Ë
__THROW
;

568 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
)

569 
__THROW
;

575 #ifdef 
__USE_XOPEN2K8


578 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

581 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


582 
__BEGIN_NAMESPACE_STD


585 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

592 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

593 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

599 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

602 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

603 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
__THROW
 ;

610 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

611 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

612 
__gnuc_va_li°
 
__¨g
)

618 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

619 
__gnuc_va_li°
 
__¨g
)

623 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

624 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

625 
__gnuc_va_li°
 
__¨g
)

626 
__THROW
 ;

633 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

634 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

640 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

643 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

644 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
__THROW
 ;

647 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

648 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

649 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

650 #ifde‡
__REDIRECT


654 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

655 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

656 
__isoc99_fwsˇnf
)

658 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

659 
__isoc99_wsˇnf
)

661 
	`__REDIRECT_NTH
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

662 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

663 ...), 
__isoc99_swsˇnf
)

666 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

667 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

669 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

670 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

671 
__THROW
;

672 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

673 
	#wsˇnf
 
__isoc99_wsˇnf


	)

674 
	#swsˇnf
 
__isoc99_swsˇnf


	)

678 
__END_NAMESPACE_STD


681 #ifde‡
__USE_ISOC99


682 
__BEGIN_NAMESPACE_C99


687 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

688 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

689 
__gnuc_va_li°
 
__¨g
)

695 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

696 
__gnuc_va_li°
 
__¨g
)

699 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

700 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

702 
__THROW
 ;

704 #i‡!
deföed
 
__USE_GNU
 \

705 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

706 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

707 #ifde‡
__REDIRECT


708 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

709 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

710 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

712 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

713 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

715 
	`__REDIRECT_NTH
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

716 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

717 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

720 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

721 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
);

723 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

726 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

728 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

729 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

730 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

734 
__END_NAMESPACE_C99


738 
__BEGIN_NAMESPACE_STD


743 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

744 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

750 
wöt_t
 
	`gëwch¨
 ();

757 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

758 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

764 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

772 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

773 
__FILE
 *
__ª°ri˘
 
__°ªam
);

779 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

780 
__FILE
 *
__ª°ri˘
 
__°ªam
);

787 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

788 
__END_NAMESPACE_STD


791 #ifde‡
__USE_GNU


799 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

800 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

808 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

816 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

826 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

835 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

836 
__FILE
 *
__ª°ri˘
 
__°ªam
);

844 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

845 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
__BEGIN_NAMESPACE_C99


853 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

854 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

855 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

856 
__END_NAMESPACE_C99


858 #ifde‡
__USE_GNU


859 
	~<xloˇÀ.h
>

863 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

864 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

865 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

866 
__loˇÀ_t
 
__loc
Ë
__THROW
;

875 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


876 
	#__√ed_iswxxx


	)

877 
	~<w˘y≥.h
>

881 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


882 
	~<bôs/wch¨2.h
>

885 #ifde‡
__LDBL_COMPAT


886 
	~<bôs/wch¨-ldbl.h
>

889 
__END_DECLS


897 #unde‡
__√ed_mb°©e_t


898 #unde‡
__√ed_wöt_t


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

	@/usr/include/asm/bitsperlong.h

1 #i‚de‡
__ASM_X86_BITSPERLONG_H


2 
	#__ASM_X86_BITSPERLONG_H


	)

4 #ifde‡
__x86_64__


5 
	#__BITS_PER_LONG
 64

	)

7 
	#__BITS_PER_LONG
 32

	)

10 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/bits/wchar-ldbl.h

20 #i‚de‡
_WCHAR_H


24 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


25 
__BEGIN_NAMESPACE_C99


26 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

27 
__LDBL_REDIR_DECL
 (
w¥ötf
);

28 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

31 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

32 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

33 && !
deföed
 
	g__REDIRECT
 \

34 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

35 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

37 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

39 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

41 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

43 
__END_NAMESPACE_C99


46 #ifde‡
__USE_ISOC99


47 
__BEGIN_NAMESPACE_C99


48 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

49 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

50 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

51 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

53 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

55 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

57 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

59 
__END_NAMESPACE_C99


62 #ifde‡
__USE_GNU


63 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

66 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


67 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

68 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

69 #i‡
__USE_FORTIFY_LEVEL
 > 1

70 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

73 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

20 #i‚de‡
_WCHAR_H


25 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

26 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

27 
size_t
 
__ns1
Ë
__THROW
;

28 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

29 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

30 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

31 
wmem˝y
);

32 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

33 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

34 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

35 
size_t
 
__ns1
), 
__wmem˝y_chk
)

36 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

39 
__exã∫_Æways_ölöe
 
wch¨_t
 *

40 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

41 
size_t
 
__n
))

43 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

45 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

46  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

47 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

49 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

50  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

51 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

53  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

54 
	}
}

57 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

58 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

59 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

60 
__c⁄°
 
wch¨_t
 *
__s2
,

61 
size_t
 
__n
), 
wmemmove
);

62 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

63 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

64 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

65 
size_t
 
__ns1
), 
__wmemmove_chk
)

66 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

69 
__exã∫_Æways_ölöe
 
wch¨_t
 *

70 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

71 
size_t
 
__n
))

73 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

75 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

76  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

77 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

79 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

80  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

81 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

83  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

84 
	}
}

87 #ifde‡
__USE_GNU


88 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

89 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

90 
size_t
 
__ns1
Ë
__THROW
;

91 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

92 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

93 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
,

94 
size_t
 
__n
), 
wmemp˝y
);

95 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

96 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

97 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

98 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

99 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

102 
__exã∫_Æways_ölöe
 
wch¨_t
 *

103 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

104 
size_t
 
__n
))

106 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

108 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

109  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

110 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

112 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

113  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

114 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

116  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

117 
	}
}

121 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

122 
size_t
 
__ns
Ë
__THROW
;

123 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

124 
size_t
 
__n
), 
wmem£t
);

125 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

126 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

127 
size_t
 
__ns
), 
__wmem£t_chk
)

128 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

131 
__exã∫_Æways_ölöe
 
wch¨_t
 *

132 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__ª°ri˘
 
__s
, wch¨_à
__c
, 
size_t
 
__n
))

134 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

136 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

137  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

139 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

140  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

141 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

143  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

144 
	}
}

147 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

149 
size_t
 
__n
Ë
__THROW
;

150 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

151 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

152 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

154 
__exã∫_Æways_ölöe
 
wch¨_t
 *

155 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

157 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

158  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

159  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

160 
	}
}

163 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
,

164 
size_t
 
__de°Àn
Ë
__THROW
;

165 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
, (wch¨_à*
__de°
,

166 
__c⁄°
 
wch¨_t
 *
__§c
),

167 
w˝˝y
);

169 
__exã∫_Æways_ölöe
 
wch¨_t
 *

170 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

172 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

173  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

174  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

175 
	}
}

178 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

179 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

180 
size_t
 
__de°Àn
Ë
__THROW
;

181 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

182 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

183 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

184 
size_t
 
__n
), 
wc¢˝y
);

185 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

186 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

187 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

188 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

189 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

192 
__exã∫_Æways_ölöe
 
wch¨_t
 *

193 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

195 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

197 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

198  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

199 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

200 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

201  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

202 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

204  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

205 
	}
}

208 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

209 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

210 
size_t
 
__de°Àn
Ë
__THROW
;

211 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

212 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

213 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

214 
size_t
 
__n
), 
w˝n˝y
);

215 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

216 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

217 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

218 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

219 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

222 
__exã∫_Æways_ölöe
 
wch¨_t
 *

223 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__exã∫_Æways_ölöe
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__exã∫_Æways_ölöe
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

265 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

266  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

267 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

268  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

269 
	}
}

272 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

273 
__Êag
, 
size_t
 
__s_Àn
,

274 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

275 
__THROW
 ;

277 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

278 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

279 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

280 
sw¥ötf
);

282 #ifde‡
__va_¨g_∑ck


283 
__exã∫_Æways_ölöe
 

284 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

285 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

287 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

288  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

289 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

290 
__fmt
, 
	`__va_¨g_∑ck
 ());

291  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

292 
	}
}

293 #ñi‡!
deföed
 
__˝lu•lus


295 
	#sw¥ötf
(
s
, 
n
, ...) \

296 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

297 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

298 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

299 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

302 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

303 
__Êag
, 
size_t
 
__s_Àn
,

304 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

305 
__gnuc_va_li°
 
__¨g
)

306 
__THROW
 ;

308 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

309 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

310 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

311 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

313 
__exã∫_Æways_ölöe
 

314 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

315 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

317 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

318  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

319 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

320  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

321 
	}
}

324 #i‡
__USE_FORTIFY_LEVEL
 > 1

326 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

327 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

328 
__w¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

330 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

331 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

332 
__gnuc_va_li°
 
__≠
);

333 
__vw¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

334 
__gnuc_va_li°
 
__≠
);

336 #ifde‡
__va_¨g_∑ck


337 
__exã∫_Æways_ölöe
 

338 
	$w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

340  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

341 
	}
}

343 
__exã∫_Æways_ölöe
 

344 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

346  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

347 
	`__va_¨g_∑ck
 ());

348 
	}
}

349 #ñi‡!
deföed
 
__˝lu•lus


350 
	#w¥ötf
(...) \

351 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

352 
	#fw¥ötf
(
°ªam
, ...) \

353 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

356 
__exã∫_Æways_ölöe
 

357 
	$vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

359  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

360 
	}
}

362 
__exã∫_Æways_ölöe
 

363 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

364 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

366  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

367 
	}
}

371 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

372 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

373 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

374 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

375 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

376 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

377 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

378 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

379 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

382 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

383 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

385 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

387 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

388  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

389 
__n
, 
__°ªam
);

391 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

392  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

393 
__n
, 
__°ªam
);

395  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

396 
	}
}

398 #ifde‡
__USE_GNU


399 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

400 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

401 
__wur
;

402 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

403 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

404 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

405 
__wur
;

406 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

407 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

408 
__FILE
 *
__ª°ri˘
 
__°ªam
),

409 
__fgëws_u∆ocked_chk
)

410 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

413 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

414 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

416 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

418 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

419  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

420 
__n
, 
__°ªam
);

422 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

423  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

424 
__n
, 
__°ªam
);

426  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

427 
	}
}

431 
size_t
 
	$__w¸tomb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
mb°©e_t
 *
__p
,

432 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

433 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

434 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

435 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

437 
__exã∫_Æways_ölöe
 
__wur
 
size_t


438 
	`__NTH
 (
	$w¸tomb
 (*
__s
, 
wch¨_t
 
__wch¨
, 
mb°©e_t
 *
__ps
))

443 
	#__WCHAR_MB_LEN_MAX
 16

	)

444 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


447 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

448  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

449  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

450 
	}
}

453 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

454 
__c⁄°
 **
__ª°ri˘
 
__§c
,

455 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

456 
size_t
 
__d°Àn
Ë
__THROW
;

457 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

458 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

459 
__c⁄°
 **
__ª°ri˘
 
__§c
,

460 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

461 
mb§towcs
);

462 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

463 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

464 
__c⁄°
 **
__ª°ri˘
 
__§c
,

465 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

466 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

467 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

470 
__exã∫_Æways_ölöe
 
size_t


471 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

472 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

474 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

476 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

477  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

478 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

480 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

481  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

482 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

484  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

485 
	}
}

488 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

489 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

490 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

491 
size_t
 
__d°Àn
Ë
__THROW
;

492 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

493 (*
__ª°ri˘
 
__d°
,

494 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

495 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

496 
wc§tombs
);

497 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

498 (*
__ª°ri˘
 
__d°
,

499 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

500 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

501 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

502 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

504 
__exã∫_Æways_ölöe
 
size_t


505 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

506 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

508 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

510 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

511  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

513 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

514  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

517 
	}
}

520 #ifde‡
__USE_GNU


521 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

522 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

523 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

524 
size_t
 
__d°Àn
Ë
__THROW
;

525 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

526 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

527 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

528 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

529 
mb¢πowcs
);

530 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

531 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

532 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

533 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

534 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

535 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

538 
__exã∫_Æways_ölöe
 
size_t


539 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

540 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

542 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

544 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

545  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

546 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

548 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

549  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

550 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

552  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

553 
	}
}

556 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

557 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

558 
size_t
 
__nwc
, size_à
__Àn
,

559 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

560 
__THROW
;

561 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

562 (*
__ª°ri˘
 
__d°
,

563 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

564 
size_t
 
__nwc
, size_à
__Àn
,

565 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

566 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

567 (*
__ª°ri˘
 
__d°
,

568 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

569 
size_t
 
__nwc
, size_à
__Àn
,

570 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

571 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

572 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

574 
__exã∫_Æways_ölöe
 
size_t


575 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

576 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

578 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

580 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

581  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

582 
	`__bos
 (
__d°
));

584 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

585  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

586 
	`__bos
 (
__d°
));

588  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

589 
	}
}

	@/usr/include/gnu/option-groups.h

10 #i‚de‡
__GNU_OPTION_GROUPS_H


11 
	#__GNU_OPTION_GROUPS_H


	)

13 
	#__OPTION_EGLIBC_ADVANCED_INET6
 1

	)

14 
	#__OPTION_EGLIBC_BACKTRACE
 1

	)

15 
	#__OPTION_EGLIBC_BIG_MACROS
 1

	)

16 
	#__OPTION_EGLIBC_BSD
 1

	)

17 
	#__OPTION_EGLIBC_CATGETS
 1

	)

18 
	#__OPTION_EGLIBC_CHARSETS
 1

	)

19 
	#__OPTION_EGLIBC_CRYPT
 1

	)

20 
	#__OPTION_EGLIBC_CRYPT_UFC
 1

	)

21 
	#__OPTION_EGLIBC_CXX_TESTS
 1

	)

22 
	#__OPTION_EGLIBC_DB_ALIASES
 1

	)

23 
	#__OPTION_EGLIBC_ENVZ
 1

	)

24 
	#__OPTION_EGLIBC_FCVT
 1

	)

25 
	#__OPTION_EGLIBC_FMTMSG
 1

	)

26 
	#__OPTION_EGLIBC_FSTAB
 1

	)

27 
	#__OPTION_EGLIBC_FTRAVERSE
 1

	)

28 
	#__OPTION_EGLIBC_GETLOGIN
 1

	)

29 
	#__OPTION_EGLIBC_IDN
 1

	)

30 
	#__OPTION_EGLIBC_INET
 1

	)

31 
	#__OPTION_EGLIBC_INET_ANL
 1

	)

32 
	#__OPTION_EGLIBC_LIBM
 1

	)

33 
	#__OPTION_EGLIBC_LIBM_BIG
 1

	)

34 
	#__OPTION_EGLIBC_LOCALES
 1

	)

35 
	#__OPTION_EGLIBC_LOCALE_CODE
 1

	)

36 
	#__OPTION_EGLIBC_MEMUSAGE
 1

	)

37 
	#__OPTION_EGLIBC_NIS
 1

	)

38 
	#__OPTION_EGLIBC_NSSWITCH
 1

	)

39 
	#__OPTION_EGLIBC_RCMD
 1

	)

40 
	#__OPTION_EGLIBC_RTLD_DEBUG
 1

	)

41 
	#__OPTION_EGLIBC_SPAWN
 1

	)

42 
	#__OPTION_EGLIBC_STREAMS
 1

	)

43 
	#__OPTION_EGLIBC_SUNRPC
 1

	)

44 
	#__OPTION_EGLIBC_UTMP
 1

	)

45 
	#__OPTION_EGLIBC_UTMPX
 1

	)

46 
	#__OPTION_EGLIBC_WORDEXP
 1

	)

47 
	#__OPTION_POSIX_C_LANG_WIDE_CHAR
 1

	)

48 
	#__OPTION_POSIX_REGEXP
 1

	)

49 
	#__OPTION_POSIX_REGEXP_GLIBC
 1

	)

50 
	#__OPTION_POSIX_WIDE_CHAR_DEVICE_IO
 1

	)

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/pthread.h

20 #i‚de‡
_PTHREAD_H


21 
	#_PTHREAD_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ídün.h
>

25 
	~<sched.h
>

26 
	~<time.h
>

28 
	~<bôs/±hªadty≥s.h
>

29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/w‹dsize.h
>

36 
	mPTHREAD_CREATE_JOINABLE
,

37 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

38 
	mPTHREAD_CREATE_DETACHED


39 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

46 
	mPTHREAD_MUTEX_TIMED_NP
,

47 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

48 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

49 
	mPTHREAD_MUTEX_ADAPTIVE_NP


50 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


52 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

53 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

54 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

55 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


57 #ifde‡
__USE_GNU


59 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


64 #ifde‡
__USE_XOPEN2K


68 
	mPTHREAD_MUTEX_STALLED
,

69 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

70 
	mPTHREAD_MUTEX_ROBUST
,

71 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


76 #ifde‡
__USE_UNIX98


80 
	mPTHREAD_PRIO_NONE
,

81 
	mPTHREAD_PRIO_INHERIT
,

82 
	mPTHREAD_PRIO_PROTECT


88 #i‡
__WORDSIZE
 == 64

89 
	#PTHREAD_MUTEX_INITIALIZER
 \

90 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

91 #ifde‡
__USE_GNU


92 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

94 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

96 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

97 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

100 
	#PTHREAD_MUTEX_INITIALIZER
 \

101 { { 0, 0, 0, 0, 0, { 0 } } }

	)

102 #ifde‡
__USE_GNU


103 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

105 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

107 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

114 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


117 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

120 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


124 
	#PTHREAD_RWLOCK_INITIALIZER
 \

125 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

126 #ifde‡
__USE_GNU


127 #i‡
__WORDSIZE
 == 64

128 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

130 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

132 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


133 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

134 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

135 0, 0, 0, 0 } }

	)

137 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

138 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

139 0 } }

	)

149 
	mPTHREAD_INHERIT_SCHED
,

150 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

151 
	mPTHREAD_EXPLICIT_SCHED


152 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

159 
	mPTHREAD_SCOPE_SYSTEM
,

160 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

161 
	mPTHREAD_SCOPE_PROCESS


162 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

169 
	mPTHREAD_PROCESS_PRIVATE
,

170 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

171 
	mPTHREAD_PROCESS_SHARED


172 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

178 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

182 
	s_±hªad_˛ónup_buf„r


184 (*
	m__routöe
) (*);

185 *
	m__¨g
;

186 
	m__ˇn˚…y≥
;

187 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

193 
	mPTHREAD_CANCEL_ENABLE
,

194 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

195 
	mPTHREAD_CANCEL_DISABLE


196 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

200 
	mPTHREAD_CANCEL_DEFERRED
,

201 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

202 
	mPTHREAD_CANCEL_ASYNCHRONOUS


203 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

205 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

209 
	#PTHREAD_ONCE_INIT
 0

	)

212 #ifde‡
__USE_XOPEN2K


216 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

220 
__BEGIN_DECLS


225 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

226 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

227 *(*
__°¨t_routöe
) (*),

228 *
__ª°ri˘
 
__¨g
Ë
__THROW
 
__n⁄nuŒ
 ((1, 3));

234 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

242 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

244 #ifde‡
__USE_GNU


247 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

255 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

256 
__c⁄°
 
time•ec
 *
__ab°ime
);

263 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

267 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

270 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

278 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

281 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

282 
__THROW
 
	`__n⁄nuŒ
 ((1));

285 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

286 *
__dëach°©e
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

290 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

291 
__dëach°©e
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

297 
size_t
 *
__gu¨dsize
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

301 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

302 
size_t
 
__gu¨dsize
)

303 
__THROW
 
	`__n⁄nuŒ
 ((1));

307 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


308 
__©å
,

309 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

310 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

313 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

314 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


315 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

318 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


319 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

323 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


328 
__©å
, *
__ª°ri˘
 
__öhîô
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

333 
__öhîô
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

338 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

339 *
__ª°ri˘
 
__sc›e
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

343 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

344 
__THROW
 
	`__n⁄nuŒ
 ((1));

347 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


348 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

349 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

355 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

356 *
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

360 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


361 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

367 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

368 
size_t
 
__°acksize
)

369 
__THROW
 
	`__n⁄nuŒ
 ((1));

371 #ifde‡
__USE_XOPEN2K


373 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

374 **
__ª°ri˘
 
__°ackaddr
,

375 
size_t
 *
__ª°ri˘
 
__°acksize
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

381 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

382 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

385 #ifde‡
__USE_GNU


388 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

389 
size_t
 
__˝u£tsize
,

390 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

395 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

396 
size_t
 
__˝u£tsize
,

397 
˝u_£t_t
 *
__˝u£t
)

398 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

404 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

405 
__THROW
 
	`__n⁄nuŒ
 ((2));

413 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

414 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

415 
__THROW
 
	`__n⁄nuŒ
 ((3));

418 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

419 *
__ª°ri˘
 
__pﬁicy
,

420 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

424 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

425 
__THROW
;

428 #ifde‡
__USE_GNU


430 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

431 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

435 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, 
__c⁄°
 *
__«me
)

436 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 #ifde‡
__USE_UNIX98


442 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

445 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

448 #ifde‡
__USE_GNU


453 
	$±hªad_yõld
 (Ë
__THROW
;

458 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

459 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

460 
__THROW
 
	`__n⁄nuŒ
 ((3));

463 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

464 
˝u_£t_t
 *
__˝u£t
)

465 
__THROW
 
	`__n⁄nuŒ
 ((3));

478 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

479 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

490 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

494 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

497 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

502 
	`±hªad_ã°ˇn˚l
 ();

511 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

512 
__mask_was_ßved
;

513 } 
__ˇn˚l_jmp_buf
[1];

514 *
__∑d
[4];

515 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

518 #i‚de‡
__˛ónup_f˘_©åibuã


519 
	#__˛ónup_f˘_©åibuã


	)

524 
	s__±hªad_˛ónup_‰ame


526 (*
__ˇn˚l_routöe
) (*);

527 *
__ˇn˚l_¨g
;

528 
__do_ô
;

529 
__ˇn˚l_ty≥
;

532 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


533 #ifde‡
__˝lu•lus


535 ˛as†
	c__±hªad_˛ónup_˛ass


537 (*
__ˇn˚l_routöe
) (*);

538 *
__ˇn˚l_¨g
;

539 
__do_ô
;

540 
__ˇn˚l_ty≥
;

542 
public
:

543 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

544 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

545 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

546 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

547 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

548 &
__ˇn˚l_ty≥
); 
	}
}

549 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

559 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

561 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

565 
	#±hªad_˛ónup_p›
(
execuã
) \

566 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

567 } 0)

	)

569 #ifde‡
__USE_GNU


573 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

575 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

576 
__˛‰ame
.
	`__de„r
 ()

	)

581 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

582 
__˛‰ame
.
	`__ª°‹e
 (); \

583 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

584 } 0)

	)

591 
__exã∫_ölöe
 

592 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

594 i‡(
__‰ame
->
__do_ô
)

595 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

596 
	}
}

605 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

607 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

608 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

609 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

610 .
__do_ô
 = 1 };

	)

614 
	#±hªad_˛ónup_p›
(
execuã
) \

615 
__˛‰ame
.
__do_ô
 = (
execuã
); \

616 } 0)

	)

618 #ifde‡
__USE_GNU


622 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

624 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

625 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

626 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

627 .
__do_ô
 = 1 }; \

628 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

629 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

634 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

635 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

636 
__˛‰ame
.
__do_ô
 = (
execuã
); \

637 } 0)

	)

648 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

650 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

651 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

652 *
__ˇn˚l_¨g
 = (
¨g
); \

653 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

654 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

655 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

657 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

658 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

662 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

663 dÿ{

	)

664 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

665 
__˛ónup_f˘_©åibuã
;

669 
	#±hªad_˛ónup_p›
(
execuã
) \

672 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

673 i‡(
execuã
) \

674 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

675 } 0)

	)

676 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

677 
__˛ónup_f˘_©åibuã
;

679 #ifde‡
__USE_GNU


683 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

685 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

686 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

687 *
__ˇn˚l_¨g
 = (
¨g
); \

688 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

689 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

690 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

692 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

693 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

697 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

698 dÿ{

	)

699 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

700 
__˛ónup_f˘_©åibuã
;

705 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

708 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

709 i‡(
execuã
) \

710 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

711 
	}
} 0)

	)

712 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

713 
__˛ónup_f˘_©åibuã
;

717 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

718 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

719 #i‚de‡
SHARED


720 
	`__©åibuã__
 ((
__wók__
))

726 
__jmp_buf_èg
;

727 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

733 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

734 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

735 
__THROW
 
	`__n⁄nuŒ
 ((1));

738 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

739 
__THROW
 
	`__n⁄nuŒ
 ((1));

742 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

743 
__THROW
 
	`__n⁄nuŒ
 ((1));

746 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

747 
__THROW
 
	`__n⁄nuŒ
 ((1));

749 #ifde‡
__USE_XOPEN2K


751 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

752 
__c⁄°
 
time•ec
 *
__ª°ri˘


753 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

757 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

758 
__THROW
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx_t
 *

763 
__ª°ri˘
 
__muãx
,

764 *
__ª°ri˘
 
__¥io˚ûög
)

765 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

769 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

770 
__¥io˚ûög
,

771 *
__ª°ri˘
 
__ﬁd_˚ûög
)

772 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

775 #ifde‡
__USE_XOPEN2K8


777 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

778 
__THROW
 
	`__n⁄nuŒ
 ((1));

779 #ifde‡
__USE_GNU


780 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1));

790 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1));

794 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

795 
__THROW
 
	`__n⁄nuŒ
 ((1));

798 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

799 
__ª°ri˘
 
__©å
,

800 *
__ª°ri˘
 
__psh¨ed
)

801 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

804 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

805 
__psh¨ed
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1));

808 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


810 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


811 
__©å
, *
__ª°ri˘
 
__köd
)

812 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

817 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

822 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (
__c⁄°
 
±hªad_muãx©å_t
 *

823 
__ª°ri˘
 
__©å
,

824 *
__ª°ri˘
 
__¥Ÿocﬁ
)

825 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

829 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

830 
__¥Ÿocﬁ
)

831 
__THROW
 
	`__n⁄nuŒ
 ((1));

834 
	$±hªad_muãx©å_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx©å_t
 *

835 
__ª°ri˘
 
__©å
,

836 *
__ª°ri˘
 
__¥io˚ûög
)

837 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

840 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

841 
__¥io˚ûög
)

842 
__THROW
 
	`__n⁄nuŒ
 ((1));

844 #ifde‡
__USE_XOPEN2K


846 
	$±hªad_muãx©å_gërobu°
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

847 *
__robu°√ss
)

848 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

849 #ifde‡
__USE_GNU


850 
	$±hªad_muãx©å_gërobu°_≈
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

851 *
__robu°√ss
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__robu°√ss
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

859 #ifde‡
__USE_GNU


860 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

861 
__robu°√ss
)

862 
__THROW
 
	`__n⁄nuŒ
 ((1));

867 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


872 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

873 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


874 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

877 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

881 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

882 
__THROW
 
	`__n⁄nuŒ
 ((1));

885 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

886 
__THROW
 
	`__n⁄nuŒ
 ((1));

888 #ifde‡
__USE_XOPEN2K


890 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

891 
__c⁄°
 
time•ec
 *
__ª°ri˘


892 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

896 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

897 
__THROW
 
	`__n⁄nuŒ
 ((1));

900 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1));

903 #ifde‡
__USE_XOPEN2K


905 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

906 
__c⁄°
 
time•ec
 *
__ª°ri˘


907 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

911 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

912 
__THROW
 
	`__n⁄nuŒ
 ((1));

918 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

922 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1));

926 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

927 
__ª°ri˘
 
__©å
,

928 *
__ª°ri˘
 
__psh¨ed
)

929 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

932 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

933 
__psh¨ed
)

934 
__THROW
 
	`__n⁄nuŒ
 ((1));

937 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

938 
__ª°ri˘
 
__©å
,

939 *
__ª°ri˘
 
__¥ef
)

940 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

943 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

944 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

952 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

953 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


954 
__c⁄d_©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

957 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

958 
__THROW
 
	`__n⁄nuŒ
 ((1));

961 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

962 
__THROW
 
	`__n⁄nuŒ
 ((1));

965 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

966 
__THROW
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

974 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

975 
	`__n⁄nuŒ
 ((1, 2));

984 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

985 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

986 
__c⁄°
 
time•ec
 *
__ª°ri˘


987 
__ab°ime
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

992 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

993 
__THROW
 
	`__n⁄nuŒ
 ((1));

996 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1001 
__ª°ri˘
 
__©å
,

1002 *
__ª°ri˘
 
__psh¨ed
)

1003 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1006 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1007 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1009 #ifde‡
__USE_XOPEN2K


1011 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1012 
__ª°ri˘
 
__©å
,

1013 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1014 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1017 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1018 
__˛ockid_t
 
__˛ock_id
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 #ifde‡
__USE_XOPEN2K


1028 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1029 
__THROW
 
	`__n⁄nuŒ
 ((1));

1032 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1033 
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1037 
__THROW
 
	`__n⁄nuŒ
 ((1));

1040 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1041 
__THROW
 
	`__n⁄nuŒ
 ((1));

1044 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1045 
__THROW
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1053 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1054 
__©å
, 
__cou¡
)

1055 
__THROW
 
	`__n⁄nuŒ
 ((1));

1058 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1059 
__THROW
 
	`__n⁄nuŒ
 ((1));

1062 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1063 
__THROW
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1068 
__THROW
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1072 
__THROW
 
	`__n⁄nuŒ
 ((1));

1075 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

1076 
__ª°ri˘
 
__©å
,

1077 *
__ª°ri˘
 
__psh¨ed
)

1078 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1081 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1082 
__psh¨ed
)

1083 
__THROW
 
	`__n⁄nuŒ
 ((1));

1095 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1096 (*
__de°r_fun˘i⁄
) (*))

1097 
__THROW
 
	`__n⁄nuŒ
 ((1));

1100 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1103 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1106 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1107 
__c⁄°
 *
__poöãr
Ë
__THROW
 ;

1110 #ifde‡
__USE_XOPEN2K


1112 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1113 
__˛ockid_t
 *
__˛ock_id
)

1114 
__THROW
 
	`__n⁄nuŒ
 ((2));

1129 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1130 (*
__∑ª¡
) (),

1131 (*
__chûd
Ë()Ë
__THROW
;

1134 #ifde‡
__USE_EXTERN_INLINES


1136 
__exã∫_ölöe
 

1137 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1139  
__thªad1
 =
__thªad2
;

1140 
	}
}

1143 
	g__END_DECLS


	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@/usr/include/asm-generic/bitsperlong.h

1 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


2 
	#__ASM_GENERIC_BITS_PER_LONG


	)

11 #i‚de‡
__BITS_PER_LONG


12 
	#__BITS_PER_LONG
 32

	)

	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/asm/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/bits/setjmp.h

20 #i‚de‡
_BITS_SETJMP_H


21 
	#_BITS_SETJMP_H
 1

	)

23 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


27 
	~<bôs/w‹dsize.h
>

29 #i‚de‡
_ASM


31 #i‡
__WORDSIZE
 == 64

32 
	t__jmp_buf
[8];

34 
	t__jmp_buf
[6];

	@/usr/include/sched.h

21 #i‚def 
_SCHED_H


22 
	#_SCHED_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

32 
	#__√ed_time_t


	)

33 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/asm-generic/ioctl.h

1 #i‚de‡
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

30 #i‚de‡
_IOC_SIZEBITS


31 
	#_IOC_SIZEBITS
 14

	)

34 #i‚de‡
_IOC_DIRBITS


35 
	#_IOC_DIRBITS
 2

	)

38 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

39 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

40 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

41 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

43 
	#_IOC_NRSHIFT
 0

	)

44 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

45 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

46 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

53 #i‚de‡
_IOC_NONE


54 
	#_IOC_NONE
 0U

	)

57 #i‚de‡
_IOC_WRITE


58 
	#_IOC_WRITE
 1U

	)

61 #i‚de‡
_IOC_READ


62 
	#_IOC_READ
 2U

	)

65 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

66 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

67 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

68 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

69 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

71 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

74 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

75 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

76 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

77 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

78 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

79 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

80 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

83 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

84 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

85 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

86 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

90 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

91 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

92 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

93 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

94 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@/usr/include/bits/sched.h

22 #i‚de‡
__√ed_sched∑øm


24 #i‚de‡
_SCHED_H


30 
	#SCHED_OTHER
 0

	)

31 
	#SCHED_FIFO
 1

	)

32 
	#SCHED_RR
 2

	)

33 #ifde‡
__USE_GNU


34 
	#SCHED_BATCH
 3

	)

35 
	#SCHED_IDLE
 5

	)

37 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

40 #ifde‡
__USE_MISC


42 
	#CSIGNAL
 0x000000f‡

	)

43 
	#CLONE_VM
 0x00000100

	)

44 
	#CLONE_FS
 0x00000200

	)

45 
	#CLONE_FILES
 0x00000400

	)

46 
	#CLONE_SIGHAND
 0x00000800

	)

47 
	#CLONE_PTRACE
 0x00002000

	)

48 
	#CLONE_VFORK
 0x00004000

	)

50 
	#CLONE_PARENT
 0x00008000

	)

52 
	#CLONE_THREAD
 0x00010000

	)

53 
	#CLONE_NEWNS
 0x00020000

	)

54 
	#CLONE_SYSVSEM
 0x00040000

	)

55 
	#CLONE_SETTLS
 0x00080000

	)

56 
	#CLONE_PARENT_SETTID
 0x00100000

	)

58 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

60 
	#CLONE_DETACHED
 0x00400000

	)

61 
	#CLONE_UNTRACED
 0x00800000

	)

63 
	#CLONE_CHILD_SETTID
 0x01000000

	)

65 
	#CLONE_NEWUTS
 0x04000000

	)

66 
	#CLONE_NEWIPC
 0x08000000

	)

67 
	#CLONE_NEWUSER
 0x10000000

	)

68 
	#CLONE_NEWPID
 0x20000000

	)

69 
	#CLONE_NEWNET
 0x40000000

	)

70 
	#CLONE_IO
 0x80000000

	)

74 
	ssched_∑øm


76 
	m__sched_¥i‹ôy
;

79 
	g__BEGIN_DECLS


81 #ifde‡
__USE_MISC


83 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

84 
__Êags
, *
__¨g
, ...Ë
__THROW
;

87 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

90 
	$sched_gë˝u
 (Ë
__THROW
;

93 
__END_DECLS


97 #i‡!
deföed
 
__deföed_sched∑øm
 \

98 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

99 
	#__deföed_sched∑øm
 1

	)

101 
	s__sched_∑øm


103 
__sched_¥i‹ôy
;

105 #unde‡
__√ed_sched∑øm


109 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


110 
	#__˝u_£t_t_deföed


	)

112 
	#__CPU_SETSIZE
 1024

	)

113 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

116 
	t__˝u_mask
;

119 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

120 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

125 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

126 } 
	t˝u_£t_t
;

129 #i‡
	`__GNUC_PREREQ
 (2, 91)

130 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

131 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

133 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

135 
size_t
 
__i
; \

136 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

137 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

138 
__i
 = 0; __ò< 
__imax
; ++__i) \

139 
__bôs
[
__i
] = 0; \

140 
	}
} 0)

	)

142 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

143 (
__exãnsi⁄__
 \

144 ({ 
size_t
 
__˝u
 = (
˝u
); \

145 
__˝u
 < 8 * (
£tsize
) \

146 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

147 |
	`__CPUMASK
 (
__˝u
)) \

148 : 0; }))

	)

149 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

150 (
__exãnsi⁄__
 \

151 ({ 
size_t
 
__˝u
 = (
˝u
); \

152 
__˝u
 < 8 * (
£tsize
) \

153 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

154 &~
	`__CPUMASK
 (
__˝u
)) \

155 : 0; }))

	)

156 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

157 (
__exãnsi⁄__
 \

158 ({ 
size_t
 
__˝u
 = (
˝u
); \

159 
__˝u
 < 8 * (
£tsize
) \

160 ? ((((
__c⁄°
 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

161 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

162 : 0; }))

	)

164 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

165 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

167 #i‡
__GNUC_PREREQ
 (2, 91)

168 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

169 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

171 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

172 (
__exãnsi⁄__
 \

173 ({ 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

174 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

175 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

176 
size_t
 
__i
; \

177 
__i
 = 0; __ò< 
__imax
; ++__i) \

178 i‡(
__bôs
[
__i
] != __bits[__i]) \

180 
__i
 =
__imax
; }))

	)

183 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

184 (
__exãnsi⁄__
 \

185 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

186 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

187 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

188 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

189 
size_t
 
__i
; \

190 
__i
 = 0; __ò< 
__imax
; ++__i) \

191 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

192 
__de°
; }))

	)

194 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

195 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

196 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

197 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

199 
__BEGIN_DECLS


201 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

202 
__THROW
;

203 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

204 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

206 
__END_DECLS


	@
1
.
1
/usr/include
168
4620
dhdutil/bcmutils.c
dhdutil/dhdu.c
dhdutil/dhdu.h
dhdutil/dhdu_cmd.h
dhdutil/dhdu_common.h
dhdutil/dhdu_linux.c
dhdutil/include/bcmcdc.h
dhdutil/include/bcmdefs.h
dhdutil/include/bcmdevs.h
dhdutil/include/bcmendian.h
dhdutil/include/bcmutils.h
dhdutil/include/bcmwifi.h
dhdutil/include/dhdioctl.h
dhdutil/include/epivers.h
dhdutil/include/miniopt.h
dhdutil/include/packed_section_end.h
dhdutil/include/packed_section_start.h
dhdutil/include/proto/802.11.h
dhdutil/include/proto/802.1d.h
dhdutil/include/proto/bcmeth.h
dhdutil/include/proto/bcmevent.h
dhdutil/include/proto/bcmip.h
dhdutil/include/proto/bt_amp_hci.h
dhdutil/include/proto/ethernet.h
dhdutil/include/proto/vlan.h
dhdutil/include/proto/wpa.h
dhdutil/include/sdiovar.h
dhdutil/include/trxhdr.h
dhdutil/include/typedefs.h
dhdutil/include/wlioctl.h
dhdutil/miniopt.c
wpa_supplicant_8_lib/driver_cmd_common.h
wpa_supplicant_8_lib/driver_cmd_nl80211.c
wpa_supplicant_8_lib/driver_cmd_wext.c
wpa_supplicant_8_lib/driver_cmd_wext.h
wpa_supplicant_8_lib/driver_nl80211.h
/usr/include/arpa/inet.h
/usr/include/assert.h
/usr/include/ctype.h
/usr/include/errno.h
/usr/include/error.h
/usr/include/fcntl.h
/usr/include/linux/ethtool.h
/usr/include/linux/filter.h
/usr/include/linux/rtnetlink.h
/usr/include/linux/sockios.h
/usr/include/linux/types.h
/usr/include/linux/version.h
/usr/include/net/if.h
/usr/include/net/if_arp.h
/usr/include/netdb.h
/usr/include/netpacket/packet.h
/usr/include/signal.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/ioctl.h
/usr/include/sys/socket.h
/usr/include/sys/stat.h
/usr/include/sys/types.h
/usr/include/sys/wait.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/asm/sockios.h
/usr/include/asm/types.h
/usr/include/bits/confname.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/error.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/ioctl-types.h
/usr/include/bits/ioctls.h
/usr/include/bits/netdb.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/socket.h
/usr/include/bits/socket2.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/linux/if_addr.h
/usr/include/linux/if_link.h
/usr/include/linux/neighbour.h
/usr/include/linux/netlink.h
/usr/include/linux/posix_types.h
/usr/include/netinet/in.h
/usr/include/rpc/netdb.h
/usr/include/stdint.h
/usr/include/sys/cdefs.h
/usr/include/sys/resource.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ttydefaults.h
/usr/include/sys/ucontext.h
/usr/include/sys/uio.h
/usr/include/time.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/asm-generic/sockios.h
/usr/include/asm-generic/types.h
/usr/include/asm/ioctls.h
/usr/include/asm/posix_types.h
/usr/include/asm/socket.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/in.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/predefs.h
/usr/include/bits/resource.h
/usr/include/bits/select.h
/usr/include/bits/sockaddr.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/time.h
/usr/include/bits/typesizes.h
/usr/include/bits/uio.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/gnu/stubs.h
/usr/include/linux/errno.h
/usr/include/linux/socket.h
/usr/include/linux/stddef.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm-generic/ioctls.h
/usr/include/asm-generic/socket.h
/usr/include/asm/errno.h
/usr/include/bits/libc-lock.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/wchar.h
/usr/include/asm-generic/errno.h
/usr/include/asm/bitsperlong.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/gnu/option-groups.h
/usr/include/linux/ioctl.h
/usr/include/pthread.h
/usr/include/wctype.h
/usr/include/asm-generic/bitsperlong.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm/ioctl.h
/usr/include/bits/setjmp.h
/usr/include/sched.h
/usr/include/asm-generic/ioctl.h
/usr/include/bits/sched.h
